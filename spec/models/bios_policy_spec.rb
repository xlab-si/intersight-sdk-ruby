=begin
#Cisco Intersight

#Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-10-20T11:22:53Z.

The version of the OpenAPI document: 1.0.9-4870
Contact: intersight@cisco.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for IntersightClient::BiosPolicy
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe IntersightClient::BiosPolicy do
  let(:instance) { IntersightClient::BiosPolicy.new }

  describe 'test an instance of BiosPolicy' do
    it 'should create an instance of BiosPolicy' do
      expect(instance).to be_instance_of(IntersightClient::BiosPolicy)
    end
  end
  describe 'test attribute "class_id"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["bios.Policy"])
      # validator.allowable_values.each do |value|
      #   expect { instance.class_id = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "object_type"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["bios.Policy"])
      # validator.allowable_values.each do |value|
      #   expect { instance.object_type = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "acs_control_gpu1state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.acs_control_gpu1state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "acs_control_gpu2state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.acs_control_gpu2state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "acs_control_gpu3state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.acs_control_gpu3state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "acs_control_gpu4state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.acs_control_gpu4state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "acs_control_gpu5state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.acs_control_gpu5state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "acs_control_gpu6state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.acs_control_gpu6state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "acs_control_gpu7state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.acs_control_gpu7state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "acs_control_gpu8state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.acs_control_gpu8state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "acs_control_slot11state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.acs_control_slot11state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "acs_control_slot12state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.acs_control_slot12state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "acs_control_slot13state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.acs_control_slot13state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "acs_control_slot14state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.acs_control_slot14state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "adjacent_cache_line_prefetch"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.adjacent_cache_line_prefetch = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "advanced_mem_test"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.advanced_mem_test = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "all_usb_devices"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.all_usb_devices = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "altitude"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "300-m", "900-m", "1500-m", "3000-m", "auto"])
      # validator.allowable_values.each do |value|
      #   expect { instance.altitude = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "aspm_support"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "Force L0s", "L1 Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.aspm_support = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "assert_nmi_on_perr"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.assert_nmi_on_perr = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "assert_nmi_on_serr"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.assert_nmi_on_serr = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "auto_cc_state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.auto_cc_state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "autonumous_cstate_enable"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.autonumous_cstate_enable = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "baud_rate"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "9600", "19200", "38400", "57600", "115200"])
      # validator.allowable_values.each do |value|
      #   expect { instance.baud_rate = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "bme_dma_mitigation"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.bme_dma_mitigation = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "boot_option_num_retry"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "5", "13", "Infinite"])
      # validator.allowable_values.each do |value|
      #   expect { instance.boot_option_num_retry = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "boot_option_re_cool_down"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "15", "45", "90"])
      # validator.allowable_values.each do |value|
      #   expect { instance.boot_option_re_cool_down = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "boot_option_retry"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.boot_option_retry = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "boot_performance_mode"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Max Efficient", "Max Performance", "Set by Intel NM"])
      # validator.allowable_values.each do |value|
      #   expect { instance.boot_performance_mode = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "burst_and_postponed_refresh"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.burst_and_postponed_refresh = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "c1auto_demotion"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.c1auto_demotion = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "c1auto_un_demotion"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.c1auto_un_demotion = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_cmn_apbdis"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "0", "1", "Auto"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_cmn_apbdis = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_cmn_cpu_cpb"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_cmn_cpu_cpb = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_cmn_cpu_gen_downcore_ctrl"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "FOUR (2 + 2)", "FOUR (4 + 0)", "SIX (3 + 3)", "THREE (3 + 0)", "TWO (1 + 1)", "TWO (2 + 0)"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_cmn_cpu_gen_downcore_ctrl = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_cmn_cpu_global_cstate_ctrl"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_cmn_cpu_global_cstate_ctrl = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_cmn_cpu_l1stream_hw_prefetcher"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_cmn_cpu_l1stream_hw_prefetcher = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_cmn_cpu_l2stream_hw_prefetcher"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_cmn_cpu_l2stream_hw_prefetcher = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_cmn_cpu_smee"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_cmn_cpu_smee = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_cmn_cpu_streaming_stores_ctrl"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_cmn_cpu_streaming_stores_ctrl = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_cmn_determinism_slider"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Performance", "Power"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_cmn_determinism_slider = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_cmn_efficiency_mode_en"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_cmn_efficiency_mode_en = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_cmn_fixed_soc_pstate"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "P0", "P1", "P2", "P3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_cmn_fixed_soc_pstate = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_cmn_gnb_nb_iommu"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_cmn_gnb_nb_iommu = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_cmn_gnb_smu_df_cstates"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_cmn_gnb_smu_df_cstates = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_cmn_gnb_smucppc"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_cmn_gnb_smucppc = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_cmn_mem_ctrl_bank_group_swap_ddr4"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_cmn_mem_ctrl_bank_group_swap_ddr4 = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_cmn_mem_map_bank_interleave_ddr4"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_cmn_mem_map_bank_interleave_ddr4 = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_cmnc_tdp_ctl"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Manual"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_cmnc_tdp_ctl = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_cpu_ccd_ctrl_ssp"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "2 CCDs", "3 CCDs", "4 CCDs", "6 CCDs", "Auto"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_cpu_ccd_ctrl_ssp = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_cpu_core_ctrl"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "FIVE (5 + 0)", "FOUR (4 + 0)", "ONE (1 + 0)", "SEVEN (7 + 0)", "SIX (6 + 0)", "THREE (3 + 0)", "TWO (2 + 0)"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_cpu_core_ctrl = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_cpu_smt_ctrl"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_cpu_smt_ctrl = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_dbg_cpu_snp_mem_cover"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Custom", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_dbg_cpu_snp_mem_cover = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_dbg_cpu_snp_mem_size_cover"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "cbs_df_cmn_acpi_srat_l3numa"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_df_cmn_acpi_srat_l3numa = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_df_cmn_dram_nps"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "NPS0", "NPS1", "NPS2", "NPS4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_df_cmn_dram_nps = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_df_cmn_mem_intlv"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Channel", "Die", "None", "Socket"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_df_cmn_mem_intlv = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_df_cmn_mem_intlv_size"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "256 Bytes", "512 Bytes", "1 KB", "2 KB", "4 KB", "Auto"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_df_cmn_mem_intlv_size = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cbs_sev_snp_support"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cbs_sev_snp_support = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cdn_enable"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cdn_enable = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cdn_support"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "LOMs Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cdn_support = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "channel_inter_leave"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "1-way", "2-way", "3-way", "4-way", "auto"])
      # validator.allowable_values.each do |value|
      #   expect { instance.channel_inter_leave = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cisco_adaptive_mem_training"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cisco_adaptive_mem_training = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cisco_debug_level"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Maximum", "Minimum", "Normal"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cisco_debug_level = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cisco_oprom_launch_optimization"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cisco_oprom_launch_optimization = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cisco_xgmi_max_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cisco_xgmi_max_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cke_low_policy"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "auto", "disabled", "fast", "slow"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cke_low_policy = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "closed_loop_therm_throtl"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.closed_loop_therm_throtl = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cmci_enable"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cmci_enable = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "config_tdp"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.config_tdp = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "config_tdp_level"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Level 1", "Level 2", "Normal"])
      # validator.allowable_values.each do |value|
      #   expect { instance.config_tdp_level = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "console_redirection"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "com-0", "com-1", "disabled", "enabled", "serial-port-a"])
      # validator.allowable_values.each do |value|
      #   expect { instance.console_redirection = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "core_multi_processing"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "all"])
      # validator.allowable_values.each do |value|
      #   expect { instance.core_multi_processing = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cpu_energy_performance"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "balanced-energy", "balanced-performance", "balanced-power", "energy-efficient", "performance", "power"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cpu_energy_performance = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cpu_frequency_floor"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cpu_frequency_floor = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cpu_perf_enhancement"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cpu_perf_enhancement = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cpu_performance"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "custom", "enterprise", "high-throughput", "hpc"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cpu_performance = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cpu_power_management"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "custom", "disabled", "energy-efficient", "performance"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cpu_power_management = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cr_qos"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Disabled", "Mode 0 - Disable the PMem QoS Feature", "Mode 1 - M2M QoS Enable and CHA QoS Disable", "Mode 2 - M2M QoS Enable and CHA QoS Enable", "Recipe 1", "Recipe 2", "Recipe 3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cr_qos = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "crfastgo_config"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Default", "Disable optimization", "Enable optimization", "Option 1", "Option 2", "Option 3", "Option 4", "Option 5"])
      # validator.allowable_values.each do |value|
      #   expect { instance.crfastgo_config = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "dcpmm_firmware_downgrade"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.dcpmm_firmware_downgrade = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "demand_scrub"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.demand_scrub = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "direct_cache_access"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.direct_cache_access = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "dram_clock_throttling"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Balanced", "Energy Efficient", "Performance"])
      # validator.allowable_values.each do |value|
      #   expect { instance.dram_clock_throttling = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "dram_refresh_rate"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "1x", "2x", "3x", "4x", "Auto"])
      # validator.allowable_values.each do |value|
      #   expect { instance.dram_refresh_rate = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "dram_sw_thermal_throttling"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.dram_sw_thermal_throttling = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "eadr_support"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.eadr_support = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "edpc_en"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Disabled", "On Fatal Error", "On Fatal and Non-Fatal Errors"])
      # validator.allowable_values.each do |value|
      #   expect { instance.edpc_en = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "enable_clock_spread_spec"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.enable_clock_spread_spec = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "enable_mktme"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.enable_mktme = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "enable_sgx"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.enable_sgx = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "enable_tme"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.enable_tme = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "energy_efficient_turbo"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.energy_efficient_turbo = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "eng_perf_tuning"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "BIOS", "OS"])
      # validator.allowable_values.each do |value|
      #   expect { instance.eng_perf_tuning = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "enhanced_intel_speed_step_tech"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.enhanced_intel_speed_step_tech = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "epoch_update"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Change to New Random Owner EPOCHs", "Manual User Defined Owner EPOCHs", "SGX Owner EPOCH activated"])
      # validator.allowable_values.each do |value|
      #   expect { instance.epoch_update = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "epp_enable"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.epp_enable = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "epp_profile"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Balanced Performance", "Balanced Power", "Performance", "Power"])
      # validator.allowable_values.each do |value|
      #   expect { instance.epp_profile = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "execute_disable_bit"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.execute_disable_bit = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "extended_apic"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "X2APIC", "XAPIC"])
      # validator.allowable_values.each do |value|
      #   expect { instance.extended_apic = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "flow_control"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "none", "rts-cts"])
      # validator.allowable_values.each do |value|
      #   expect { instance.flow_control = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "frb2enable"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.frb2enable = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "hardware_prefetch"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.hardware_prefetch = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "hwpm_enable"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Disabled", "HWPM Native Mode", "HWPM OOB Mode", "NATIVE MODE", "Native Mode with no Legacy", "OOB MODE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.hwpm_enable = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "imc_interleave"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "1-way Interleave", "2-way Interleave", "Auto"])
      # validator.allowable_values.each do |value|
      #   expect { instance.imc_interleave = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "intel_dynamic_speed_select"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.intel_dynamic_speed_select = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "intel_hyper_threading_tech"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.intel_hyper_threading_tech = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "intel_speed_select"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Base", "Config 1", "Config 2", "Config 3", "Config 4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.intel_speed_select = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "intel_turbo_boost_tech"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.intel_turbo_boost_tech = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "intel_virtualization_technology"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.intel_virtualization_technology = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "intel_vt_for_directed_io"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.intel_vt_for_directed_io = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "intel_vtd_coherency_support"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.intel_vtd_coherency_support = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "intel_vtd_interrupt_remapping"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.intel_vtd_interrupt_remapping = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "intel_vtd_pass_through_dma_support"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.intel_vtd_pass_through_dma_support = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "intel_vtdats_support"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.intel_vtdats_support = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "ioh_error_enable"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "No", "Yes"])
      # validator.allowable_values.each do |value|
      #   expect { instance.ioh_error_enable = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "ioh_resource"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "IOH0 24k IOH1 40k", "IOH0 32k IOH1 32k", "IOH0 40k IOH1 24k", "IOH0 48k IOH1 16k", "IOH0 56k IOH1 8k"])
      # validator.allowable_values.each do |value|
      #   expect { instance.ioh_resource = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "ip_prefetch"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.ip_prefetch = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "ipv4http"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.ipv4http = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "ipv4pxe"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.ipv4pxe = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "ipv6http"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.ipv6http = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "ipv6pxe"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.ipv6pxe = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "kti_prefetch"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.kti_prefetch = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "legacy_os_redirection"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.legacy_os_redirection = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "legacy_usb_support"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.legacy_usb_support = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "llc_alloc"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.llc_alloc = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "llc_prefetch"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.llc_prefetch = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "lom_port0state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.lom_port0state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "lom_port1state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.lom_port1state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "lom_port2state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.lom_port2state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "lom_port3state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.lom_port3state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "lom_ports_all_state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.lom_ports_all_state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "lv_ddr_mode"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "auto", "performance-mode", "power-saving-mode"])
      # validator.allowable_values.each do |value|
      #   expect { instance.lv_ddr_mode = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "make_device_non_bootable"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.make_device_non_bootable = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "memory_bandwidth_boost"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.memory_bandwidth_boost = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "memory_inter_leave"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "1 Way Node Interleave", "2 Way Node Interleave", "4 Way Node Interleave", "8 Way Node Interleave", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.memory_inter_leave = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "memory_mapped_io_above4gb"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.memory_mapped_io_above4gb = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "memory_refresh_rate"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "1x Refresh", "2x Refresh"])
      # validator.allowable_values.each do |value|
      #   expect { instance.memory_refresh_rate = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "memory_size_limit"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "memory_thermal_throttling"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "CLTT with PECI", "Disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.memory_thermal_throttling = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "mirroring_mode"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "inter-socket", "intra-socket"])
      # validator.allowable_values.each do |value|
      #   expect { instance.mirroring_mode = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "mmcfg_base"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "1 GB", "2 GB", "2.5 GB", "3 GB", "Auto"])
      # validator.allowable_values.each do |value|
      #   expect { instance.mmcfg_base = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "network_stack"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.network_stack = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "numa_optimized"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.numa_optimized = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "nvmdimm_perform_config"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "BW Optimized", "Balanced Profile", "Latency Optimized"])
      # validator.allowable_values.each do |value|
      #   expect { instance.nvmdimm_perform_config = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "onboard10gbit_lom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.onboard10gbit_lom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "onboard_gbit_lom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.onboard_gbit_lom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "onboard_scu_storage_support"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.onboard_scu_storage_support = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "onboard_scu_storage_sw_stack"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Intel RSTe", "LSI SW RAID"])
      # validator.allowable_values.each do |value|
      #   expect { instance.onboard_scu_storage_sw_stack = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "operation_mode"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Test Only", "Test and Repair"])
      # validator.allowable_values.each do |value|
      #   expect { instance.operation_mode = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "os_boot_watchdog_timer"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.os_boot_watchdog_timer = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "os_boot_watchdog_timer_policy"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "do-nothing", "power-off", "reset"])
      # validator.allowable_values.each do |value|
      #   expect { instance.os_boot_watchdog_timer_policy = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "os_boot_watchdog_timer_timeout"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "5-minutes", "10-minutes", "15-minutes", "20-minutes"])
      # validator.allowable_values.each do |value|
      #   expect { instance.os_boot_watchdog_timer_timeout = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "out_of_band_mgmt_port"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.out_of_band_mgmt_port = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "package_cstate_limit"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "C0 C1 State", "C0/C1", "C2", "C6 Non Retention", "C6 Retention", "No Limit"])
      # validator.allowable_values.each do |value|
      #   expect { instance.package_cstate_limit = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "panic_high_watermark"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "High", "Low"])
      # validator.allowable_values.each do |value|
      #   expect { instance.panic_high_watermark = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "partial_cache_line_sparing"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.partial_cache_line_sparing = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "partial_mirror_mode_config"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "Percentage", "Value in GB"])
      # validator.allowable_values.each do |value|
      #   expect { instance.partial_mirror_mode_config = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "partial_mirror_percent"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "partial_mirror_value1"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "partial_mirror_value2"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "partial_mirror_value3"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "partial_mirror_value4"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "patrol_scrub"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "Enable at End of POST", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.patrol_scrub = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "patrol_scrub_duration"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "pc_ie_ras_support"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pc_ie_ras_support = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pc_ie_ssd_hot_plug_support"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pc_ie_ssd_hot_plug_support = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pch_usb30mode"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pch_usb30mode = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pci_option_ro_ms"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pci_option_ro_ms = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pci_rom_clp"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pci_rom_clp = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_ari_support"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_ari_support = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_pll_ssc"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "ZeroPointFive"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_pll_ssc = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_slot_mraid1link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_slot_mraid1link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_slot_mraid1option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_slot_mraid1option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_slot_mraid2link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_slot_mraid2link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_slot_mraid2option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_slot_mraid2option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_slot_mstorraid_link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_slot_mstorraid_link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_slot_mstorraid_option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_slot_mstorraid_option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_slot_nvme1link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_slot_nvme1link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_slot_nvme1option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_slot_nvme1option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_slot_nvme2link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_slot_nvme2link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_slot_nvme2option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_slot_nvme2option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_slot_nvme3link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_slot_nvme3link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_slot_nvme3option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_slot_nvme3option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_slot_nvme4link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_slot_nvme4link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_slot_nvme4option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_slot_nvme4option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_slot_nvme5link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_slot_nvme5link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_slot_nvme5option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_slot_nvme5option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_slot_nvme6link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_slot_nvme6link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_slot_nvme6option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_slot_nvme6option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pcie_slots_cdn_enable"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pcie_slots_cdn_enable = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pop_support"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pop_support = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "post_error_pause"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.post_error_pause = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "post_package_repair"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Disabled", "Hard PPR"])
      # validator.allowable_values.each do |value|
      #   expect { instance.post_package_repair = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "processor_c1e"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.processor_c1e = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "processor_c3report"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.processor_c3report = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "processor_c6report"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.processor_c6report = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "processor_cstate"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.processor_cstate = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "psata"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "AHCI", "Disabled", "LSI SW RAID"])
      # validator.allowable_values.each do |value|
      #   expect { instance.psata = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pstate_coord_type"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "HW ALL", "SW ALL", "SW ANY"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pstate_coord_type = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "putty_key_pad"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "ESCN", "LINUX", "SCO", "VT100", "VT400", "XTERMR6"])
      # validator.allowable_values.each do |value|
      #   expect { instance.putty_key_pad = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pwr_perf_tuning"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "bios", "os", "peci"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pwr_perf_tuning = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "qpi_link_frequency"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "6.4-gt/s", "7.2-gt/s", "8.0-gt/s", "9.6-gt/s", "auto"])
      # validator.allowable_values.each do |value|
      #   expect { instance.qpi_link_frequency = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "qpi_link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "10.4GT/s", "11.2GT/s", "9.6GT/s", "Auto"])
      # validator.allowable_values.each do |value|
      #   expect { instance.qpi_link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "qpi_snoop_mode"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "auto", "cluster-on-die", "early-snoop", "home-directory-snoop", "home-directory-snoop-with-osb", "home-snoop"])
      # validator.allowable_values.each do |value|
      #   expect { instance.qpi_snoop_mode = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "rank_inter_leave"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "1-way", "2-way", "4-way", "8-way", "auto"])
      # validator.allowable_values.each do |value|
      #   expect { instance.rank_inter_leave = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "redirection_after_post"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Always Enable", "Bootloader"])
      # validator.allowable_values.each do |value|
      #   expect { instance.redirection_after_post = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "sata_mode_select"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "AHCI", "Disabled", "LSI SW RAID"])
      # validator.allowable_values.each do |value|
      #   expect { instance.sata_mode_select = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "select_memory_ras_configuration"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "adddc-sparing", "lockstep", "maximum-performance", "mirror-mode-1lm", "mirroring", "partial-mirror-mode-1lm", "sparing"])
      # validator.allowable_values.each do |value|
      #   expect { instance.select_memory_ras_configuration = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "select_ppr_type"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "Hard PPR", "Soft PPR"])
      # validator.allowable_values.each do |value|
      #   expect { instance.select_ppr_type = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "serial_port_aenable"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.serial_port_aenable = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "sev"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "253 ASIDs", "509 ASIDs", "Auto"])
      # validator.allowable_values.each do |value|
      #   expect { instance.sev = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "sgx_auto_registration_agent"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.sgx_auto_registration_agent = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "sgx_epoch0"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "sgx_epoch1"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "sgx_factory_reset"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.sgx_factory_reset = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "sgx_le_pub_key_hash0"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "sgx_le_pub_key_hash1"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "sgx_le_pub_key_hash2"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "sgx_le_pub_key_hash3"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "sgx_le_wr"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.sgx_le_wr = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "sgx_package_info_in_band_access"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.sgx_package_info_in_band_access = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "sgx_qos"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.sgx_qos = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "sha1pcr_bank"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.sha1pcr_bank = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "sha256pcr_bank"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.sha256pcr_bank = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "single_pctl_enable"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "No", "Yes"])
      # validator.allowable_values.each do |value|
      #   expect { instance.single_pctl_enable = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot10link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot10link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot10state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot10state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot11link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot11link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot11state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot11state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot12link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot12link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot12state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot12state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot13state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot13state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot14state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot14state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot1link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot1link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot1state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot1state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot2link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot2link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot2state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot2state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot3link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot3link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot3state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot3state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot4link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot4link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot4state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot4state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot5link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot5link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot5state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot5state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot6link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot6link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot6state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot6state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot7link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot7link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot7state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot7state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot8link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot8link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot8state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot8state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot9link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot9link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot9state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot9state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_flom_link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_flom_link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme10link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme10link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme10option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme10option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme11link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme11link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme11option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme11option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme12link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme12link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme12option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme12option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme13option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme13option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme14option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme14option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme15option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme15option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme16option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme16option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme17option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme17option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme18option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme18option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme19option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme19option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme1link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme1link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme1option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme1option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme20option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme20option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme21option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme21option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme22option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme22option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme23option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme23option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme24option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme24option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme2link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme2link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme2option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme2option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme3link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme3link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme3option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme3option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme4link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme4link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme4option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme4option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme5link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme5link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme5option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme5option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme6link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme6link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme6option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme6option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme7link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme7link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme7option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme7option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme8link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme8link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme8option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme8option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme9link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme9link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_nvme9option_rom"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_nvme9option_rom = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_slot5link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_slot5link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_front_slot6link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_front_slot6link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_gpu1state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_gpu1state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_gpu2state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_gpu2state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_gpu3state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_gpu3state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_gpu4state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_gpu4state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_gpu5state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_gpu5state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_gpu6state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_gpu6state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_gpu7state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_gpu7state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_gpu8state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_gpu8state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_hba_link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_hba_link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_hba_state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_hba_state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_lom1link"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_lom1link = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_lom2link"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_lom2link = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_mezz_state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_mezz_state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_mlom_link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_mlom_link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_mlom_state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_mlom_state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_mraid_link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_mraid_link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_mraid_state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_mraid_state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n10state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n10state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n11state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n11state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n12state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n12state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n13state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n13state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n14state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n14state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n15state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n15state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n16state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n16state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n17state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n17state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n18state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n18state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n19state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n19state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n1state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n1state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n20state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n20state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n21state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n21state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n22state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n22state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n23state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n23state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n24state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n24state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n2state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n2state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n3state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n3state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n4state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n4state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n5state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n5state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n6state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n6state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n7state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n7state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n8state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n8state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_n9state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_n9state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_raid_link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_raid_link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_raid_state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_raid_state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_rear_nvme1link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_rear_nvme1link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_rear_nvme1state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_rear_nvme1state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_rear_nvme2link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_rear_nvme2link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_rear_nvme2state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_rear_nvme2state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_rear_nvme3link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_rear_nvme3link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_rear_nvme3state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_rear_nvme3state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_rear_nvme4link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_rear_nvme4link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_rear_nvme4state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_rear_nvme4state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_rear_nvme5state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_rear_nvme5state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_rear_nvme6state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_rear_nvme6state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_rear_nvme7state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_rear_nvme7state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_rear_nvme8state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_rear_nvme8state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_riser1link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_riser1link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_riser1slot1link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_riser1slot1link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_riser1slot2link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_riser1slot2link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_riser1slot3link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_riser1slot3link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_riser2link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_riser2link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_riser2slot4link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_riser2slot4link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_riser2slot5link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_riser2slot5link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_riser2slot6link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_riser2slot6link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_sas_state"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_sas_state = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_ssd_slot1link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_ssd_slot1link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "slot_ssd_slot2link_speed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      # validator.allowable_values.each do |value|
      #   expect { instance.slot_ssd_slot2link_speed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "smee"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.smee = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "smt_mode"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "Off"])
      # validator.allowable_values.each do |value|
      #   expect { instance.smt_mode = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "snc"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.snc = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "snoopy_mode_for2lm"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.snoopy_mode_for2lm = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "snoopy_mode_for_ad"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.snoopy_mode_for_ad = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "sparing_mode"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "dimm-sparing", "rank-sparing"])
      # validator.allowable_values.each do |value|
      #   expect { instance.sparing_mode = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "sr_iov"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.sr_iov = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "streamer_prefetch"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.streamer_prefetch = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "svm_mode"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.svm_mode = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "terminal_type"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "pc-ansi", "vt100", "vt100-plus", "vt-utf8"])
      # validator.allowable_values.each do |value|
      #   expect { instance.terminal_type = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "tpm_control"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.tpm_control = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "tpm_pending_operation"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "None", "TpmClear"])
      # validator.allowable_values.each do |value|
      #   expect { instance.tpm_pending_operation = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "tpm_support"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.tpm_support = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "tsme"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.tsme = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "txt_support"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.txt_support = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "ucsm_boot_order_rule"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Loose", "Strict"])
      # validator.allowable_values.each do |value|
      #   expect { instance.ucsm_boot_order_rule = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "ufs_disable"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.ufs_disable = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "uma_based_clustering"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Disable (All2All)", "Hemisphere (2-clusters)"])
      # validator.allowable_values.each do |value|
      #   expect { instance.uma_based_clustering = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "upi_link_enablement"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "1", "2", "Auto"])
      # validator.allowable_values.each do |value|
      #   expect { instance.upi_link_enablement = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "upi_power_management"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.upi_power_management = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "usb_emul6064"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.usb_emul6064 = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "usb_port_front"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.usb_port_front = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "usb_port_internal"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.usb_port_internal = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "usb_port_kvm"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.usb_port_kvm = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "usb_port_rear"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.usb_port_rear = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "usb_port_sd_card"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.usb_port_sd_card = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "usb_port_vmedia"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.usb_port_vmedia = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "usb_xhci_support"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.usb_xhci_support = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "vga_priority"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Offboard", "Onboard", "Onboard VGA Disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.vga_priority = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "virtual_numa"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.virtual_numa = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "vmd_enable"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.vmd_enable = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "vol_memory_mode"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "1LM", "2LM"])
      # validator.allowable_values.each do |value|
      #   expect { instance.vol_memory_mode = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "work_load_config"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Balanced", "I/O Sensitive", "NUMA", "UMA"])
      # validator.allowable_values.each do |value|
      #   expect { instance.work_load_config = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "xpt_prefetch"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.xpt_prefetch = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "xpt_remote_prefetch"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      # validator.allowable_values.each do |value|
      #   expect { instance.xpt_remote_prefetch = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "organization"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "profiles"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end

=begin
#Cisco Intersight

#Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-10-20T11:22:53Z.

The version of the OpenAPI document: 1.0.9-4870
Contact: intersight@cisco.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for IntersightClient::HyperflexApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'HyperflexApi' do
  before do
    # run before each test
    @api_instance = IntersightClient::HyperflexApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of HyperflexApi' do
    it 'should create an instance of HyperflexApi' do
      expect(@api_instance).to be_instance_of(IntersightClient::HyperflexApi)
    end
  end

  # unit tests for create_hyperflex_app_catalog
  # Create a &#39;hyperflex.AppCatalog&#39; resource.
  # @param hyperflex_app_catalog The &#39;hyperflex.AppCatalog&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexAppCatalog]
  describe 'create_hyperflex_app_catalog test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_auto_support_policy
  # Create a &#39;hyperflex.AutoSupportPolicy&#39; resource.
  # @param hyperflex_auto_support_policy The &#39;hyperflex.AutoSupportPolicy&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexAutoSupportPolicy]
  describe 'create_hyperflex_auto_support_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_capability_info
  # Create a &#39;hyperflex.CapabilityInfo&#39; resource.
  # @param hyperflex_capability_info The &#39;hyperflex.CapabilityInfo&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexCapabilityInfo]
  describe 'create_hyperflex_capability_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_cisco_hypervisor_manager
  # Create a &#39;hyperflex.CiscoHypervisorManager&#39; resource.
  # @param hyperflex_cisco_hypervisor_manager The &#39;hyperflex.CiscoHypervisorManager&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexCiscoHypervisorManager]
  describe 'create_hyperflex_cisco_hypervisor_manager test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_cluster_backup_policy
  # Create a &#39;hyperflex.ClusterBackupPolicy&#39; resource.
  # @param hyperflex_cluster_backup_policy The &#39;hyperflex.ClusterBackupPolicy&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexClusterBackupPolicy]
  describe 'create_hyperflex_cluster_backup_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_cluster_backup_policy_deployment
  # Create a &#39;hyperflex.ClusterBackupPolicyDeployment&#39; resource.
  # @param hyperflex_cluster_backup_policy_deployment The &#39;hyperflex.ClusterBackupPolicyDeployment&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexClusterBackupPolicyDeployment]
  describe 'create_hyperflex_cluster_backup_policy_deployment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_cluster_network_policy
  # Create a &#39;hyperflex.ClusterNetworkPolicy&#39; resource.
  # @param hyperflex_cluster_network_policy The &#39;hyperflex.ClusterNetworkPolicy&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexClusterNetworkPolicy]
  describe 'create_hyperflex_cluster_network_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_cluster_profile
  # Create a &#39;hyperflex.ClusterProfile&#39; resource.
  # @param hyperflex_cluster_profile The &#39;hyperflex.ClusterProfile&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexClusterProfile]
  describe 'create_hyperflex_cluster_profile test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_cluster_replication_network_policy
  # Create a &#39;hyperflex.ClusterReplicationNetworkPolicy&#39; resource.
  # @param hyperflex_cluster_replication_network_policy The &#39;hyperflex.ClusterReplicationNetworkPolicy&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexClusterReplicationNetworkPolicy]
  describe 'create_hyperflex_cluster_replication_network_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_cluster_replication_network_policy_deployment
  # Create a &#39;hyperflex.ClusterReplicationNetworkPolicyDeployment&#39; resource.
  # @param hyperflex_cluster_replication_network_policy_deployment The &#39;hyperflex.ClusterReplicationNetworkPolicyDeployment&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexClusterReplicationNetworkPolicyDeployment]
  describe 'create_hyperflex_cluster_replication_network_policy_deployment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_cluster_storage_policy
  # Create a &#39;hyperflex.ClusterStoragePolicy&#39; resource.
  # @param hyperflex_cluster_storage_policy The &#39;hyperflex.ClusterStoragePolicy&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexClusterStoragePolicy]
  describe 'create_hyperflex_cluster_storage_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_ext_fc_storage_policy
  # Create a &#39;hyperflex.ExtFcStoragePolicy&#39; resource.
  # @param hyperflex_ext_fc_storage_policy The &#39;hyperflex.ExtFcStoragePolicy&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexExtFcStoragePolicy]
  describe 'create_hyperflex_ext_fc_storage_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_ext_iscsi_storage_policy
  # Create a &#39;hyperflex.ExtIscsiStoragePolicy&#39; resource.
  # @param hyperflex_ext_iscsi_storage_policy The &#39;hyperflex.ExtIscsiStoragePolicy&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexExtIscsiStoragePolicy]
  describe 'create_hyperflex_ext_iscsi_storage_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_feature_limit_external
  # Create a &#39;hyperflex.FeatureLimitExternal&#39; resource.
  # @param hyperflex_feature_limit_external The &#39;hyperflex.FeatureLimitExternal&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexFeatureLimitExternal]
  describe 'create_hyperflex_feature_limit_external test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_feature_limit_internal
  # Create a &#39;hyperflex.FeatureLimitInternal&#39; resource.
  # @param hyperflex_feature_limit_internal The &#39;hyperflex.FeatureLimitInternal&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexFeatureLimitInternal]
  describe 'create_hyperflex_feature_limit_internal test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_health_check_definition
  # Create a &#39;hyperflex.HealthCheckDefinition&#39; resource.
  # @param hyperflex_health_check_definition The &#39;hyperflex.HealthCheckDefinition&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexHealthCheckDefinition]
  describe 'create_hyperflex_health_check_definition test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_health_check_package_checksum
  # Create a &#39;hyperflex.HealthCheckPackageChecksum&#39; resource.
  # @param hyperflex_health_check_package_checksum The &#39;hyperflex.HealthCheckPackageChecksum&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexHealthCheckPackageChecksum]
  describe 'create_hyperflex_health_check_package_checksum test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_hxap_datacenter
  # Create a &#39;hyperflex.HxapDatacenter&#39; resource.
  # @param hyperflex_hxap_datacenter The &#39;hyperflex.HxapDatacenter&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexHxapDatacenter]
  describe 'create_hyperflex_hxap_datacenter test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_hxdp_version
  # Create a &#39;hyperflex.HxdpVersion&#39; resource.
  # @param hyperflex_hxdp_version The &#39;hyperflex.HxdpVersion&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexHxdpVersion]
  describe 'create_hyperflex_hxdp_version test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_local_credential_policy
  # Create a &#39;hyperflex.LocalCredentialPolicy&#39; resource.
  # @param hyperflex_local_credential_policy The &#39;hyperflex.LocalCredentialPolicy&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexLocalCredentialPolicy]
  describe 'create_hyperflex_local_credential_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_node_config_policy
  # Create a &#39;hyperflex.NodeConfigPolicy&#39; resource.
  # @param hyperflex_node_config_policy The &#39;hyperflex.NodeConfigPolicy&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexNodeConfigPolicy]
  describe 'create_hyperflex_node_config_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_node_profile
  # Create a &#39;hyperflex.NodeProfile&#39; resource.
  # @param hyperflex_node_profile The &#39;hyperflex.NodeProfile&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexNodeProfile]
  describe 'create_hyperflex_node_profile test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_proxy_setting_policy
  # Create a &#39;hyperflex.ProxySettingPolicy&#39; resource.
  # @param hyperflex_proxy_setting_policy The &#39;hyperflex.ProxySettingPolicy&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexProxySettingPolicy]
  describe 'create_hyperflex_proxy_setting_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_server_firmware_version
  # Create a &#39;hyperflex.ServerFirmwareVersion&#39; resource.
  # @param hyperflex_server_firmware_version The &#39;hyperflex.ServerFirmwareVersion&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexServerFirmwareVersion]
  describe 'create_hyperflex_server_firmware_version test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_server_firmware_version_entry
  # Create a &#39;hyperflex.ServerFirmwareVersionEntry&#39; resource.
  # @param hyperflex_server_firmware_version_entry The &#39;hyperflex.ServerFirmwareVersionEntry&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexServerFirmwareVersionEntry]
  describe 'create_hyperflex_server_firmware_version_entry test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_server_model
  # Create a &#39;hyperflex.ServerModel&#39; resource.
  # @param hyperflex_server_model The &#39;hyperflex.ServerModel&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexServerModel]
  describe 'create_hyperflex_server_model test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_service_auth_token
  # Create a &#39;hyperflex.ServiceAuthToken&#39; resource.
  # @param hyperflex_service_auth_token The &#39;hyperflex.ServiceAuthToken&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexServiceAuthToken]
  describe 'create_hyperflex_service_auth_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_software_distribution_component
  # Create a &#39;hyperflex.SoftwareDistributionComponent&#39; resource.
  # @param hyperflex_software_distribution_component The &#39;hyperflex.SoftwareDistributionComponent&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexSoftwareDistributionComponent]
  describe 'create_hyperflex_software_distribution_component test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_software_distribution_entry
  # Create a &#39;hyperflex.SoftwareDistributionEntry&#39; resource.
  # @param hyperflex_software_distribution_entry The &#39;hyperflex.SoftwareDistributionEntry&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexSoftwareDistributionEntry]
  describe 'create_hyperflex_software_distribution_entry test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_software_distribution_version
  # Create a &#39;hyperflex.SoftwareDistributionVersion&#39; resource.
  # @param hyperflex_software_distribution_version The &#39;hyperflex.SoftwareDistributionVersion&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexSoftwareDistributionVersion]
  describe 'create_hyperflex_software_distribution_version test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_software_version_policy
  # Create a &#39;hyperflex.SoftwareVersionPolicy&#39; resource.
  # @param hyperflex_software_version_policy The &#39;hyperflex.SoftwareVersionPolicy&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexSoftwareVersionPolicy]
  describe 'create_hyperflex_software_version_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_sys_config_policy
  # Create a &#39;hyperflex.SysConfigPolicy&#39; resource.
  # @param hyperflex_sys_config_policy The &#39;hyperflex.SysConfigPolicy&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexSysConfigPolicy]
  describe 'create_hyperflex_sys_config_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_ucsm_config_policy
  # Create a &#39;hyperflex.UcsmConfigPolicy&#39; resource.
  # @param hyperflex_ucsm_config_policy The &#39;hyperflex.UcsmConfigPolicy&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexUcsmConfigPolicy]
  describe 'create_hyperflex_ucsm_config_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_vcenter_config_policy
  # Create a &#39;hyperflex.VcenterConfigPolicy&#39; resource.
  # @param hyperflex_vcenter_config_policy The &#39;hyperflex.VcenterConfigPolicy&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexVcenterConfigPolicy]
  describe 'create_hyperflex_vcenter_config_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_vm_import_operation
  # Create a &#39;hyperflex.VmImportOperation&#39; resource.
  # @param hyperflex_vm_import_operation The &#39;hyperflex.VmImportOperation&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexVmImportOperation]
  describe 'create_hyperflex_vm_import_operation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_hyperflex_vm_restore_operation
  # Create a &#39;hyperflex.VmRestoreOperation&#39; resource.
  # @param hyperflex_vm_restore_operation The &#39;hyperflex.VmRestoreOperation&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [HyperflexVmRestoreOperation]
  describe 'create_hyperflex_vm_restore_operation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_app_catalog
  # Delete a &#39;hyperflex.AppCatalog&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_app_catalog test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_auto_support_policy
  # Delete a &#39;hyperflex.AutoSupportPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_auto_support_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_backup_cluster
  # Delete a &#39;hyperflex.BackupCluster&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_backup_cluster test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_capability_info
  # Delete a &#39;hyperflex.CapabilityInfo&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_capability_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_cluster_backup_policy
  # Delete a &#39;hyperflex.ClusterBackupPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_cluster_backup_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_cluster_backup_policy_deployment
  # Delete a &#39;hyperflex.ClusterBackupPolicyDeployment&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_cluster_backup_policy_deployment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_cluster_backup_policy_inventory
  # Delete a &#39;hyperflex.ClusterBackupPolicyInventory&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_cluster_backup_policy_inventory test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_cluster_network_policy
  # Delete a &#39;hyperflex.ClusterNetworkPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_cluster_network_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_cluster_profile
  # Delete a &#39;hyperflex.ClusterProfile&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_cluster_profile test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_cluster_replication_network_policy
  # Delete a &#39;hyperflex.ClusterReplicationNetworkPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_cluster_replication_network_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_cluster_replication_network_policy_deployment
  # Delete a &#39;hyperflex.ClusterReplicationNetworkPolicyDeployment&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_cluster_replication_network_policy_deployment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_cluster_storage_policy
  # Delete a &#39;hyperflex.ClusterStoragePolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_cluster_storage_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_ext_fc_storage_policy
  # Delete a &#39;hyperflex.ExtFcStoragePolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_ext_fc_storage_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_ext_iscsi_storage_policy
  # Delete a &#39;hyperflex.ExtIscsiStoragePolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_ext_iscsi_storage_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_feature_limit_external
  # Delete a &#39;hyperflex.FeatureLimitExternal&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_feature_limit_external test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_feature_limit_internal
  # Delete a &#39;hyperflex.FeatureLimitInternal&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_feature_limit_internal test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_health_check_definition
  # Delete a &#39;hyperflex.HealthCheckDefinition&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_health_check_definition test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_health_check_package_checksum
  # Delete a &#39;hyperflex.HealthCheckPackageChecksum&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_health_check_package_checksum test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_hxap_cluster
  # Delete a &#39;hyperflex.HxapCluster&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_hxap_cluster test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_hxap_datacenter
  # Delete a &#39;hyperflex.HxapDatacenter&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_hxap_datacenter test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_hxap_virtual_machine_network_interface
  # Delete a &#39;hyperflex.HxapVirtualMachineNetworkInterface&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_hxap_virtual_machine_network_interface test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_hxdp_version
  # Delete a &#39;hyperflex.HxdpVersion&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_hxdp_version test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_local_credential_policy
  # Delete a &#39;hyperflex.LocalCredentialPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_local_credential_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_node_config_policy
  # Delete a &#39;hyperflex.NodeConfigPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_node_config_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_node_profile
  # Delete a &#39;hyperflex.NodeProfile&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_node_profile test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_proxy_setting_policy
  # Delete a &#39;hyperflex.ProxySettingPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_proxy_setting_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_server_firmware_version
  # Delete a &#39;hyperflex.ServerFirmwareVersion&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_server_firmware_version test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_server_firmware_version_entry
  # Delete a &#39;hyperflex.ServerFirmwareVersionEntry&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_server_firmware_version_entry test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_server_model
  # Delete a &#39;hyperflex.ServerModel&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_server_model test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_service_auth_token
  # Delete a &#39;hyperflex.ServiceAuthToken&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_service_auth_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_software_distribution_component
  # Delete a &#39;hyperflex.SoftwareDistributionComponent&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_software_distribution_component test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_software_distribution_entry
  # Delete a &#39;hyperflex.SoftwareDistributionEntry&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_software_distribution_entry test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_software_distribution_version
  # Delete a &#39;hyperflex.SoftwareDistributionVersion&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_software_distribution_version test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_software_version_policy
  # Delete a &#39;hyperflex.SoftwareVersionPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_software_version_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_sys_config_policy
  # Delete a &#39;hyperflex.SysConfigPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_sys_config_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_ucsm_config_policy
  # Delete a &#39;hyperflex.UcsmConfigPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_ucsm_config_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_vcenter_config_policy
  # Delete a &#39;hyperflex.VcenterConfigPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_vcenter_config_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_vm_backup_info
  # Delete a &#39;hyperflex.VmBackupInfo&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_vm_backup_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_vm_import_operation
  # Delete a &#39;hyperflex.VmImportOperation&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_vm_import_operation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_vm_restore_operation
  # Delete a &#39;hyperflex.VmRestoreOperation&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_vm_restore_operation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_hyperflex_vm_snapshot_info
  # Delete a &#39;hyperflex.VmSnapshotInfo&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_hyperflex_vm_snapshot_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_alarm_by_moid
  # Read a &#39;hyperflex.Alarm&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexAlarm]
  describe 'get_hyperflex_alarm_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_alarm_list
  # Read a &#39;hyperflex.Alarm&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexAlarmResponse]
  describe 'get_hyperflex_alarm_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_app_catalog_by_moid
  # Read a &#39;hyperflex.AppCatalog&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexAppCatalog]
  describe 'get_hyperflex_app_catalog_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_app_catalog_list
  # Read a &#39;hyperflex.AppCatalog&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexAppCatalogResponse]
  describe 'get_hyperflex_app_catalog_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_auto_support_policy_by_moid
  # Read a &#39;hyperflex.AutoSupportPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexAutoSupportPolicy]
  describe 'get_hyperflex_auto_support_policy_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_auto_support_policy_list
  # Read a &#39;hyperflex.AutoSupportPolicy&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexAutoSupportPolicyResponse]
  describe 'get_hyperflex_auto_support_policy_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_backup_cluster_by_moid
  # Read a &#39;hyperflex.BackupCluster&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexBackupCluster]
  describe 'get_hyperflex_backup_cluster_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_backup_cluster_list
  # Read a &#39;hyperflex.BackupCluster&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexBackupClusterResponse]
  describe 'get_hyperflex_backup_cluster_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_capability_info_by_moid
  # Read a &#39;hyperflex.CapabilityInfo&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexCapabilityInfo]
  describe 'get_hyperflex_capability_info_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_capability_info_list
  # Read a &#39;hyperflex.CapabilityInfo&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexCapabilityInfoResponse]
  describe 'get_hyperflex_capability_info_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cisco_hypervisor_manager_by_moid
  # Read a &#39;hyperflex.CiscoHypervisorManager&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexCiscoHypervisorManager]
  describe 'get_hyperflex_cisco_hypervisor_manager_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cisco_hypervisor_manager_list
  # Read a &#39;hyperflex.CiscoHypervisorManager&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexCiscoHypervisorManagerResponse]
  describe 'get_hyperflex_cisco_hypervisor_manager_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cluster_backup_policy_by_moid
  # Read a &#39;hyperflex.ClusterBackupPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexClusterBackupPolicy]
  describe 'get_hyperflex_cluster_backup_policy_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cluster_backup_policy_deployment_by_moid
  # Read a &#39;hyperflex.ClusterBackupPolicyDeployment&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexClusterBackupPolicyDeployment]
  describe 'get_hyperflex_cluster_backup_policy_deployment_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cluster_backup_policy_deployment_list
  # Read a &#39;hyperflex.ClusterBackupPolicyDeployment&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexClusterBackupPolicyDeploymentResponse]
  describe 'get_hyperflex_cluster_backup_policy_deployment_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cluster_backup_policy_inventory_by_moid
  # Read a &#39;hyperflex.ClusterBackupPolicyInventory&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexClusterBackupPolicyInventory]
  describe 'get_hyperflex_cluster_backup_policy_inventory_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cluster_backup_policy_inventory_list
  # Read a &#39;hyperflex.ClusterBackupPolicyInventory&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexClusterBackupPolicyInventoryResponse]
  describe 'get_hyperflex_cluster_backup_policy_inventory_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cluster_backup_policy_list
  # Read a &#39;hyperflex.ClusterBackupPolicy&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexClusterBackupPolicyResponse]
  describe 'get_hyperflex_cluster_backup_policy_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cluster_by_moid
  # Read a &#39;hyperflex.Cluster&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexCluster]
  describe 'get_hyperflex_cluster_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cluster_health_check_execution_snapshot_by_moid
  # Read a &#39;hyperflex.ClusterHealthCheckExecutionSnapshot&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexClusterHealthCheckExecutionSnapshot]
  describe 'get_hyperflex_cluster_health_check_execution_snapshot_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cluster_health_check_execution_snapshot_list
  # Read a &#39;hyperflex.ClusterHealthCheckExecutionSnapshot&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexClusterHealthCheckExecutionSnapshotResponse]
  describe 'get_hyperflex_cluster_health_check_execution_snapshot_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cluster_list
  # Read a &#39;hyperflex.Cluster&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexClusterResponse]
  describe 'get_hyperflex_cluster_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cluster_network_policy_by_moid
  # Read a &#39;hyperflex.ClusterNetworkPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexClusterNetworkPolicy]
  describe 'get_hyperflex_cluster_network_policy_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cluster_network_policy_list
  # Read a &#39;hyperflex.ClusterNetworkPolicy&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexClusterNetworkPolicyResponse]
  describe 'get_hyperflex_cluster_network_policy_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cluster_profile_by_moid
  # Read a &#39;hyperflex.ClusterProfile&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexClusterProfile]
  describe 'get_hyperflex_cluster_profile_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cluster_profile_list
  # Read a &#39;hyperflex.ClusterProfile&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexClusterProfileResponse]
  describe 'get_hyperflex_cluster_profile_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cluster_replication_network_policy_by_moid
  # Read a &#39;hyperflex.ClusterReplicationNetworkPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexClusterReplicationNetworkPolicy]
  describe 'get_hyperflex_cluster_replication_network_policy_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cluster_replication_network_policy_deployment_by_moid
  # Read a &#39;hyperflex.ClusterReplicationNetworkPolicyDeployment&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexClusterReplicationNetworkPolicyDeployment]
  describe 'get_hyperflex_cluster_replication_network_policy_deployment_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cluster_replication_network_policy_deployment_list
  # Read a &#39;hyperflex.ClusterReplicationNetworkPolicyDeployment&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexClusterReplicationNetworkPolicyDeploymentResponse]
  describe 'get_hyperflex_cluster_replication_network_policy_deployment_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cluster_replication_network_policy_list
  # Read a &#39;hyperflex.ClusterReplicationNetworkPolicy&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexClusterReplicationNetworkPolicyResponse]
  describe 'get_hyperflex_cluster_replication_network_policy_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cluster_storage_policy_by_moid
  # Read a &#39;hyperflex.ClusterStoragePolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexClusterStoragePolicy]
  describe 'get_hyperflex_cluster_storage_policy_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_cluster_storage_policy_list
  # Read a &#39;hyperflex.ClusterStoragePolicy&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexClusterStoragePolicyResponse]
  describe 'get_hyperflex_cluster_storage_policy_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_config_result_by_moid
  # Read a &#39;hyperflex.ConfigResult&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexConfigResult]
  describe 'get_hyperflex_config_result_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_config_result_entry_by_moid
  # Read a &#39;hyperflex.ConfigResultEntry&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexConfigResultEntry]
  describe 'get_hyperflex_config_result_entry_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_config_result_entry_list
  # Read a &#39;hyperflex.ConfigResultEntry&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexConfigResultEntryResponse]
  describe 'get_hyperflex_config_result_entry_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_config_result_list
  # Read a &#39;hyperflex.ConfigResult&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexConfigResultResponse]
  describe 'get_hyperflex_config_result_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_data_protection_peer_by_moid
  # Read a &#39;hyperflex.DataProtectionPeer&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexDataProtectionPeer]
  describe 'get_hyperflex_data_protection_peer_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_data_protection_peer_list
  # Read a &#39;hyperflex.DataProtectionPeer&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexDataProtectionPeerResponse]
  describe 'get_hyperflex_data_protection_peer_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_datastore_statistic_by_moid
  # Read a &#39;hyperflex.DatastoreStatistic&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexDatastoreStatistic]
  describe 'get_hyperflex_datastore_statistic_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_datastore_statistic_list
  # Read a &#39;hyperflex.DatastoreStatistic&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexDatastoreStatisticResponse]
  describe 'get_hyperflex_datastore_statistic_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_device_package_download_state_by_moid
  # Read a &#39;hyperflex.DevicePackageDownloadState&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexDevicePackageDownloadState]
  describe 'get_hyperflex_device_package_download_state_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_device_package_download_state_list
  # Read a &#39;hyperflex.DevicePackageDownloadState&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexDevicePackageDownloadStateResponse]
  describe 'get_hyperflex_device_package_download_state_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_drive_by_moid
  # Read a &#39;hyperflex.Drive&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexDrive]
  describe 'get_hyperflex_drive_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_drive_list
  # Read a &#39;hyperflex.Drive&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexDriveResponse]
  describe 'get_hyperflex_drive_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_ext_fc_storage_policy_by_moid
  # Read a &#39;hyperflex.ExtFcStoragePolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexExtFcStoragePolicy]
  describe 'get_hyperflex_ext_fc_storage_policy_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_ext_fc_storage_policy_list
  # Read a &#39;hyperflex.ExtFcStoragePolicy&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexExtFcStoragePolicyResponse]
  describe 'get_hyperflex_ext_fc_storage_policy_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_ext_iscsi_storage_policy_by_moid
  # Read a &#39;hyperflex.ExtIscsiStoragePolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexExtIscsiStoragePolicy]
  describe 'get_hyperflex_ext_iscsi_storage_policy_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_ext_iscsi_storage_policy_list
  # Read a &#39;hyperflex.ExtIscsiStoragePolicy&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexExtIscsiStoragePolicyResponse]
  describe 'get_hyperflex_ext_iscsi_storage_policy_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_feature_limit_external_by_moid
  # Read a &#39;hyperflex.FeatureLimitExternal&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexFeatureLimitExternal]
  describe 'get_hyperflex_feature_limit_external_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_feature_limit_external_list
  # Read a &#39;hyperflex.FeatureLimitExternal&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexFeatureLimitExternalResponse]
  describe 'get_hyperflex_feature_limit_external_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_feature_limit_internal_by_moid
  # Read a &#39;hyperflex.FeatureLimitInternal&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexFeatureLimitInternal]
  describe 'get_hyperflex_feature_limit_internal_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_feature_limit_internal_list
  # Read a &#39;hyperflex.FeatureLimitInternal&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexFeatureLimitInternalResponse]
  describe 'get_hyperflex_feature_limit_internal_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_health_by_moid
  # Read a &#39;hyperflex.Health&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexHealth]
  describe 'get_hyperflex_health_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_health_check_definition_by_moid
  # Read a &#39;hyperflex.HealthCheckDefinition&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexHealthCheckDefinition]
  describe 'get_hyperflex_health_check_definition_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_health_check_definition_list
  # Read a &#39;hyperflex.HealthCheckDefinition&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexHealthCheckDefinitionResponse]
  describe 'get_hyperflex_health_check_definition_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_health_check_execution_by_moid
  # Read a &#39;hyperflex.HealthCheckExecution&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexHealthCheckExecution]
  describe 'get_hyperflex_health_check_execution_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_health_check_execution_list
  # Read a &#39;hyperflex.HealthCheckExecution&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexHealthCheckExecutionResponse]
  describe 'get_hyperflex_health_check_execution_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_health_check_execution_snapshot_by_moid
  # Read a &#39;hyperflex.HealthCheckExecutionSnapshot&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexHealthCheckExecutionSnapshot]
  describe 'get_hyperflex_health_check_execution_snapshot_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_health_check_execution_snapshot_list
  # Read a &#39;hyperflex.HealthCheckExecutionSnapshot&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexHealthCheckExecutionSnapshotResponse]
  describe 'get_hyperflex_health_check_execution_snapshot_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_health_check_package_checksum_by_moid
  # Read a &#39;hyperflex.HealthCheckPackageChecksum&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexHealthCheckPackageChecksum]
  describe 'get_hyperflex_health_check_package_checksum_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_health_check_package_checksum_list
  # Read a &#39;hyperflex.HealthCheckPackageChecksum&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexHealthCheckPackageChecksumResponse]
  describe 'get_hyperflex_health_check_package_checksum_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_health_list
  # Read a &#39;hyperflex.Health&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexHealthResponse]
  describe 'get_hyperflex_health_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_cluster_by_moid
  # Read a &#39;hyperflex.HxapCluster&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexHxapCluster]
  describe 'get_hyperflex_hxap_cluster_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_cluster_list
  # Read a &#39;hyperflex.HxapCluster&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexHxapClusterResponse]
  describe 'get_hyperflex_hxap_cluster_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_datacenter_by_moid
  # Read a &#39;hyperflex.HxapDatacenter&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexHxapDatacenter]
  describe 'get_hyperflex_hxap_datacenter_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_datacenter_list
  # Read a &#39;hyperflex.HxapDatacenter&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexHxapDatacenterResponse]
  describe 'get_hyperflex_hxap_datacenter_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_dv_uplink_by_moid
  # Read a &#39;hyperflex.HxapDvUplink&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexHxapDvUplink]
  describe 'get_hyperflex_hxap_dv_uplink_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_dv_uplink_list
  # Read a &#39;hyperflex.HxapDvUplink&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexHxapDvUplinkResponse]
  describe 'get_hyperflex_hxap_dv_uplink_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_dvswitch_by_moid
  # Read a &#39;hyperflex.HxapDvswitch&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexHxapDvswitch]
  describe 'get_hyperflex_hxap_dvswitch_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_dvswitch_list
  # Read a &#39;hyperflex.HxapDvswitch&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexHxapDvswitchResponse]
  describe 'get_hyperflex_hxap_dvswitch_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_host_by_moid
  # Read a &#39;hyperflex.HxapHost&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexHxapHost]
  describe 'get_hyperflex_hxap_host_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_host_interface_by_moid
  # Read a &#39;hyperflex.HxapHostInterface&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexHxapHostInterface]
  describe 'get_hyperflex_hxap_host_interface_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_host_interface_list
  # Read a &#39;hyperflex.HxapHostInterface&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexHxapHostInterfaceResponse]
  describe 'get_hyperflex_hxap_host_interface_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_host_list
  # Read a &#39;hyperflex.HxapHost&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexHxapHostResponse]
  describe 'get_hyperflex_hxap_host_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_host_vswitch_by_moid
  # Read a &#39;hyperflex.HxapHostVswitch&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexHxapHostVswitch]
  describe 'get_hyperflex_hxap_host_vswitch_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_host_vswitch_list
  # Read a &#39;hyperflex.HxapHostVswitch&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexHxapHostVswitchResponse]
  describe 'get_hyperflex_hxap_host_vswitch_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_network_by_moid
  # Read a &#39;hyperflex.HxapNetwork&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexHxapNetwork]
  describe 'get_hyperflex_hxap_network_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_network_list
  # Read a &#39;hyperflex.HxapNetwork&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexHxapNetworkResponse]
  describe 'get_hyperflex_hxap_network_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_virtual_disk_by_moid
  # Read a &#39;hyperflex.HxapVirtualDisk&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexHxapVirtualDisk]
  describe 'get_hyperflex_hxap_virtual_disk_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_virtual_disk_list
  # Read a &#39;hyperflex.HxapVirtualDisk&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexHxapVirtualDiskResponse]
  describe 'get_hyperflex_hxap_virtual_disk_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_virtual_machine_by_moid
  # Read a &#39;hyperflex.HxapVirtualMachine&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexHxapVirtualMachine]
  describe 'get_hyperflex_hxap_virtual_machine_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_virtual_machine_list
  # Read a &#39;hyperflex.HxapVirtualMachine&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexHxapVirtualMachineResponse]
  describe 'get_hyperflex_hxap_virtual_machine_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_virtual_machine_network_interface_by_moid
  # Read a &#39;hyperflex.HxapVirtualMachineNetworkInterface&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexHxapVirtualMachineNetworkInterface]
  describe 'get_hyperflex_hxap_virtual_machine_network_interface_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxap_virtual_machine_network_interface_list
  # Read a &#39;hyperflex.HxapVirtualMachineNetworkInterface&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexHxapVirtualMachineNetworkInterfaceResponse]
  describe 'get_hyperflex_hxap_virtual_machine_network_interface_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxdp_version_by_moid
  # Read a &#39;hyperflex.HxdpVersion&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexHxdpVersion]
  describe 'get_hyperflex_hxdp_version_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_hxdp_version_list
  # Read a &#39;hyperflex.HxdpVersion&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexHxdpVersionResponse]
  describe 'get_hyperflex_hxdp_version_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_license_by_moid
  # Read a &#39;hyperflex.License&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexLicense]
  describe 'get_hyperflex_license_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_license_list
  # Read a &#39;hyperflex.License&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexLicenseResponse]
  describe 'get_hyperflex_license_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_local_credential_policy_by_moid
  # Read a &#39;hyperflex.LocalCredentialPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexLocalCredentialPolicy]
  describe 'get_hyperflex_local_credential_policy_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_local_credential_policy_list
  # Read a &#39;hyperflex.LocalCredentialPolicy&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexLocalCredentialPolicyResponse]
  describe 'get_hyperflex_local_credential_policy_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_node_by_moid
  # Read a &#39;hyperflex.Node&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexNode]
  describe 'get_hyperflex_node_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_node_config_policy_by_moid
  # Read a &#39;hyperflex.NodeConfigPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexNodeConfigPolicy]
  describe 'get_hyperflex_node_config_policy_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_node_config_policy_list
  # Read a &#39;hyperflex.NodeConfigPolicy&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexNodeConfigPolicyResponse]
  describe 'get_hyperflex_node_config_policy_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_node_list
  # Read a &#39;hyperflex.Node&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexNodeResponse]
  describe 'get_hyperflex_node_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_node_profile_by_moid
  # Read a &#39;hyperflex.NodeProfile&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexNodeProfile]
  describe 'get_hyperflex_node_profile_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_node_profile_list
  # Read a &#39;hyperflex.NodeProfile&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexNodeProfileResponse]
  describe 'get_hyperflex_node_profile_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_protected_cluster_by_moid
  # Read a &#39;hyperflex.ProtectedCluster&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexProtectedCluster]
  describe 'get_hyperflex_protected_cluster_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_protected_cluster_list
  # Read a &#39;hyperflex.ProtectedCluster&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexProtectedClusterResponse]
  describe 'get_hyperflex_protected_cluster_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_proxy_setting_policy_by_moid
  # Read a &#39;hyperflex.ProxySettingPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexProxySettingPolicy]
  describe 'get_hyperflex_proxy_setting_policy_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_proxy_setting_policy_list
  # Read a &#39;hyperflex.ProxySettingPolicy&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexProxySettingPolicyResponse]
  describe 'get_hyperflex_proxy_setting_policy_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_server_firmware_version_by_moid
  # Read a &#39;hyperflex.ServerFirmwareVersion&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexServerFirmwareVersion]
  describe 'get_hyperflex_server_firmware_version_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_server_firmware_version_entry_by_moid
  # Read a &#39;hyperflex.ServerFirmwareVersionEntry&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexServerFirmwareVersionEntry]
  describe 'get_hyperflex_server_firmware_version_entry_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_server_firmware_version_entry_list
  # Read a &#39;hyperflex.ServerFirmwareVersionEntry&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexServerFirmwareVersionEntryResponse]
  describe 'get_hyperflex_server_firmware_version_entry_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_server_firmware_version_list
  # Read a &#39;hyperflex.ServerFirmwareVersion&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexServerFirmwareVersionResponse]
  describe 'get_hyperflex_server_firmware_version_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_server_model_by_moid
  # Read a &#39;hyperflex.ServerModel&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexServerModel]
  describe 'get_hyperflex_server_model_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_server_model_list
  # Read a &#39;hyperflex.ServerModel&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexServerModelResponse]
  describe 'get_hyperflex_server_model_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_service_auth_token_by_moid
  # Read a &#39;hyperflex.ServiceAuthToken&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexServiceAuthToken]
  describe 'get_hyperflex_service_auth_token_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_service_auth_token_list
  # Read a &#39;hyperflex.ServiceAuthToken&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexServiceAuthTokenResponse]
  describe 'get_hyperflex_service_auth_token_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_software_distribution_component_by_moid
  # Read a &#39;hyperflex.SoftwareDistributionComponent&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexSoftwareDistributionComponent]
  describe 'get_hyperflex_software_distribution_component_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_software_distribution_component_list
  # Read a &#39;hyperflex.SoftwareDistributionComponent&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexSoftwareDistributionComponentResponse]
  describe 'get_hyperflex_software_distribution_component_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_software_distribution_entry_by_moid
  # Read a &#39;hyperflex.SoftwareDistributionEntry&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexSoftwareDistributionEntry]
  describe 'get_hyperflex_software_distribution_entry_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_software_distribution_entry_list
  # Read a &#39;hyperflex.SoftwareDistributionEntry&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexSoftwareDistributionEntryResponse]
  describe 'get_hyperflex_software_distribution_entry_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_software_distribution_version_by_moid
  # Read a &#39;hyperflex.SoftwareDistributionVersion&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexSoftwareDistributionVersion]
  describe 'get_hyperflex_software_distribution_version_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_software_distribution_version_list
  # Read a &#39;hyperflex.SoftwareDistributionVersion&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexSoftwareDistributionVersionResponse]
  describe 'get_hyperflex_software_distribution_version_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_software_version_policy_by_moid
  # Read a &#39;hyperflex.SoftwareVersionPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexSoftwareVersionPolicy]
  describe 'get_hyperflex_software_version_policy_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_software_version_policy_list
  # Read a &#39;hyperflex.SoftwareVersionPolicy&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexSoftwareVersionPolicyResponse]
  describe 'get_hyperflex_software_version_policy_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_storage_container_by_moid
  # Read a &#39;hyperflex.StorageContainer&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexStorageContainer]
  describe 'get_hyperflex_storage_container_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_storage_container_list
  # Read a &#39;hyperflex.StorageContainer&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexStorageContainerResponse]
  describe 'get_hyperflex_storage_container_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_sys_config_policy_by_moid
  # Read a &#39;hyperflex.SysConfigPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexSysConfigPolicy]
  describe 'get_hyperflex_sys_config_policy_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_sys_config_policy_list
  # Read a &#39;hyperflex.SysConfigPolicy&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexSysConfigPolicyResponse]
  describe 'get_hyperflex_sys_config_policy_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_ucsm_config_policy_by_moid
  # Read a &#39;hyperflex.UcsmConfigPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexUcsmConfigPolicy]
  describe 'get_hyperflex_ucsm_config_policy_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_ucsm_config_policy_list
  # Read a &#39;hyperflex.UcsmConfigPolicy&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexUcsmConfigPolicyResponse]
  describe 'get_hyperflex_ucsm_config_policy_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_vcenter_config_policy_by_moid
  # Read a &#39;hyperflex.VcenterConfigPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexVcenterConfigPolicy]
  describe 'get_hyperflex_vcenter_config_policy_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_vcenter_config_policy_list
  # Read a &#39;hyperflex.VcenterConfigPolicy&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexVcenterConfigPolicyResponse]
  describe 'get_hyperflex_vcenter_config_policy_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_vm_backup_info_by_moid
  # Read a &#39;hyperflex.VmBackupInfo&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexVmBackupInfo]
  describe 'get_hyperflex_vm_backup_info_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_vm_backup_info_list
  # Read a &#39;hyperflex.VmBackupInfo&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexVmBackupInfoResponse]
  describe 'get_hyperflex_vm_backup_info_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_vm_import_operation_by_moid
  # Read a &#39;hyperflex.VmImportOperation&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexVmImportOperation]
  describe 'get_hyperflex_vm_import_operation_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_vm_import_operation_list
  # Read a &#39;hyperflex.VmImportOperation&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexVmImportOperationResponse]
  describe 'get_hyperflex_vm_import_operation_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_vm_restore_operation_by_moid
  # Read a &#39;hyperflex.VmRestoreOperation&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexVmRestoreOperation]
  describe 'get_hyperflex_vm_restore_operation_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_vm_restore_operation_list
  # Read a &#39;hyperflex.VmRestoreOperation&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexVmRestoreOperationResponse]
  describe 'get_hyperflex_vm_restore_operation_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_vm_snapshot_info_by_moid
  # Read a &#39;hyperflex.VmSnapshotInfo&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexVmSnapshotInfo]
  describe 'get_hyperflex_vm_snapshot_info_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_vm_snapshot_info_list
  # Read a &#39;hyperflex.VmSnapshotInfo&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexVmSnapshotInfoResponse]
  describe 'get_hyperflex_vm_snapshot_info_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_volume_by_moid
  # Read a &#39;hyperflex.Volume&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexVolume]
  describe 'get_hyperflex_volume_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_volume_list
  # Read a &#39;hyperflex.Volume&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexVolumeResponse]
  describe 'get_hyperflex_volume_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_witness_configuration_by_moid
  # Read a &#39;hyperflex.WitnessConfiguration&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [HyperflexWitnessConfiguration]
  describe 'get_hyperflex_witness_configuration_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hyperflex_witness_configuration_list
  # Read a &#39;hyperflex.WitnessConfiguration&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [HyperflexWitnessConfigurationResponse]
  describe 'get_hyperflex_witness_configuration_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_app_catalog
  # Update a &#39;hyperflex.AppCatalog&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_app_catalog The &#39;hyperflex.AppCatalog&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexAppCatalog]
  describe 'patch_hyperflex_app_catalog test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_auto_support_policy
  # Update a &#39;hyperflex.AutoSupportPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_auto_support_policy The &#39;hyperflex.AutoSupportPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexAutoSupportPolicy]
  describe 'patch_hyperflex_auto_support_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_capability_info
  # Update a &#39;hyperflex.CapabilityInfo&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_capability_info The &#39;hyperflex.CapabilityInfo&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexCapabilityInfo]
  describe 'patch_hyperflex_capability_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_cisco_hypervisor_manager
  # Update a &#39;hyperflex.CiscoHypervisorManager&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_cisco_hypervisor_manager The &#39;hyperflex.CiscoHypervisorManager&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexCiscoHypervisorManager]
  describe 'patch_hyperflex_cisco_hypervisor_manager test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_cluster
  # Update a &#39;hyperflex.Cluster&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_cluster The &#39;hyperflex.Cluster&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexCluster]
  describe 'patch_hyperflex_cluster test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_cluster_backup_policy
  # Update a &#39;hyperflex.ClusterBackupPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_cluster_backup_policy The &#39;hyperflex.ClusterBackupPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexClusterBackupPolicy]
  describe 'patch_hyperflex_cluster_backup_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_cluster_backup_policy_deployment
  # Update a &#39;hyperflex.ClusterBackupPolicyDeployment&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_cluster_backup_policy_deployment The &#39;hyperflex.ClusterBackupPolicyDeployment&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexClusterBackupPolicyDeployment]
  describe 'patch_hyperflex_cluster_backup_policy_deployment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_cluster_network_policy
  # Update a &#39;hyperflex.ClusterNetworkPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_cluster_network_policy The &#39;hyperflex.ClusterNetworkPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexClusterNetworkPolicy]
  describe 'patch_hyperflex_cluster_network_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_cluster_profile
  # Update a &#39;hyperflex.ClusterProfile&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_cluster_profile The &#39;hyperflex.ClusterProfile&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexClusterProfile]
  describe 'patch_hyperflex_cluster_profile test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_cluster_replication_network_policy
  # Update a &#39;hyperflex.ClusterReplicationNetworkPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_cluster_replication_network_policy The &#39;hyperflex.ClusterReplicationNetworkPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexClusterReplicationNetworkPolicy]
  describe 'patch_hyperflex_cluster_replication_network_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_cluster_replication_network_policy_deployment
  # Update a &#39;hyperflex.ClusterReplicationNetworkPolicyDeployment&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_cluster_replication_network_policy_deployment The &#39;hyperflex.ClusterReplicationNetworkPolicyDeployment&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexClusterReplicationNetworkPolicyDeployment]
  describe 'patch_hyperflex_cluster_replication_network_policy_deployment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_cluster_storage_policy
  # Update a &#39;hyperflex.ClusterStoragePolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_cluster_storage_policy The &#39;hyperflex.ClusterStoragePolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexClusterStoragePolicy]
  describe 'patch_hyperflex_cluster_storage_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_ext_fc_storage_policy
  # Update a &#39;hyperflex.ExtFcStoragePolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_ext_fc_storage_policy The &#39;hyperflex.ExtFcStoragePolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexExtFcStoragePolicy]
  describe 'patch_hyperflex_ext_fc_storage_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_ext_iscsi_storage_policy
  # Update a &#39;hyperflex.ExtIscsiStoragePolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_ext_iscsi_storage_policy The &#39;hyperflex.ExtIscsiStoragePolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexExtIscsiStoragePolicy]
  describe 'patch_hyperflex_ext_iscsi_storage_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_feature_limit_external
  # Update a &#39;hyperflex.FeatureLimitExternal&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_feature_limit_external The &#39;hyperflex.FeatureLimitExternal&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexFeatureLimitExternal]
  describe 'patch_hyperflex_feature_limit_external test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_feature_limit_internal
  # Update a &#39;hyperflex.FeatureLimitInternal&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_feature_limit_internal The &#39;hyperflex.FeatureLimitInternal&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexFeatureLimitInternal]
  describe 'patch_hyperflex_feature_limit_internal test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_health_check_definition
  # Update a &#39;hyperflex.HealthCheckDefinition&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_health_check_definition The &#39;hyperflex.HealthCheckDefinition&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexHealthCheckDefinition]
  describe 'patch_hyperflex_health_check_definition test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_health_check_package_checksum
  # Update a &#39;hyperflex.HealthCheckPackageChecksum&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_health_check_package_checksum The &#39;hyperflex.HealthCheckPackageChecksum&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexHealthCheckPackageChecksum]
  describe 'patch_hyperflex_health_check_package_checksum test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_hxap_cluster
  # Update a &#39;hyperflex.HxapCluster&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_hxap_cluster The &#39;hyperflex.HxapCluster&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexHxapCluster]
  describe 'patch_hyperflex_hxap_cluster test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_hxap_datacenter
  # Update a &#39;hyperflex.HxapDatacenter&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_hxap_datacenter The &#39;hyperflex.HxapDatacenter&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexHxapDatacenter]
  describe 'patch_hyperflex_hxap_datacenter test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_hxap_host
  # Update a &#39;hyperflex.HxapHost&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_hxap_host The &#39;hyperflex.HxapHost&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexHxapHost]
  describe 'patch_hyperflex_hxap_host test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_hxap_network
  # Update a &#39;hyperflex.HxapNetwork&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_hxap_network The &#39;hyperflex.HxapNetwork&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexHxapNetwork]
  describe 'patch_hyperflex_hxap_network test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_hxap_virtual_disk
  # Update a &#39;hyperflex.HxapVirtualDisk&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_hxap_virtual_disk The &#39;hyperflex.HxapVirtualDisk&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexHxapVirtualDisk]
  describe 'patch_hyperflex_hxap_virtual_disk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_hxap_virtual_machine
  # Update a &#39;hyperflex.HxapVirtualMachine&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_hxap_virtual_machine The &#39;hyperflex.HxapVirtualMachine&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexHxapVirtualMachine]
  describe 'patch_hyperflex_hxap_virtual_machine test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_hxdp_version
  # Update a &#39;hyperflex.HxdpVersion&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_hxdp_version The &#39;hyperflex.HxdpVersion&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexHxdpVersion]
  describe 'patch_hyperflex_hxdp_version test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_local_credential_policy
  # Update a &#39;hyperflex.LocalCredentialPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_local_credential_policy The &#39;hyperflex.LocalCredentialPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexLocalCredentialPolicy]
  describe 'patch_hyperflex_local_credential_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_node_config_policy
  # Update a &#39;hyperflex.NodeConfigPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_node_config_policy The &#39;hyperflex.NodeConfigPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexNodeConfigPolicy]
  describe 'patch_hyperflex_node_config_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_node_profile
  # Update a &#39;hyperflex.NodeProfile&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_node_profile The &#39;hyperflex.NodeProfile&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexNodeProfile]
  describe 'patch_hyperflex_node_profile test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_proxy_setting_policy
  # Update a &#39;hyperflex.ProxySettingPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_proxy_setting_policy The &#39;hyperflex.ProxySettingPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexProxySettingPolicy]
  describe 'patch_hyperflex_proxy_setting_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_server_firmware_version
  # Update a &#39;hyperflex.ServerFirmwareVersion&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_server_firmware_version The &#39;hyperflex.ServerFirmwareVersion&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexServerFirmwareVersion]
  describe 'patch_hyperflex_server_firmware_version test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_server_firmware_version_entry
  # Update a &#39;hyperflex.ServerFirmwareVersionEntry&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_server_firmware_version_entry The &#39;hyperflex.ServerFirmwareVersionEntry&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexServerFirmwareVersionEntry]
  describe 'patch_hyperflex_server_firmware_version_entry test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_server_model
  # Update a &#39;hyperflex.ServerModel&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_server_model The &#39;hyperflex.ServerModel&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexServerModel]
  describe 'patch_hyperflex_server_model test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_service_auth_token
  # Update a &#39;hyperflex.ServiceAuthToken&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_service_auth_token The &#39;hyperflex.ServiceAuthToken&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexServiceAuthToken]
  describe 'patch_hyperflex_service_auth_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_software_distribution_component
  # Update a &#39;hyperflex.SoftwareDistributionComponent&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_software_distribution_component The &#39;hyperflex.SoftwareDistributionComponent&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexSoftwareDistributionComponent]
  describe 'patch_hyperflex_software_distribution_component test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_software_distribution_entry
  # Update a &#39;hyperflex.SoftwareDistributionEntry&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_software_distribution_entry The &#39;hyperflex.SoftwareDistributionEntry&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexSoftwareDistributionEntry]
  describe 'patch_hyperflex_software_distribution_entry test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_software_distribution_version
  # Update a &#39;hyperflex.SoftwareDistributionVersion&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_software_distribution_version The &#39;hyperflex.SoftwareDistributionVersion&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexSoftwareDistributionVersion]
  describe 'patch_hyperflex_software_distribution_version test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_software_version_policy
  # Update a &#39;hyperflex.SoftwareVersionPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_software_version_policy The &#39;hyperflex.SoftwareVersionPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexSoftwareVersionPolicy]
  describe 'patch_hyperflex_software_version_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_sys_config_policy
  # Update a &#39;hyperflex.SysConfigPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_sys_config_policy The &#39;hyperflex.SysConfigPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexSysConfigPolicy]
  describe 'patch_hyperflex_sys_config_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_ucsm_config_policy
  # Update a &#39;hyperflex.UcsmConfigPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_ucsm_config_policy The &#39;hyperflex.UcsmConfigPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexUcsmConfigPolicy]
  describe 'patch_hyperflex_ucsm_config_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_hyperflex_vcenter_config_policy
  # Update a &#39;hyperflex.VcenterConfigPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_vcenter_config_policy The &#39;hyperflex.VcenterConfigPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexVcenterConfigPolicy]
  describe 'patch_hyperflex_vcenter_config_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_app_catalog
  # Update a &#39;hyperflex.AppCatalog&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_app_catalog The &#39;hyperflex.AppCatalog&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexAppCatalog]
  describe 'update_hyperflex_app_catalog test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_auto_support_policy
  # Update a &#39;hyperflex.AutoSupportPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_auto_support_policy The &#39;hyperflex.AutoSupportPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexAutoSupportPolicy]
  describe 'update_hyperflex_auto_support_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_capability_info
  # Update a &#39;hyperflex.CapabilityInfo&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_capability_info The &#39;hyperflex.CapabilityInfo&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexCapabilityInfo]
  describe 'update_hyperflex_capability_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_cisco_hypervisor_manager
  # Update a &#39;hyperflex.CiscoHypervisorManager&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_cisco_hypervisor_manager The &#39;hyperflex.CiscoHypervisorManager&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexCiscoHypervisorManager]
  describe 'update_hyperflex_cisco_hypervisor_manager test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_cluster
  # Update a &#39;hyperflex.Cluster&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_cluster The &#39;hyperflex.Cluster&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexCluster]
  describe 'update_hyperflex_cluster test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_cluster_backup_policy
  # Update a &#39;hyperflex.ClusterBackupPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_cluster_backup_policy The &#39;hyperflex.ClusterBackupPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexClusterBackupPolicy]
  describe 'update_hyperflex_cluster_backup_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_cluster_backup_policy_deployment
  # Update a &#39;hyperflex.ClusterBackupPolicyDeployment&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_cluster_backup_policy_deployment The &#39;hyperflex.ClusterBackupPolicyDeployment&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexClusterBackupPolicyDeployment]
  describe 'update_hyperflex_cluster_backup_policy_deployment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_cluster_network_policy
  # Update a &#39;hyperflex.ClusterNetworkPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_cluster_network_policy The &#39;hyperflex.ClusterNetworkPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexClusterNetworkPolicy]
  describe 'update_hyperflex_cluster_network_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_cluster_profile
  # Update a &#39;hyperflex.ClusterProfile&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_cluster_profile The &#39;hyperflex.ClusterProfile&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexClusterProfile]
  describe 'update_hyperflex_cluster_profile test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_cluster_replication_network_policy
  # Update a &#39;hyperflex.ClusterReplicationNetworkPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_cluster_replication_network_policy The &#39;hyperflex.ClusterReplicationNetworkPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexClusterReplicationNetworkPolicy]
  describe 'update_hyperflex_cluster_replication_network_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_cluster_replication_network_policy_deployment
  # Update a &#39;hyperflex.ClusterReplicationNetworkPolicyDeployment&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_cluster_replication_network_policy_deployment The &#39;hyperflex.ClusterReplicationNetworkPolicyDeployment&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexClusterReplicationNetworkPolicyDeployment]
  describe 'update_hyperflex_cluster_replication_network_policy_deployment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_cluster_storage_policy
  # Update a &#39;hyperflex.ClusterStoragePolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_cluster_storage_policy The &#39;hyperflex.ClusterStoragePolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexClusterStoragePolicy]
  describe 'update_hyperflex_cluster_storage_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_ext_fc_storage_policy
  # Update a &#39;hyperflex.ExtFcStoragePolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_ext_fc_storage_policy The &#39;hyperflex.ExtFcStoragePolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexExtFcStoragePolicy]
  describe 'update_hyperflex_ext_fc_storage_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_ext_iscsi_storage_policy
  # Update a &#39;hyperflex.ExtIscsiStoragePolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_ext_iscsi_storage_policy The &#39;hyperflex.ExtIscsiStoragePolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexExtIscsiStoragePolicy]
  describe 'update_hyperflex_ext_iscsi_storage_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_feature_limit_external
  # Update a &#39;hyperflex.FeatureLimitExternal&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_feature_limit_external The &#39;hyperflex.FeatureLimitExternal&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexFeatureLimitExternal]
  describe 'update_hyperflex_feature_limit_external test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_feature_limit_internal
  # Update a &#39;hyperflex.FeatureLimitInternal&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_feature_limit_internal The &#39;hyperflex.FeatureLimitInternal&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexFeatureLimitInternal]
  describe 'update_hyperflex_feature_limit_internal test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_health_check_definition
  # Update a &#39;hyperflex.HealthCheckDefinition&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_health_check_definition The &#39;hyperflex.HealthCheckDefinition&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexHealthCheckDefinition]
  describe 'update_hyperflex_health_check_definition test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_health_check_package_checksum
  # Update a &#39;hyperflex.HealthCheckPackageChecksum&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_health_check_package_checksum The &#39;hyperflex.HealthCheckPackageChecksum&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexHealthCheckPackageChecksum]
  describe 'update_hyperflex_health_check_package_checksum test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_hxap_cluster
  # Update a &#39;hyperflex.HxapCluster&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_hxap_cluster The &#39;hyperflex.HxapCluster&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexHxapCluster]
  describe 'update_hyperflex_hxap_cluster test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_hxap_datacenter
  # Update a &#39;hyperflex.HxapDatacenter&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_hxap_datacenter The &#39;hyperflex.HxapDatacenter&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexHxapDatacenter]
  describe 'update_hyperflex_hxap_datacenter test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_hxap_host
  # Update a &#39;hyperflex.HxapHost&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_hxap_host The &#39;hyperflex.HxapHost&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexHxapHost]
  describe 'update_hyperflex_hxap_host test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_hxap_network
  # Update a &#39;hyperflex.HxapNetwork&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_hxap_network The &#39;hyperflex.HxapNetwork&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexHxapNetwork]
  describe 'update_hyperflex_hxap_network test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_hxap_virtual_disk
  # Update a &#39;hyperflex.HxapVirtualDisk&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_hxap_virtual_disk The &#39;hyperflex.HxapVirtualDisk&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexHxapVirtualDisk]
  describe 'update_hyperflex_hxap_virtual_disk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_hxap_virtual_machine
  # Update a &#39;hyperflex.HxapVirtualMachine&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_hxap_virtual_machine The &#39;hyperflex.HxapVirtualMachine&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexHxapVirtualMachine]
  describe 'update_hyperflex_hxap_virtual_machine test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_hxdp_version
  # Update a &#39;hyperflex.HxdpVersion&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_hxdp_version The &#39;hyperflex.HxdpVersion&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexHxdpVersion]
  describe 'update_hyperflex_hxdp_version test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_local_credential_policy
  # Update a &#39;hyperflex.LocalCredentialPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_local_credential_policy The &#39;hyperflex.LocalCredentialPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexLocalCredentialPolicy]
  describe 'update_hyperflex_local_credential_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_node_config_policy
  # Update a &#39;hyperflex.NodeConfigPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_node_config_policy The &#39;hyperflex.NodeConfigPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexNodeConfigPolicy]
  describe 'update_hyperflex_node_config_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_node_profile
  # Update a &#39;hyperflex.NodeProfile&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_node_profile The &#39;hyperflex.NodeProfile&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexNodeProfile]
  describe 'update_hyperflex_node_profile test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_proxy_setting_policy
  # Update a &#39;hyperflex.ProxySettingPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_proxy_setting_policy The &#39;hyperflex.ProxySettingPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexProxySettingPolicy]
  describe 'update_hyperflex_proxy_setting_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_server_firmware_version
  # Update a &#39;hyperflex.ServerFirmwareVersion&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_server_firmware_version The &#39;hyperflex.ServerFirmwareVersion&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexServerFirmwareVersion]
  describe 'update_hyperflex_server_firmware_version test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_server_firmware_version_entry
  # Update a &#39;hyperflex.ServerFirmwareVersionEntry&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_server_firmware_version_entry The &#39;hyperflex.ServerFirmwareVersionEntry&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexServerFirmwareVersionEntry]
  describe 'update_hyperflex_server_firmware_version_entry test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_server_model
  # Update a &#39;hyperflex.ServerModel&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_server_model The &#39;hyperflex.ServerModel&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexServerModel]
  describe 'update_hyperflex_server_model test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_service_auth_token
  # Update a &#39;hyperflex.ServiceAuthToken&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_service_auth_token The &#39;hyperflex.ServiceAuthToken&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexServiceAuthToken]
  describe 'update_hyperflex_service_auth_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_software_distribution_component
  # Update a &#39;hyperflex.SoftwareDistributionComponent&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_software_distribution_component The &#39;hyperflex.SoftwareDistributionComponent&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexSoftwareDistributionComponent]
  describe 'update_hyperflex_software_distribution_component test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_software_distribution_entry
  # Update a &#39;hyperflex.SoftwareDistributionEntry&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_software_distribution_entry The &#39;hyperflex.SoftwareDistributionEntry&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexSoftwareDistributionEntry]
  describe 'update_hyperflex_software_distribution_entry test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_software_distribution_version
  # Update a &#39;hyperflex.SoftwareDistributionVersion&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_software_distribution_version The &#39;hyperflex.SoftwareDistributionVersion&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexSoftwareDistributionVersion]
  describe 'update_hyperflex_software_distribution_version test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_software_version_policy
  # Update a &#39;hyperflex.SoftwareVersionPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_software_version_policy The &#39;hyperflex.SoftwareVersionPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexSoftwareVersionPolicy]
  describe 'update_hyperflex_software_version_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_sys_config_policy
  # Update a &#39;hyperflex.SysConfigPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_sys_config_policy The &#39;hyperflex.SysConfigPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexSysConfigPolicy]
  describe 'update_hyperflex_sys_config_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_ucsm_config_policy
  # Update a &#39;hyperflex.UcsmConfigPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_ucsm_config_policy The &#39;hyperflex.UcsmConfigPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexUcsmConfigPolicy]
  describe 'update_hyperflex_ucsm_config_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_hyperflex_vcenter_config_policy
  # Update a &#39;hyperflex.VcenterConfigPolicy&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param hyperflex_vcenter_config_policy The &#39;hyperflex.VcenterConfigPolicy&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [HyperflexVcenterConfigPolicy]
  describe 'update_hyperflex_vcenter_config_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end

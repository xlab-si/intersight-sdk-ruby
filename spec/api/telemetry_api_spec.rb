=begin
#Cisco Intersight

#Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-10-20T11:22:53Z.

The version of the OpenAPI document: 1.0.9-4870
Contact: intersight@cisco.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for IntersightClient::TelemetryApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'TelemetryApi' do
  before do
    # run before each test
    @api_instance = IntersightClient::TelemetryApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TelemetryApi' do
    it 'should create an instance of TelemetryApi' do
      expect(@api_instance).to be_instance_of(IntersightClient::TelemetryApi)
    end
  end

  # unit tests for query_telemetry_datasource_metadata
  # Perform a Druid DatasourceMetadata request.
  # Endpoint that exposes Druid DatasourceMetadata requests for time series data.
  # @param telemetry_druid_data_source_metadata_request The Druid request schema for time series queries.
  # @param [Hash] opts the optional parameters
  # @return [Array<TelemetryDruidDataSourceMetadataResult>]
  describe 'query_telemetry_datasource_metadata test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_telemetry_group_by
  # Perform a Druid GroupBy request.
  # Endpoint that exposes Druid GroupBy requests for time series data.
  # @param telemetry_druid_group_by_request The Druid request schema for time series queries.
  # @param [Hash] opts the optional parameters
  # @return [Array<TelemetryDruidGroupByResult>]
  describe 'query_telemetry_group_by test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_telemetry_scan
  # Perform a Druid Scan request.
  # Endpoint that exposes Druid Scan requests for time series data.
  # @param telemetry_druid_scan_request The Druid request schema for time series queries.
  # @param [Hash] opts the optional parameters
  # @return [Array<TelemetryDruidScanResult>]
  describe 'query_telemetry_scan test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_telemetry_search
  # Perform a Druid Search request.
  # Endpoint that exposes Druid Search requests for time series data.
  # @param telemetry_druid_search_request The Druid request schema for time series queries.
  # @param [Hash] opts the optional parameters
  # @return [Array<TelemetryDruidSearchResult>]
  describe 'query_telemetry_search test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_telemetry_segment_metadata
  # Perform a Druid SegmentMetadata request.
  # Endpoint that exposes Druid SegmentMetadata requests for time series data.
  # @param telemetry_druid_segment_metadata_request The Druid request schema for time series queries.
  # @param [Hash] opts the optional parameters
  # @return [Array<TelemetryDruidSegmentMetadataResult>]
  describe 'query_telemetry_segment_metadata test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_telemetry_time_boundary
  # Perform a Druid TimeBoundary request.
  # Endpoint that exposes Druid TimeBoundary requests for time series data.
  # @param telemetry_druid_time_boundary_request The Druid request schema for time series queries.
  # @param [Hash] opts the optional parameters
  # @return [Array<TelemetryDruidTimeBoundaryResult>]
  describe 'query_telemetry_time_boundary test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_telemetry_time_series
  # Perform a Druid TimeSeries request.
  # Endpoint that exposes Druid requests for time series data. This endpoint exposes specifically TimeSeries requests and broker information.
  # @param telemetry_druid_time_series_request The Druid request schema for time series queries.
  # @param [Hash] opts the optional parameters
  # @return [Array<TelemetryDruidIntervalResult>]
  describe 'query_telemetry_time_series test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for query_telemetry_top_n
  # Perform a Druid TopN request.
  # Endpoint that exposes Druid TopN requests for time series data.
  # @param telemetry_druid_top_n_request The Druid request schema for time series queries.
  # @param [Hash] opts the optional parameters
  # @return [Array<TelemetryDruidTopNResult>]
  describe 'query_telemetry_top_n test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end

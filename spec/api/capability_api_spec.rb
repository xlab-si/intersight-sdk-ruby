=begin
#Cisco Intersight

#Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-10-20T11:22:53Z.

The version of the OpenAPI document: 1.0.9-4870
Contact: intersight@cisco.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for IntersightClient::CapabilityApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CapabilityApi' do
  before do
    # run before each test
    @api_instance = IntersightClient::CapabilityApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CapabilityApi' do
    it 'should create an instance of CapabilityApi' do
      expect(@api_instance).to be_instance_of(IntersightClient::CapabilityApi)
    end
  end

  # unit tests for create_capability_adapter_unit_descriptor
  # Create a &#39;capability.AdapterUnitDescriptor&#39; resource.
  # @param capability_adapter_unit_descriptor The &#39;capability.AdapterUnitDescriptor&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilityAdapterUnitDescriptor]
  describe 'create_capability_adapter_unit_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_capability_chassis_descriptor
  # Create a &#39;capability.ChassisDescriptor&#39; resource.
  # @param capability_chassis_descriptor The &#39;capability.ChassisDescriptor&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilityChassisDescriptor]
  describe 'create_capability_chassis_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_capability_chassis_manufacturing_def
  # Create a &#39;capability.ChassisManufacturingDef&#39; resource.
  # @param capability_chassis_manufacturing_def The &#39;capability.ChassisManufacturingDef&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilityChassisManufacturingDef]
  describe 'create_capability_chassis_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_capability_cimc_firmware_descriptor
  # Create a &#39;capability.CimcFirmwareDescriptor&#39; resource.
  # @param capability_cimc_firmware_descriptor The &#39;capability.CimcFirmwareDescriptor&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilityCimcFirmwareDescriptor]
  describe 'create_capability_cimc_firmware_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_capability_equipment_physical_def
  # Create a &#39;capability.EquipmentPhysicalDef&#39; resource.
  # @param capability_equipment_physical_def The &#39;capability.EquipmentPhysicalDef&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilityEquipmentPhysicalDef]
  describe 'create_capability_equipment_physical_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_capability_equipment_slot_array
  # Create a &#39;capability.EquipmentSlotArray&#39; resource.
  # @param capability_equipment_slot_array The &#39;capability.EquipmentSlotArray&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilityEquipmentSlotArray]
  describe 'create_capability_equipment_slot_array test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_capability_fan_module_descriptor
  # Create a &#39;capability.FanModuleDescriptor&#39; resource.
  # @param capability_fan_module_descriptor The &#39;capability.FanModuleDescriptor&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilityFanModuleDescriptor]
  describe 'create_capability_fan_module_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_capability_fan_module_manufacturing_def
  # Create a &#39;capability.FanModuleManufacturingDef&#39; resource.
  # @param capability_fan_module_manufacturing_def The &#39;capability.FanModuleManufacturingDef&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilityFanModuleManufacturingDef]
  describe 'create_capability_fan_module_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_capability_io_card_capability_def
  # Create a &#39;capability.IoCardCapabilityDef&#39; resource.
  # @param capability_io_card_capability_def The &#39;capability.IoCardCapabilityDef&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilityIoCardCapabilityDef]
  describe 'create_capability_io_card_capability_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_capability_io_card_descriptor
  # Create a &#39;capability.IoCardDescriptor&#39; resource.
  # @param capability_io_card_descriptor The &#39;capability.IoCardDescriptor&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilityIoCardDescriptor]
  describe 'create_capability_io_card_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_capability_io_card_manufacturing_def
  # Create a &#39;capability.IoCardManufacturingDef&#39; resource.
  # @param capability_io_card_manufacturing_def The &#39;capability.IoCardManufacturingDef&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilityIoCardManufacturingDef]
  describe 'create_capability_io_card_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_capability_port_group_aggregation_def
  # Create a &#39;capability.PortGroupAggregationDef&#39; resource.
  # @param capability_port_group_aggregation_def The &#39;capability.PortGroupAggregationDef&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilityPortGroupAggregationDef]
  describe 'create_capability_port_group_aggregation_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_capability_psu_descriptor
  # Create a &#39;capability.PsuDescriptor&#39; resource.
  # @param capability_psu_descriptor The &#39;capability.PsuDescriptor&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilityPsuDescriptor]
  describe 'create_capability_psu_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_capability_psu_manufacturing_def
  # Create a &#39;capability.PsuManufacturingDef&#39; resource.
  # @param capability_psu_manufacturing_def The &#39;capability.PsuManufacturingDef&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilityPsuManufacturingDef]
  describe 'create_capability_psu_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_capability_server_schema_descriptor
  # Create a &#39;capability.ServerSchemaDescriptor&#39; resource.
  # @param capability_server_schema_descriptor The &#39;capability.ServerSchemaDescriptor&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilityServerSchemaDescriptor]
  describe 'create_capability_server_schema_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_capability_sioc_module_capability_def
  # Create a &#39;capability.SiocModuleCapabilityDef&#39; resource.
  # @param capability_sioc_module_capability_def The &#39;capability.SiocModuleCapabilityDef&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilitySiocModuleCapabilityDef]
  describe 'create_capability_sioc_module_capability_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_capability_sioc_module_descriptor
  # Create a &#39;capability.SiocModuleDescriptor&#39; resource.
  # @param capability_sioc_module_descriptor The &#39;capability.SiocModuleDescriptor&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilitySiocModuleDescriptor]
  describe 'create_capability_sioc_module_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_capability_sioc_module_manufacturing_def
  # Create a &#39;capability.SiocModuleManufacturingDef&#39; resource.
  # @param capability_sioc_module_manufacturing_def The &#39;capability.SiocModuleManufacturingDef&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilitySiocModuleManufacturingDef]
  describe 'create_capability_sioc_module_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_capability_switch_capability
  # Create a &#39;capability.SwitchCapability&#39; resource.
  # @param capability_switch_capability The &#39;capability.SwitchCapability&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilitySwitchCapability]
  describe 'create_capability_switch_capability test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_capability_switch_descriptor
  # Create a &#39;capability.SwitchDescriptor&#39; resource.
  # @param capability_switch_descriptor The &#39;capability.SwitchDescriptor&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilitySwitchDescriptor]
  describe 'create_capability_switch_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_capability_switch_manufacturing_def
  # Create a &#39;capability.SwitchManufacturingDef&#39; resource.
  # @param capability_switch_manufacturing_def The &#39;capability.SwitchManufacturingDef&#39; resource to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
  # @return [CapabilitySwitchManufacturingDef]
  describe 'create_capability_switch_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_adapter_unit_descriptor
  # Delete a &#39;capability.AdapterUnitDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_adapter_unit_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_chassis_descriptor
  # Delete a &#39;capability.ChassisDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_chassis_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_chassis_manufacturing_def
  # Delete a &#39;capability.ChassisManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_chassis_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_cimc_firmware_descriptor
  # Delete a &#39;capability.CimcFirmwareDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_cimc_firmware_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_equipment_physical_def
  # Delete a &#39;capability.EquipmentPhysicalDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_equipment_physical_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_equipment_slot_array
  # Delete a &#39;capability.EquipmentSlotArray&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_equipment_slot_array test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_fan_module_descriptor
  # Delete a &#39;capability.FanModuleDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_fan_module_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_fan_module_manufacturing_def
  # Delete a &#39;capability.FanModuleManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_fan_module_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_io_card_capability_def
  # Delete a &#39;capability.IoCardCapabilityDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_io_card_capability_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_io_card_descriptor
  # Delete a &#39;capability.IoCardDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_io_card_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_io_card_manufacturing_def
  # Delete a &#39;capability.IoCardManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_io_card_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_port_group_aggregation_def
  # Delete a &#39;capability.PortGroupAggregationDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_port_group_aggregation_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_psu_descriptor
  # Delete a &#39;capability.PsuDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_psu_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_psu_manufacturing_def
  # Delete a &#39;capability.PsuManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_psu_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_server_schema_descriptor
  # Delete a &#39;capability.ServerSchemaDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_server_schema_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_sioc_module_capability_def
  # Delete a &#39;capability.SiocModuleCapabilityDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_sioc_module_capability_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_sioc_module_descriptor
  # Delete a &#39;capability.SiocModuleDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_sioc_module_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_sioc_module_manufacturing_def
  # Delete a &#39;capability.SiocModuleManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_sioc_module_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_switch_capability
  # Delete a &#39;capability.SwitchCapability&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_switch_capability test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_switch_descriptor
  # Delete a &#39;capability.SwitchDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_switch_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_capability_switch_manufacturing_def
  # Delete a &#39;capability.SwitchManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_capability_switch_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_adapter_unit_descriptor_by_moid
  # Read a &#39;capability.AdapterUnitDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilityAdapterUnitDescriptor]
  describe 'get_capability_adapter_unit_descriptor_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_adapter_unit_descriptor_list
  # Read a &#39;capability.AdapterUnitDescriptor&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilityAdapterUnitDescriptorResponse]
  describe 'get_capability_adapter_unit_descriptor_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_catalog_by_moid
  # Read a &#39;capability.Catalog&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilityCatalog]
  describe 'get_capability_catalog_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_catalog_list
  # Read a &#39;capability.Catalog&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilityCatalogResponse]
  describe 'get_capability_catalog_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_chassis_descriptor_by_moid
  # Read a &#39;capability.ChassisDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilityChassisDescriptor]
  describe 'get_capability_chassis_descriptor_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_chassis_descriptor_list
  # Read a &#39;capability.ChassisDescriptor&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilityChassisDescriptorResponse]
  describe 'get_capability_chassis_descriptor_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_chassis_manufacturing_def_by_moid
  # Read a &#39;capability.ChassisManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilityChassisManufacturingDef]
  describe 'get_capability_chassis_manufacturing_def_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_chassis_manufacturing_def_list
  # Read a &#39;capability.ChassisManufacturingDef&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilityChassisManufacturingDefResponse]
  describe 'get_capability_chassis_manufacturing_def_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_cimc_firmware_descriptor_by_moid
  # Read a &#39;capability.CimcFirmwareDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilityCimcFirmwareDescriptor]
  describe 'get_capability_cimc_firmware_descriptor_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_cimc_firmware_descriptor_list
  # Read a &#39;capability.CimcFirmwareDescriptor&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilityCimcFirmwareDescriptorResponse]
  describe 'get_capability_cimc_firmware_descriptor_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_equipment_physical_def_by_moid
  # Read a &#39;capability.EquipmentPhysicalDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilityEquipmentPhysicalDef]
  describe 'get_capability_equipment_physical_def_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_equipment_physical_def_list
  # Read a &#39;capability.EquipmentPhysicalDef&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilityEquipmentPhysicalDefResponse]
  describe 'get_capability_equipment_physical_def_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_equipment_slot_array_by_moid
  # Read a &#39;capability.EquipmentSlotArray&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilityEquipmentSlotArray]
  describe 'get_capability_equipment_slot_array_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_equipment_slot_array_list
  # Read a &#39;capability.EquipmentSlotArray&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilityEquipmentSlotArrayResponse]
  describe 'get_capability_equipment_slot_array_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_fan_module_descriptor_by_moid
  # Read a &#39;capability.FanModuleDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilityFanModuleDescriptor]
  describe 'get_capability_fan_module_descriptor_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_fan_module_descriptor_list
  # Read a &#39;capability.FanModuleDescriptor&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilityFanModuleDescriptorResponse]
  describe 'get_capability_fan_module_descriptor_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_fan_module_manufacturing_def_by_moid
  # Read a &#39;capability.FanModuleManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilityFanModuleManufacturingDef]
  describe 'get_capability_fan_module_manufacturing_def_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_fan_module_manufacturing_def_list
  # Read a &#39;capability.FanModuleManufacturingDef&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilityFanModuleManufacturingDefResponse]
  describe 'get_capability_fan_module_manufacturing_def_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_io_card_capability_def_by_moid
  # Read a &#39;capability.IoCardCapabilityDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilityIoCardCapabilityDef]
  describe 'get_capability_io_card_capability_def_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_io_card_capability_def_list
  # Read a &#39;capability.IoCardCapabilityDef&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilityIoCardCapabilityDefResponse]
  describe 'get_capability_io_card_capability_def_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_io_card_descriptor_by_moid
  # Read a &#39;capability.IoCardDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilityIoCardDescriptor]
  describe 'get_capability_io_card_descriptor_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_io_card_descriptor_list
  # Read a &#39;capability.IoCardDescriptor&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilityIoCardDescriptorResponse]
  describe 'get_capability_io_card_descriptor_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_io_card_manufacturing_def_by_moid
  # Read a &#39;capability.IoCardManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilityIoCardManufacturingDef]
  describe 'get_capability_io_card_manufacturing_def_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_io_card_manufacturing_def_list
  # Read a &#39;capability.IoCardManufacturingDef&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilityIoCardManufacturingDefResponse]
  describe 'get_capability_io_card_manufacturing_def_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_port_group_aggregation_def_by_moid
  # Read a &#39;capability.PortGroupAggregationDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilityPortGroupAggregationDef]
  describe 'get_capability_port_group_aggregation_def_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_port_group_aggregation_def_list
  # Read a &#39;capability.PortGroupAggregationDef&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilityPortGroupAggregationDefResponse]
  describe 'get_capability_port_group_aggregation_def_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_psu_descriptor_by_moid
  # Read a &#39;capability.PsuDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilityPsuDescriptor]
  describe 'get_capability_psu_descriptor_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_psu_descriptor_list
  # Read a &#39;capability.PsuDescriptor&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilityPsuDescriptorResponse]
  describe 'get_capability_psu_descriptor_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_psu_manufacturing_def_by_moid
  # Read a &#39;capability.PsuManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilityPsuManufacturingDef]
  describe 'get_capability_psu_manufacturing_def_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_psu_manufacturing_def_list
  # Read a &#39;capability.PsuManufacturingDef&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilityPsuManufacturingDefResponse]
  describe 'get_capability_psu_manufacturing_def_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_server_schema_descriptor_by_moid
  # Read a &#39;capability.ServerSchemaDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilityServerSchemaDescriptor]
  describe 'get_capability_server_schema_descriptor_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_server_schema_descriptor_list
  # Read a &#39;capability.ServerSchemaDescriptor&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilityServerSchemaDescriptorResponse]
  describe 'get_capability_server_schema_descriptor_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_sioc_module_capability_def_by_moid
  # Read a &#39;capability.SiocModuleCapabilityDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilitySiocModuleCapabilityDef]
  describe 'get_capability_sioc_module_capability_def_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_sioc_module_capability_def_list
  # Read a &#39;capability.SiocModuleCapabilityDef&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilitySiocModuleCapabilityDefResponse]
  describe 'get_capability_sioc_module_capability_def_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_sioc_module_descriptor_by_moid
  # Read a &#39;capability.SiocModuleDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilitySiocModuleDescriptor]
  describe 'get_capability_sioc_module_descriptor_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_sioc_module_descriptor_list
  # Read a &#39;capability.SiocModuleDescriptor&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilitySiocModuleDescriptorResponse]
  describe 'get_capability_sioc_module_descriptor_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_sioc_module_manufacturing_def_by_moid
  # Read a &#39;capability.SiocModuleManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilitySiocModuleManufacturingDef]
  describe 'get_capability_sioc_module_manufacturing_def_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_sioc_module_manufacturing_def_list
  # Read a &#39;capability.SiocModuleManufacturingDef&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilitySiocModuleManufacturingDefResponse]
  describe 'get_capability_sioc_module_manufacturing_def_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_switch_capability_by_moid
  # Read a &#39;capability.SwitchCapability&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilitySwitchCapability]
  describe 'get_capability_switch_capability_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_switch_capability_list
  # Read a &#39;capability.SwitchCapability&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilitySwitchCapabilityResponse]
  describe 'get_capability_switch_capability_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_switch_descriptor_by_moid
  # Read a &#39;capability.SwitchDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilitySwitchDescriptor]
  describe 'get_capability_switch_descriptor_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_switch_descriptor_list
  # Read a &#39;capability.SwitchDescriptor&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilitySwitchDescriptorResponse]
  describe 'get_capability_switch_descriptor_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_switch_manufacturing_def_by_moid
  # Read a &#39;capability.SwitchManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param [Hash] opts the optional parameters
  # @return [CapabilitySwitchManufacturingDef]
  describe 'get_capability_switch_manufacturing_def_by_moid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_capability_switch_manufacturing_def_list
  # Read a &#39;capability.SwitchManufacturingDef&#39; resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
  # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
  # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
  # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
  # @option opts [String] :select Specifies a subset of properties to return.
  # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
  # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
  # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
  # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
  # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
  # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
  # @return [CapabilitySwitchManufacturingDefResponse]
  describe 'get_capability_switch_manufacturing_def_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_adapter_unit_descriptor
  # Update a &#39;capability.AdapterUnitDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_adapter_unit_descriptor The &#39;capability.AdapterUnitDescriptor&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityAdapterUnitDescriptor]
  describe 'patch_capability_adapter_unit_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_catalog
  # Update a &#39;capability.Catalog&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_catalog The &#39;capability.Catalog&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityCatalog]
  describe 'patch_capability_catalog test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_chassis_descriptor
  # Update a &#39;capability.ChassisDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_chassis_descriptor The &#39;capability.ChassisDescriptor&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityChassisDescriptor]
  describe 'patch_capability_chassis_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_chassis_manufacturing_def
  # Update a &#39;capability.ChassisManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_chassis_manufacturing_def The &#39;capability.ChassisManufacturingDef&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityChassisManufacturingDef]
  describe 'patch_capability_chassis_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_cimc_firmware_descriptor
  # Update a &#39;capability.CimcFirmwareDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_cimc_firmware_descriptor The &#39;capability.CimcFirmwareDescriptor&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityCimcFirmwareDescriptor]
  describe 'patch_capability_cimc_firmware_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_equipment_physical_def
  # Update a &#39;capability.EquipmentPhysicalDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_equipment_physical_def The &#39;capability.EquipmentPhysicalDef&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityEquipmentPhysicalDef]
  describe 'patch_capability_equipment_physical_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_equipment_slot_array
  # Update a &#39;capability.EquipmentSlotArray&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_equipment_slot_array The &#39;capability.EquipmentSlotArray&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityEquipmentSlotArray]
  describe 'patch_capability_equipment_slot_array test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_fan_module_descriptor
  # Update a &#39;capability.FanModuleDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_fan_module_descriptor The &#39;capability.FanModuleDescriptor&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityFanModuleDescriptor]
  describe 'patch_capability_fan_module_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_fan_module_manufacturing_def
  # Update a &#39;capability.FanModuleManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_fan_module_manufacturing_def The &#39;capability.FanModuleManufacturingDef&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityFanModuleManufacturingDef]
  describe 'patch_capability_fan_module_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_io_card_capability_def
  # Update a &#39;capability.IoCardCapabilityDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_io_card_capability_def The &#39;capability.IoCardCapabilityDef&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityIoCardCapabilityDef]
  describe 'patch_capability_io_card_capability_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_io_card_descriptor
  # Update a &#39;capability.IoCardDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_io_card_descriptor The &#39;capability.IoCardDescriptor&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityIoCardDescriptor]
  describe 'patch_capability_io_card_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_io_card_manufacturing_def
  # Update a &#39;capability.IoCardManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_io_card_manufacturing_def The &#39;capability.IoCardManufacturingDef&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityIoCardManufacturingDef]
  describe 'patch_capability_io_card_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_port_group_aggregation_def
  # Update a &#39;capability.PortGroupAggregationDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_port_group_aggregation_def The &#39;capability.PortGroupAggregationDef&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityPortGroupAggregationDef]
  describe 'patch_capability_port_group_aggregation_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_psu_descriptor
  # Update a &#39;capability.PsuDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_psu_descriptor The &#39;capability.PsuDescriptor&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityPsuDescriptor]
  describe 'patch_capability_psu_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_psu_manufacturing_def
  # Update a &#39;capability.PsuManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_psu_manufacturing_def The &#39;capability.PsuManufacturingDef&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityPsuManufacturingDef]
  describe 'patch_capability_psu_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_server_schema_descriptor
  # Update a &#39;capability.ServerSchemaDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_server_schema_descriptor The &#39;capability.ServerSchemaDescriptor&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityServerSchemaDescriptor]
  describe 'patch_capability_server_schema_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_sioc_module_capability_def
  # Update a &#39;capability.SiocModuleCapabilityDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_sioc_module_capability_def The &#39;capability.SiocModuleCapabilityDef&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilitySiocModuleCapabilityDef]
  describe 'patch_capability_sioc_module_capability_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_sioc_module_descriptor
  # Update a &#39;capability.SiocModuleDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_sioc_module_descriptor The &#39;capability.SiocModuleDescriptor&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilitySiocModuleDescriptor]
  describe 'patch_capability_sioc_module_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_sioc_module_manufacturing_def
  # Update a &#39;capability.SiocModuleManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_sioc_module_manufacturing_def The &#39;capability.SiocModuleManufacturingDef&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilitySiocModuleManufacturingDef]
  describe 'patch_capability_sioc_module_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_switch_capability
  # Update a &#39;capability.SwitchCapability&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_switch_capability The &#39;capability.SwitchCapability&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilitySwitchCapability]
  describe 'patch_capability_switch_capability test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_switch_descriptor
  # Update a &#39;capability.SwitchDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_switch_descriptor The &#39;capability.SwitchDescriptor&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilitySwitchDescriptor]
  describe 'patch_capability_switch_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_capability_switch_manufacturing_def
  # Update a &#39;capability.SwitchManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_switch_manufacturing_def The &#39;capability.SwitchManufacturingDef&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilitySwitchManufacturingDef]
  describe 'patch_capability_switch_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_adapter_unit_descriptor
  # Update a &#39;capability.AdapterUnitDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_adapter_unit_descriptor The &#39;capability.AdapterUnitDescriptor&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityAdapterUnitDescriptor]
  describe 'update_capability_adapter_unit_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_catalog
  # Update a &#39;capability.Catalog&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_catalog The &#39;capability.Catalog&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityCatalog]
  describe 'update_capability_catalog test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_chassis_descriptor
  # Update a &#39;capability.ChassisDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_chassis_descriptor The &#39;capability.ChassisDescriptor&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityChassisDescriptor]
  describe 'update_capability_chassis_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_chassis_manufacturing_def
  # Update a &#39;capability.ChassisManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_chassis_manufacturing_def The &#39;capability.ChassisManufacturingDef&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityChassisManufacturingDef]
  describe 'update_capability_chassis_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_cimc_firmware_descriptor
  # Update a &#39;capability.CimcFirmwareDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_cimc_firmware_descriptor The &#39;capability.CimcFirmwareDescriptor&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityCimcFirmwareDescriptor]
  describe 'update_capability_cimc_firmware_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_equipment_physical_def
  # Update a &#39;capability.EquipmentPhysicalDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_equipment_physical_def The &#39;capability.EquipmentPhysicalDef&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityEquipmentPhysicalDef]
  describe 'update_capability_equipment_physical_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_equipment_slot_array
  # Update a &#39;capability.EquipmentSlotArray&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_equipment_slot_array The &#39;capability.EquipmentSlotArray&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityEquipmentSlotArray]
  describe 'update_capability_equipment_slot_array test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_fan_module_descriptor
  # Update a &#39;capability.FanModuleDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_fan_module_descriptor The &#39;capability.FanModuleDescriptor&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityFanModuleDescriptor]
  describe 'update_capability_fan_module_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_fan_module_manufacturing_def
  # Update a &#39;capability.FanModuleManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_fan_module_manufacturing_def The &#39;capability.FanModuleManufacturingDef&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityFanModuleManufacturingDef]
  describe 'update_capability_fan_module_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_io_card_capability_def
  # Update a &#39;capability.IoCardCapabilityDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_io_card_capability_def The &#39;capability.IoCardCapabilityDef&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityIoCardCapabilityDef]
  describe 'update_capability_io_card_capability_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_io_card_descriptor
  # Update a &#39;capability.IoCardDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_io_card_descriptor The &#39;capability.IoCardDescriptor&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityIoCardDescriptor]
  describe 'update_capability_io_card_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_io_card_manufacturing_def
  # Update a &#39;capability.IoCardManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_io_card_manufacturing_def The &#39;capability.IoCardManufacturingDef&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityIoCardManufacturingDef]
  describe 'update_capability_io_card_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_port_group_aggregation_def
  # Update a &#39;capability.PortGroupAggregationDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_port_group_aggregation_def The &#39;capability.PortGroupAggregationDef&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityPortGroupAggregationDef]
  describe 'update_capability_port_group_aggregation_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_psu_descriptor
  # Update a &#39;capability.PsuDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_psu_descriptor The &#39;capability.PsuDescriptor&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityPsuDescriptor]
  describe 'update_capability_psu_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_psu_manufacturing_def
  # Update a &#39;capability.PsuManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_psu_manufacturing_def The &#39;capability.PsuManufacturingDef&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityPsuManufacturingDef]
  describe 'update_capability_psu_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_server_schema_descriptor
  # Update a &#39;capability.ServerSchemaDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_server_schema_descriptor The &#39;capability.ServerSchemaDescriptor&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilityServerSchemaDescriptor]
  describe 'update_capability_server_schema_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_sioc_module_capability_def
  # Update a &#39;capability.SiocModuleCapabilityDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_sioc_module_capability_def The &#39;capability.SiocModuleCapabilityDef&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilitySiocModuleCapabilityDef]
  describe 'update_capability_sioc_module_capability_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_sioc_module_descriptor
  # Update a &#39;capability.SiocModuleDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_sioc_module_descriptor The &#39;capability.SiocModuleDescriptor&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilitySiocModuleDescriptor]
  describe 'update_capability_sioc_module_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_sioc_module_manufacturing_def
  # Update a &#39;capability.SiocModuleManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_sioc_module_manufacturing_def The &#39;capability.SiocModuleManufacturingDef&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilitySiocModuleManufacturingDef]
  describe 'update_capability_sioc_module_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_switch_capability
  # Update a &#39;capability.SwitchCapability&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_switch_capability The &#39;capability.SwitchCapability&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilitySwitchCapability]
  describe 'update_capability_switch_capability test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_switch_descriptor
  # Update a &#39;capability.SwitchDescriptor&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_switch_descriptor The &#39;capability.SwitchDescriptor&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilitySwitchDescriptor]
  describe 'update_capability_switch_descriptor test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_capability_switch_manufacturing_def
  # Update a &#39;capability.SwitchManufacturingDef&#39; resource.
  # @param moid The unique Moid identifier of a resource instance.
  # @param capability_switch_manufacturing_def The &#39;capability.SwitchManufacturingDef&#39; resource to update.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
  # @return [CapabilitySwitchManufacturingDef]
  describe 'update_capability_switch_manufacturing_def test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end

diff --git a/lib/intersight_client/api_client.rb b/lib/intersight_client/api_client.rb
index 25233b33..81a5a659 100644
--- a/lib/intersight_client/api_client.rb
+++ b/lib/intersight_client/api_client.rb
@@ -16,6 +16,10 @@ require 'logger'
 require 'tempfile'
 require 'time'
 require 'typhoeus'
+require 'base64'
+require 'digest'
+require 'openssl'
+require 'uri'
 
 module IntersightClient
   class ApiClient
@@ -94,7 +98,7 @@ module IntersightClient
       query_params = opts[:query_params] || {}
       form_params = opts[:form_params] || {}
 
-      update_params_for_auth! header_params, query_params, opts[:auth_names]
+      # update_params_for_auth! header_params, query_params, opts[:auth_names]
 
       # set ssl_verifyhosts option based on @config.verify_ssl_host (true/false)
       _verify_ssl_host = @config.verify_ssl_host ? 2 : 0
@@ -123,11 +127,82 @@ module IntersightClient
         end
       end
 
+      # Auth
+      # Typhoeus::Request called to build URI with parameters
+      target_uri = URI(Typhoeus::Request.new(url, req_opts).url)
+      auth_headers = {
+        "Host" => target_uri.host,
+        "Date" => Time.now.httpdate,
+        "Digest" => "SHA-256=" + Base64.encode64(get_sha256_digest(req_body)).gsub(/\n/, '')
+      }
+      path = target_uri.path
+      path = path + "?" + target_uri.query unless target_uri.query.nil?
+      request_target = http_method.to_s + " " + path
+      string_to_sign = prepare_str_to_sign(request_target, auth_headers)
+      auth_digest  = get_sha256_digest(string_to_sign.encode('utf-8'))
+      b64_signed_msg = get_ecdsasig_b64encode(auth_digest)
+      header_params["Authorization"] = get_auth_header(auth_headers, b64_signed_msg)
+      req_opts[:headers].merge!(auth_headers)
+      if @config.debugging
+        @config.logger.debug "\nHTTP request headers:\n" + header_params.map{|k,v| "#{k}: #{v}"}.join("\n") + "\n"
+      end
+
       request = Typhoeus::Request.new(url, req_opts)
       download_file(request) if opts[:return_type] == 'File'
       request
     end
 
+    # Auth helper methods
+    private
+
+    # Generate SHA256 digest from data
+    def get_sha256_digest(data)
+      data = "" if data.nil?
+      digest = Digest::SHA2.new(256)
+      digest.update(data)
+      return digest.digest
+    end
+
+    # Concatenates Intersight headers in preparation to be signed
+    def prepare_str_to_sign(request_target, auth_headers)
+      str = "(request-target): " + request_target + "\n"
+      i=0
+      auth_headers.each do |key, value|
+        str = str + key.to_s.downcase + ": " + value.to_s
+        if i< (auth_headers.length-1)
+          str = str + "\n"
+        end
+        i+=1
+      end
+      return str
+    end
+
+    # Gets ECDSA signed and choped encoded base64 signature
+    def get_ecdsasig_b64encode(data)
+      signature = @config.api_key.dsa_sign_asn1(data)
+      encoded = Base64.encode64(signature)
+      # Remove new lines in the string
+      return encoded.gsub(/\n/, '')
+    end
+
+    SIGNATURE_ALGORITHM  = "hs2019"
+
+    # Assembles an Intersight formatted authorization header
+    def get_auth_header(hdrs, signed_msg)
+      auth_str = ""
+      auth_str = auth_str + "Signature"
+      auth_str = auth_str + " " + "keyId=\"" + @config.api_key_id + "\"," + "algorithm=\"" + SIGNATURE_ALGORITHM + "\"," + "headers=\"(request-target)"
+      i=0
+      hdrs.each_key do |key|
+        auth_str = auth_str + " " + key.to_s.downcase
+      end
+      auth_str = auth_str + "\""
+      auth_str = auth_str + "," + "signature=\"" + signed_msg + "\""
+      return auth_str
+    end
+
+    public
+
     # Builds the HTTP request body
     #
     # @param [Hash] header_params Header parameters
diff --git a/lib/intersight_client/configuration.rb b/lib/intersight_client/configuration.rb
index e098aa60..2b5659ea 100644
--- a/lib/intersight_client/configuration.rb
+++ b/lib/intersight_client/configuration.rb
@@ -33,21 +33,22 @@ module IntersightClient
     # Default server operation variables
     attr_accessor :server_operation_variables
 
-    # Defines API keys used with API Key authentications.
+    # Defines the API key used for authentication.
     #
-    # @return [Hash] key: parameter name, value: parameter value (API key)
-    #
-    # @example parameter name is "api_key", API key is "xxx" (e.g. "api_key=xxx" in query string)
-    #   config.api_key['api_key'] = 'xxx'
-    attr_accessor :api_key
+    # @return [OpenSSL::PKey::EC] private key
+    attr_reader :api_key
 
-    # Defines API key prefixes used with API Key authentications.
+    # Defines the API key used for authentication.
     #
-    # @return [Hash] key: parameter name, value: API key prefix
+    # @param api_key_str [String]: String value of the EC private key
+    def api_key= api_key_str
+      @api_key = OpenSSL::PKey::EC.new(api_key_str)
+    end
+
+    # Defines the ID of the API key used for authentication.
     #
-    # @example parameter name is "Authorization", API key prefix is "Token" (e.g. "Authorization: Token xxx" in headers)
-    #   config.api_key_prefix['api_key'] = 'Token'
-    attr_accessor :api_key_prefix
+    # @return [String] key ID
+    attr_accessor :api_key_id
 
     # Defines the username used with HTTP basic authentication.
     #
@@ -145,8 +146,8 @@ module IntersightClient
       @server_operation_index = {}
       @server_variables = {}
       @server_operation_variables = {}
-      @api_key = {}
-      @api_key_prefix = {}
+      @api_key = nil
+      @api_key_id = nil
       @client_side_validation = true
       @verify_ssl = true
       @verify_ssl_host = true
@@ -195,50 +196,6 @@ module IntersightClient
       server_url(index, server_operation_variables.fetch(operation, server_variables), operation_server_settings[operation])
     end
 
-    # Gets API key (with prefix if set).
-    # @param [String] param_name the parameter name of API key auth
-    def api_key_with_prefix(param_name, param_alias = nil)
-      key = @api_key[param_name]
-      key = @api_key.fetch(param_alias, key) unless param_alias.nil?
-      if @api_key_prefix[param_name]
-        "#{@api_key_prefix[param_name]} #{key}"
-      else
-        key
-      end
-    end
-
-    # Gets Basic Auth token string
-    def basic_auth_token
-      'Basic ' + ["#{username}:#{password}"].pack('m').delete("\r\n")
-    end
-
-    # Returns Auth Settings hash for api client.
-    def auth_settings
-      {
-        'cookieAuth' =>
-          {
-            type: 'api_key',
-            in: ,
-            key: 'X-Starship-Token',
-            value: api_key_with_prefix('cookieAuth')
-          },
-        'oAuth2' =>
-          {
-            type: 'oauth2',
-            in: 'header',
-            key: 'Authorization',
-            value: "Bearer #{access_token}"
-          },
-        'oAuth2' =>
-          {
-            type: 'oauth2',
-            in: 'header',
-            key: 'Authorization',
-            value: "Bearer #{access_token}"
-          },
-      }
-    end
-
     # Returns an array of Server setting
     def server_settings
       [

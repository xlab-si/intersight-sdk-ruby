=begin
#Cisco Intersight

#Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-10-20T11:22:53Z.

The version of the OpenAPI document: 1.0.9-4870
Contact: intersight@cisco.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'date'
require 'time'

module IntersightClient
  # Policy for setting BIOS tokens on the endpoint.
  class BiosPolicy < PolicyAbstractPolicy
    # The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
    attr_accessor :class_id

    # The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
    attr_accessor :object_type

    # BIOS Token for setting ACS Control GPU 1 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :acs_control_gpu1state

    # BIOS Token for setting ACS Control GPU 2 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :acs_control_gpu2state

    # BIOS Token for setting ACS Control GPU 3 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :acs_control_gpu3state

    # BIOS Token for setting ACS Control GPU 4 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :acs_control_gpu4state

    # BIOS Token for setting ACS Control GPU 5 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :acs_control_gpu5state

    # BIOS Token for setting ACS Control GPU 6 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :acs_control_gpu6state

    # BIOS Token for setting ACS Control GPU 7 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :acs_control_gpu7state

    # BIOS Token for setting ACS Control GPU 8 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :acs_control_gpu8state

    # BIOS Token for setting ACS Control Slot 11 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :acs_control_slot11state

    # BIOS Token for setting ACS Control Slot 12 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :acs_control_slot12state

    # BIOS Token for setting ACS Control Slot 13 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :acs_control_slot13state

    # BIOS Token for setting ACS Control Slot 14 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :acs_control_slot14state

    # BIOS Token for setting Adjacent Cache Line Prefetcher configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :adjacent_cache_line_prefetch

    # BIOS Token for setting Enhanced Memory Test configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring AdvancedMemTest token. * `disabled` - Value - disabled for configuring AdvancedMemTest token. * `enabled` - Value - enabled for configuring AdvancedMemTest token.
    attr_accessor :advanced_mem_test

    # BIOS Token for setting All USB Devices configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :all_usb_devices

    # BIOS Token for setting Altitude configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `300-m` - Value - 300-m for configuring Altitude token. * `900-m` - Value - 900-m for configuring Altitude token. * `1500-m` - Value - 1500-m for configuring Altitude token. * `3000-m` - Value - 3000-m for configuring Altitude token. * `auto` - Value - auto for configuring Altitude token.
    attr_accessor :altitude

    # BIOS Token for setting ASPM Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring AspmSupport token. * `Disabled` - Value - Disabled for configuring AspmSupport token. * `Force L0s` - Value - Force L0s for configuring AspmSupport token. * `L1 Only` - Value - L1 Only for configuring AspmSupport token.
    attr_accessor :aspm_support

    # BIOS Token for setting Assert NMI on PERR configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :assert_nmi_on_perr

    # BIOS Token for setting Assert NMI on SERR configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :assert_nmi_on_serr

    # BIOS Token for setting Autonomous Core C State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :auto_cc_state

    # BIOS Token for setting CPU Autonomous C State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :autonumous_cstate_enable

    # BIOS Token for setting Baud Rate configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `9600` - Value - 9600 for configuring BaudRate token. * `19200` - Value - 19200 for configuring BaudRate token. * `38400` - Value - 38400 for configuring BaudRate token. * `57600` - Value - 57600 for configuring BaudRate token. * `115200` - Value - 115200 for configuring BaudRate token.
    attr_accessor :baud_rate

    # BIOS Token for setting BME DMA Mitigation configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :bme_dma_mitigation

    # BIOS Token for setting Number of Retries configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `5` - Value - 5 for configuring BootOptionNumRetry token. * `13` - Value - 13 for configuring BootOptionNumRetry token. * `Infinite` - Value - Infinite for configuring BootOptionNumRetry token.
    attr_accessor :boot_option_num_retry

    # BIOS Token for setting Cool Down Time  (sec) configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `15` - Value - 15 for configuring BootOptionReCoolDown token. * `45` - Value - 45 for configuring BootOptionReCoolDown token. * `90` - Value - 90 for configuring BootOptionReCoolDown token.
    attr_accessor :boot_option_re_cool_down

    # BIOS Token for setting Boot Option Retry configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :boot_option_retry

    # BIOS Token for setting Boot Performance Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Max Efficient` - Value - Max Efficient for configuring BootPerformanceMode token. * `Max Performance` - Value - Max Performance for configuring BootPerformanceMode token. * `Set by Intel NM` - Value - Set by Intel NM for configuring BootPerformanceMode token.
    attr_accessor :boot_performance_mode

    # BIOS Token for setting Burst and Postponed Refresh configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :burst_and_postponed_refresh

    # BIOS Token for setting C1 Auto Demotion configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :c1auto_demotion

    # BIOS Token for setting C1 Auto UnDemotion configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :c1auto_un_demotion

    # BIOS Token for setting APBDIS configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `0` - Value - 0 for configuring CbsCmnApbdis token. * `1` - Value - 1 for configuring CbsCmnApbdis token. * `Auto` - Value - Auto for configuring CbsCmnApbdis token.
    attr_accessor :cbs_cmn_apbdis

    # BIOS Token for setting Core Performance Boost configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnCpuCpb token. * `disabled` - Value - disabled for configuring CbsCmnCpuCpb token.
    attr_accessor :cbs_cmn_cpu_cpb

    # BIOS Token for setting Downcore Control configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnCpuGenDowncoreCtrl token. * `FOUR (2 + 2)` - Value - FOUR (2 + 2) for configuring CbsCmnCpuGenDowncoreCtrl token. * `FOUR (4 + 0)` - Value - FOUR (4 + 0) for configuring CbsCmnCpuGenDowncoreCtrl token. * `SIX (3 + 3)` - Value - SIX (3 + 3) for configuring CbsCmnCpuGenDowncoreCtrl token. * `THREE (3 + 0)` - Value - THREE (3 + 0) for configuring CbsCmnCpuGenDowncoreCtrl token. * `TWO (1 + 1)` - Value - TWO (1 + 1) for configuring CbsCmnCpuGenDowncoreCtrl token. * `TWO (2 + 0)` - Value - TWO (2 + 0) for configuring CbsCmnCpuGenDowncoreCtrl token.
    attr_accessor :cbs_cmn_cpu_gen_downcore_ctrl

    # BIOS Token for setting Global C State Control configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnCpuGlobalCstateCtrl token. * `disabled` - Value - disabled for configuring CbsCmnCpuGlobalCstateCtrl token. * `enabled` - Value - enabled for configuring CbsCmnCpuGlobalCstateCtrl token.
    attr_accessor :cbs_cmn_cpu_global_cstate_ctrl

    # BIOS Token for setting L1 Stream HW Prefetcher configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnCpuL1streamHwPrefetcher token. * `disabled` - Value - disabled for configuring CbsCmnCpuL1streamHwPrefetcher token. * `enabled` - Value - enabled for configuring CbsCmnCpuL1streamHwPrefetcher token.
    attr_accessor :cbs_cmn_cpu_l1stream_hw_prefetcher

    # BIOS Token for setting L2 Stream HW Prefetcher configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnCpuL2streamHwPrefetcher token. * `disabled` - Value - disabled for configuring CbsCmnCpuL2streamHwPrefetcher token. * `enabled` - Value - enabled for configuring CbsCmnCpuL2streamHwPrefetcher token.
    attr_accessor :cbs_cmn_cpu_l2stream_hw_prefetcher

    # BIOS Token for setting CPU SMEE configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnCpuSmee token. * `disabled` - Value - disabled for configuring CbsCmnCpuSmee token. * `enabled` - Value - enabled for configuring CbsCmnCpuSmee token.
    attr_accessor :cbs_cmn_cpu_smee

    # BIOS Token for setting Streaming Stores Control configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnCpuStreamingStoresCtrl token. * `disabled` - Value - disabled for configuring CbsCmnCpuStreamingStoresCtrl token. * `enabled` - Value - enabled for configuring CbsCmnCpuStreamingStoresCtrl token.
    attr_accessor :cbs_cmn_cpu_streaming_stores_ctrl

    # BIOS Token for setting Determinism Slider configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnDeterminismSlider token. * `Performance` - Value - Performance for configuring CbsCmnDeterminismSlider token. * `Power` - Value - Power for configuring CbsCmnDeterminismSlider token.
    attr_accessor :cbs_cmn_determinism_slider

    # BIOS Token for setting Efficiency Mode Enable configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnEfficiencyModeEn token. * `Enabled` - Value - Enabled for configuring CbsCmnEfficiencyModeEn token.
    attr_accessor :cbs_cmn_efficiency_mode_en

    # BIOS Token for setting Fixed SOC P-State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnFixedSocPstate token. * `P0` - Value - P0 for configuring CbsCmnFixedSocPstate token. * `P1` - Value - P1 for configuring CbsCmnFixedSocPstate token. * `P2` - Value - P2 for configuring CbsCmnFixedSocPstate token. * `P3` - Value - P3 for configuring CbsCmnFixedSocPstate token.
    attr_accessor :cbs_cmn_fixed_soc_pstate

    # BIOS Token for setting IOMMU configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnGnbNbIommu token. * `disabled` - Value - disabled for configuring CbsCmnGnbNbIommu token. * `enabled` - Value - enabled for configuring CbsCmnGnbNbIommu token.
    attr_accessor :cbs_cmn_gnb_nb_iommu

    # BIOS Token for setting DF C-States configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnGnbSmuDfCstates token. * `disabled` - Value - disabled for configuring CbsCmnGnbSmuDfCstates token. * `enabled` - Value - enabled for configuring CbsCmnGnbSmuDfCstates token.
    attr_accessor :cbs_cmn_gnb_smu_df_cstates

    # BIOS Token for setting CPPC configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnGnbSmucppc token. * `disabled` - Value - disabled for configuring CbsCmnGnbSmucppc token. * `enabled` - Value - enabled for configuring CbsCmnGnbSmucppc token.
    attr_accessor :cbs_cmn_gnb_smucppc

    # BIOS Token for setting Bank Group Swap configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnMemCtrlBankGroupSwapDdr4 token. * `disabled` - Value - disabled for configuring CbsCmnMemCtrlBankGroupSwapDdr4 token. * `enabled` - Value - enabled for configuring CbsCmnMemCtrlBankGroupSwapDdr4 token.
    attr_accessor :cbs_cmn_mem_ctrl_bank_group_swap_ddr4

    # BIOS Token for setting Chipset Interleave configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnMemMapBankInterleaveDdr4 token. * `disabled` - Value - disabled for configuring CbsCmnMemMapBankInterleaveDdr4 token.
    attr_accessor :cbs_cmn_mem_map_bank_interleave_ddr4

    # BIOS Token for setting cTDP Control configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmncTdpCtl token. * `Manual` - Value - Manual for configuring CbsCmncTdpCtl token.
    attr_accessor :cbs_cmnc_tdp_ctl

    # BIOS Token for setting CCD Control configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `2 CCDs` - Value - 2 CCDs for configuring CbsCpuCcdCtrlSsp token. * `3 CCDs` - Value - 3 CCDs for configuring CbsCpuCcdCtrlSsp token. * `4 CCDs` - Value - 4 CCDs for configuring CbsCpuCcdCtrlSsp token. * `6 CCDs` - Value - 6 CCDs for configuring CbsCpuCcdCtrlSsp token. * `Auto` - Value - Auto for configuring CbsCpuCcdCtrlSsp token.
    attr_accessor :cbs_cpu_ccd_ctrl_ssp

    # BIOS Token for setting CPU Downcore control configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCpuCoreCtrl token. * `FIVE (5 + 0)` - Value - FIVE (5 + 0) for configuring CbsCpuCoreCtrl token. * `FOUR (4 + 0)` - Value - FOUR (4 + 0) for configuring CbsCpuCoreCtrl token. * `ONE (1 + 0)` - Value - ONE (1 + 0) for configuring CbsCpuCoreCtrl token. * `SEVEN (7 + 0)` - Value - SEVEN (7 + 0) for configuring CbsCpuCoreCtrl token. * `SIX (6 + 0)` - Value - SIX (6 + 0) for configuring CbsCpuCoreCtrl token. * `THREE (3 + 0)` - Value - THREE (3 + 0) for configuring CbsCpuCoreCtrl token. * `TWO (2 + 0)` - Value - TWO (2 + 0) for configuring CbsCpuCoreCtrl token.
    attr_accessor :cbs_cpu_core_ctrl

    # BIOS Token for setting CPU SMT Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCpuSmtCtrl token. * `disabled` - Value - disabled for configuring CbsCpuSmtCtrl token. * `enabled` - Value - enabled for configuring CbsCpuSmtCtrl token.
    attr_accessor :cbs_cpu_smt_ctrl

    # BIOS Token for setting SNP Memory Coverage configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsDbgCpuSnpMemCover token. * `Custom` - Value - Custom for configuring CbsDbgCpuSnpMemCover token. * `disabled` - Value - disabled for configuring CbsDbgCpuSnpMemCover token. * `enabled` - Value - enabled for configuring CbsDbgCpuSnpMemCover token.
    attr_accessor :cbs_dbg_cpu_snp_mem_cover

    # BIOS Token for setting SNP Memory Size to Cover in MiB configuration (0 - 1048576 MiB).
    attr_accessor :cbs_dbg_cpu_snp_mem_size_cover

    # BIOS Token for setting ACPI SRAT L3 Cache As NUMA Domain configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsDfCmnAcpiSratL3numa token. * `disabled` - Value - disabled for configuring CbsDfCmnAcpiSratL3numa token. * `enabled` - Value - enabled for configuring CbsDfCmnAcpiSratL3numa token.
    attr_accessor :cbs_df_cmn_acpi_srat_l3numa

    # BIOS Token for setting NUMA Nodes per Socket configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsDfCmnDramNps token. * `NPS0` - Value - NPS0 for configuring CbsDfCmnDramNps token. * `NPS1` - Value - NPS1 for configuring CbsDfCmnDramNps token. * `NPS2` - Value - NPS2 for configuring CbsDfCmnDramNps token. * `NPS4` - Value - NPS4 for configuring CbsDfCmnDramNps token.
    attr_accessor :cbs_df_cmn_dram_nps

    # BIOS Token for setting AMD Memory Interleaving configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsDfCmnMemIntlv token. * `Channel` - Value - Channel for configuring CbsDfCmnMemIntlv token. * `Die` - Value - Die for configuring CbsDfCmnMemIntlv token. * `None` - Value - None for configuring CbsDfCmnMemIntlv token. * `Socket` - Value - Socket for configuring CbsDfCmnMemIntlv token.
    attr_accessor :cbs_df_cmn_mem_intlv

    # BIOS Token for setting AMD Memory Interleaving Size configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `256 Bytes` - Value - 256 Bytes for configuring CbsDfCmnMemIntlvSize token. * `512 Bytes` - Value - 512 Bytes for configuring CbsDfCmnMemIntlvSize token. * `1 KB` - Value - 1 KiB for configuring CbsDfCmnMemIntlvSize token. * `2 KB` - Value - 2 KiB for configuring CbsDfCmnMemIntlvSize token. * `4 KB` - Value - 4 KiB for configuring CbsDfCmnMemIntlvSize token. * `Auto` - Value - Auto for configuring CbsDfCmnMemIntlvSize token.
    attr_accessor :cbs_df_cmn_mem_intlv_size

    # BIOS Token for setting SEV-SNP Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :cbs_sev_snp_support

    # BIOS Token for setting Consistent Device Naming configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :cdn_enable

    # BIOS Token for setting CDN Support for LOM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring CdnSupport token. * `enabled` - Value - enabled for configuring CdnSupport token. * `LOMs Only` - Value - LOMs Only for configuring CdnSupport token.
    attr_accessor :cdn_support

    # BIOS Token for setting Channel Interleaving configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `1-way` - Value - 1-way for configuring ChannelInterLeave token. * `2-way` - Value - 2-way for configuring ChannelInterLeave token. * `3-way` - Value - 3-way for configuring ChannelInterLeave token. * `4-way` - Value - 4-way for configuring ChannelInterLeave token. * `auto` - Value - auto for configuring ChannelInterLeave token.
    attr_accessor :channel_inter_leave

    # BIOS Token for setting Adaptive Memory Training configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :cisco_adaptive_mem_training

    # BIOS Token for setting BIOS Techlog Level configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Maximum` - Value - Maximum for configuring CiscoDebugLevel token. * `Minimum` - Value - Minimum for configuring CiscoDebugLevel token. * `Normal` - Value - Normal for configuring CiscoDebugLevel token.
    attr_accessor :cisco_debug_level

    # BIOS Token for setting OptionROM Launch Optimization configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :cisco_oprom_launch_optimization

    # BIOS Token for setting Cisco xGMI Max Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :cisco_xgmi_max_speed

    # BIOS Token for setting CKE Low Policy configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `auto` - Value - auto for configuring CkeLowPolicy token. * `disabled` - Value - disabled for configuring CkeLowPolicy token. * `fast` - Value - fast for configuring CkeLowPolicy token. * `slow` - Value - slow for configuring CkeLowPolicy token.
    attr_accessor :cke_low_policy

    # BIOS Token for setting Closed Loop Thermal Throttling configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :closed_loop_therm_throtl

    # BIOS Token for setting Processor CMCI configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :cmci_enable

    # BIOS Token for setting Config TDP configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :config_tdp

    # BIOS Token for setting Configurable TDP Level configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Level 1` - Value - Level 1 for configuring ConfigTdpLevel token. * `Level 2` - Value - Level 2 for configuring ConfigTdpLevel token. * `Normal` - Value - Normal for configuring ConfigTdpLevel token.
    attr_accessor :config_tdp_level

    # BIOS Token for setting Console Redirection configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `com-0` - Value - com-0 for configuring ConsoleRedirection token. * `com-1` - Value - com-1 for configuring ConsoleRedirection token. * `disabled` - Value - disabled for configuring ConsoleRedirection token. * `enabled` - Value - enabled for configuring ConsoleRedirection token. * `serial-port-a` - Value - serial-port-a for configuring ConsoleRedirection token.
    attr_accessor :console_redirection

    # BIOS Token for setting Core Multi Processing configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `1` - Value - 1 for configuring CoreMultiProcessing token. * `2` - Value - 2 for configuring CoreMultiProcessing token. * `3` - Value - 3 for configuring CoreMultiProcessing token. * `4` - Value - 4 for configuring CoreMultiProcessing token. * `5` - Value - 5 for configuring CoreMultiProcessing token. * `6` - Value - 6 for configuring CoreMultiProcessing token. * `7` - Value - 7 for configuring CoreMultiProcessing token. * `8` - Value - 8 for configuring CoreMultiProcessing token. * `9` - Value - 9 for configuring CoreMultiProcessing token. * `10` - Value - 10 for configuring CoreMultiProcessing token. * `11` - Value - 11 for configuring CoreMultiProcessing token. * `12` - Value - 12 for configuring CoreMultiProcessing token. * `13` - Value - 13 for configuring CoreMultiProcessing token. * `14` - Value - 14 for configuring CoreMultiProcessing token. * `15` - Value - 15 for configuring CoreMultiProcessing token. * `16` - Value - 16 for configuring CoreMultiProcessing token. * `17` - Value - 17 for configuring CoreMultiProcessing token. * `18` - Value - 18 for configuring CoreMultiProcessing token. * `19` - Value - 19 for configuring CoreMultiProcessing token. * `20` - Value - 20 for configuring CoreMultiProcessing token. * `21` - Value - 21 for configuring CoreMultiProcessing token. * `22` - Value - 22 for configuring CoreMultiProcessing token. * `23` - Value - 23 for configuring CoreMultiProcessing token. * `24` - Value - 24 for configuring CoreMultiProcessing token. * `25` - Value - 25 for configuring CoreMultiProcessing token. * `26` - Value - 26 for configuring CoreMultiProcessing token. * `27` - Value - 27 for configuring CoreMultiProcessing token. * `28` - Value - 28 for configuring CoreMultiProcessing token. * `29` - Value - 29 for configuring CoreMultiProcessing token. * `30` - Value - 30 for configuring CoreMultiProcessing token. * `31` - Value - 31 for configuring CoreMultiProcessing token. * `32` - Value - 32 for configuring CoreMultiProcessing token. * `33` - Value - 33 for configuring CoreMultiProcessing token. * `34` - Value - 34 for configuring CoreMultiProcessing token. * `35` - Value - 35 for configuring CoreMultiProcessing token. * `36` - Value - 36 for configuring CoreMultiProcessing token. * `37` - Value - 37 for configuring CoreMultiProcessing token. * `38` - Value - 38 for configuring CoreMultiProcessing token. * `39` - Value - 39 for configuring CoreMultiProcessing token. * `40` - Value - 40 for configuring CoreMultiProcessing token. * `41` - Value - 41 for configuring CoreMultiProcessing token. * `42` - Value - 42 for configuring CoreMultiProcessing token. * `43` - Value - 43 for configuring CoreMultiProcessing token. * `44` - Value - 44 for configuring CoreMultiProcessing token. * `45` - Value - 45 for configuring CoreMultiProcessing token. * `46` - Value - 46 for configuring CoreMultiProcessing token. * `47` - Value - 47 for configuring CoreMultiProcessing token. * `48` - Value - 48 for configuring CoreMultiProcessing token. * `all` - Value - all for configuring CoreMultiProcessing token.
    attr_accessor :core_multi_processing

    # BIOS Token for setting Energy Performance configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `balanced-energy` - Value - balanced-energy for configuring CpuEnergyPerformance token. * `balanced-performance` - Value - balanced-performance for configuring CpuEnergyPerformance token. * `balanced-power` - Value - balanced-power for configuring CpuEnergyPerformance token. * `energy-efficient` - Value - energy-efficient for configuring CpuEnergyPerformance token. * `performance` - Value - performance for configuring CpuEnergyPerformance token. * `power` - Value - power for configuring CpuEnergyPerformance token.
    attr_accessor :cpu_energy_performance

    # BIOS Token for setting Frequency Floor Override configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :cpu_frequency_floor

    # BIOS Token for setting Enhanced CPU Performance configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CpuPerfEnhancement token. * `Disabled` - Value - Disabled for configuring CpuPerfEnhancement token.
    attr_accessor :cpu_perf_enhancement

    # BIOS Token for setting CPU Performance configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `custom` - Value - custom for configuring CpuPerformance token. * `enterprise` - Value - enterprise for configuring CpuPerformance token. * `high-throughput` - Value - high-throughput for configuring CpuPerformance token. * `hpc` - Value - hpc for configuring CpuPerformance token.
    attr_accessor :cpu_performance

    # BIOS Token for setting Power Technology configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `custom` - Value - custom for configuring CpuPowerManagement token. * `disabled` - Value - disabled for configuring CpuPowerManagement token. * `energy-efficient` - Value - energy-efficient for configuring CpuPowerManagement token. * `performance` - Value - performance for configuring CpuPowerManagement token.
    attr_accessor :cpu_power_management

    # BIOS Token for setting CR QoS configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Disabled` - Value - Disabled for configuring CrQos token. * `Mode 0 - Disable the PMem QoS Feature` - Value - Mode 0 - Disable the PMem QoS Feature for configuring CrQos token. * `Mode 1 - M2M QoS Enable and CHA QoS Disable` - Value - Mode 1 - M2M QoS Enable and CHA QoS Disable for configuring CrQos token. * `Mode 2 - M2M QoS Enable and CHA QoS Enable` - Value - Mode 2 - M2M QoS Enable and CHA QoS Enable for configuring CrQos token. * `Recipe 1` - Value - Recipe 1 for configuring CrQos token. * `Recipe 2` - Value - Recipe 2 for configuring CrQos token. * `Recipe 3` - Value - Recipe 3 for configuring CrQos token.
    attr_accessor :cr_qos

    # BIOS Token for setting CR FastGo Config configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CrfastgoConfig token. * `Default` - Value - Default for configuring CrfastgoConfig token. * `Disable optimization` - Value - Disable optimization for configuring CrfastgoConfig token. * `Enable optimization` - Value - Enable optimization for configuring CrfastgoConfig token. * `Option 1` - Value - Option 1 for configuring CrfastgoConfig token. * `Option 2` - Value - Option 2 for configuring CrfastgoConfig token. * `Option 3` - Value - Option 3 for configuring CrfastgoConfig token. * `Option 4` - Value - Option 4 for configuring CrfastgoConfig token. * `Option 5` - Value - Option 5 for configuring CrfastgoConfig token.
    attr_accessor :crfastgo_config

    # BIOS Token for setting DCPMM Firmware Downgrade configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :dcpmm_firmware_downgrade

    # BIOS Token for setting Demand Scrub configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :demand_scrub

    # BIOS Token for setting Direct Cache Access Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `auto` - Value - auto for configuring DirectCacheAccess token. * `disabled` - Value - disabled for configuring DirectCacheAccess token. * `enabled` - Value - enabled for configuring DirectCacheAccess token.
    attr_accessor :direct_cache_access

    # BIOS Token for setting DRAM Clock Throttling configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring DramClockThrottling token. * `Balanced` - Value - Balanced for configuring DramClockThrottling token. * `Energy Efficient` - Value - Energy Efficient for configuring DramClockThrottling token. * `Performance` - Value - Performance for configuring DramClockThrottling token.
    attr_accessor :dram_clock_throttling

    # BIOS Token for setting DRAM Refresh Rate configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `1x` - Value - 1x for configuring DramRefreshRate token. * `2x` - Value - 2x for configuring DramRefreshRate token. * `3x` - Value - 3x for configuring DramRefreshRate token. * `4x` - Value - 4x for configuring DramRefreshRate token. * `Auto` - Value - Auto for configuring DramRefreshRate token.
    attr_accessor :dram_refresh_rate

    # BIOS Token for setting DRAM SW Thermal Throttling configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :dram_sw_thermal_throttling

    # BIOS Token for setting eADR Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring EadrSupport token. * `disabled` - Value - disabled for configuring EadrSupport token. * `enabled` - Value - enabled for configuring EadrSupport token.
    attr_accessor :eadr_support

    # BIOS Token for setting IIO eDPC Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Disabled` - Value - Disabled for configuring EdpcEn token. * `On Fatal Error` - Value - On Fatal Error for configuring EdpcEn token. * `On Fatal and Non-Fatal Errors` - Value - On Fatal and Non-Fatal Errors for configuring EdpcEn token.
    attr_accessor :edpc_en

    # BIOS Token for setting External SSC Enable configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :enable_clock_spread_spec

    # BIOS Token for setting Multikey Total Memory Encryption  (MK-TME) configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :enable_mktme

    # BIOS Token for setting Software Guard Extensions  (SGX) configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :enable_sgx

    # BIOS Token for setting Total Memory Encryption  (TME) configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :enable_tme

    # BIOS Token for setting Energy Efficient Turbo configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :energy_efficient_turbo

    # BIOS Token for setting Energy Performance Tuning configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `BIOS` - Value - BIOS for configuring EngPerfTuning token. * `OS` - Value - OS for configuring EngPerfTuning token.
    attr_accessor :eng_perf_tuning

    # BIOS Token for setting Enhanced Intel Speedstep (R) Technology configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :enhanced_intel_speed_step_tech

    # BIOS Token for setting Select Owner EPOCH Input Type configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Change to New Random Owner EPOCHs` - Value - Change to New Random Owner EPOCHs for configuring EpochUpdate token. * `Manual User Defined Owner EPOCHs` - Value - Manual User Defined Owner EPOCHs for configuring EpochUpdate token. * `SGX Owner EPOCH activated` - Value - SGX Owner EPOCH activated for configuring EpochUpdate token.
    attr_accessor :epoch_update

    # BIOS Token for setting Processor EPP Enable configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :epp_enable

    # BIOS Token for setting EPP Profile configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Balanced Performance` - Value - Balanced Performance for configuring EppProfile token. * `Balanced Power` - Value - Balanced Power for configuring EppProfile token. * `Performance` - Value - Performance for configuring EppProfile token. * `Power` - Value - Power for configuring EppProfile token.
    attr_accessor :epp_profile

    # BIOS Token for setting Execute Disable Bit configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :execute_disable_bit

    # BIOS Token for setting Local X2 Apic configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring ExtendedApic token. * `enabled` - Value - enabled for configuring ExtendedApic token. * `X2APIC` - Value - X2APIC for configuring ExtendedApic token. * `XAPIC` - Value - XAPIC for configuring ExtendedApic token.
    attr_accessor :extended_apic

    # BIOS Token for setting Flow Control configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `none` - Value - none for configuring FlowControl token. * `rts-cts` - Value - rts-cts for configuring FlowControl token.
    attr_accessor :flow_control

    # BIOS Token for setting FRB-2 Timer configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :frb2enable

    # BIOS Token for setting Hardware Prefetcher configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :hardware_prefetch

    # BIOS Token for setting CPU Hardware Power Management configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Disabled` - Value - Disabled for configuring HwpmEnable token. * `HWPM Native Mode` - Value - HWPM Native Mode for configuring HwpmEnable token. * `HWPM OOB Mode` - Value - HWPM OOB Mode for configuring HwpmEnable token. * `NATIVE MODE` - Value - NATIVE MODE for configuring HwpmEnable token. * `Native Mode with no Legacy` - Value - Native Mode with no Legacy for configuring HwpmEnable token. * `OOB MODE` - Value - OOB MODE for configuring HwpmEnable token.
    attr_accessor :hwpm_enable

    # BIOS Token for setting IMC Interleaving configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `1-way Interleave` - Value - 1-way Interleave for configuring ImcInterleave token. * `2-way Interleave` - Value - 2-way Interleave for configuring ImcInterleave token. * `Auto` - Value - Auto for configuring ImcInterleave token.
    attr_accessor :imc_interleave

    # BIOS Token for setting Intel Dynamic Speed Select configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :intel_dynamic_speed_select

    # BIOS Token for setting Intel HyperThreading Tech configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :intel_hyper_threading_tech

    # BIOS Token for setting Intel Speed Select configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Base` - Value - Base for configuring IntelSpeedSelect token. * `Config 1` - Value - Config 1 for configuring IntelSpeedSelect token. * `Config 2` - Value - Config 2 for configuring IntelSpeedSelect token. * `Config 3` - Value - Config 3 for configuring IntelSpeedSelect token. * `Config 4` - Value - Config 4 for configuring IntelSpeedSelect token.
    attr_accessor :intel_speed_select

    # BIOS Token for setting Intel Turbo Boost Tech configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :intel_turbo_boost_tech

    # BIOS Token for setting Intel (R) VT configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :intel_virtualization_technology

    # BIOS Token for setting Intel VT for Directed IO configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :intel_vt_for_directed_io

    # BIOS Token for setting Intel (R) VT-d Coherency Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :intel_vtd_coherency_support

    # BIOS Token for setting Intel (R) VT-d Interrupt Remapping configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :intel_vtd_interrupt_remapping

    # BIOS Token for setting Intel (R) VT-d PassThrough DMA Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :intel_vtd_pass_through_dma_support

    # BIOS Token for setting Intel VTD ATS Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :intel_vtdats_support

    # BIOS Token for setting IIO Error Enable configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `No` - Value - No for configuring IohErrorEnable token. * `Yes` - Value - Yes for configuring IohErrorEnable token.
    attr_accessor :ioh_error_enable

    # BIOS Token for setting IOH Resource Allocation configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `IOH0 24k IOH1 40k` - Value - IOH0 24k IOH1 40k for configuring IohResource token. * `IOH0 32k IOH1 32k` - Value - IOH0 32k IOH1 32k for configuring IohResource token. * `IOH0 40k IOH1 24k` - Value - IOH0 40k IOH1 24k for configuring IohResource token. * `IOH0 48k IOH1 16k` - Value - IOH0 48k IOH1 16k for configuring IohResource token. * `IOH0 56k IOH1 8k` - Value - IOH0 56k IOH1 8k for configuring IohResource token.
    attr_accessor :ioh_resource

    # BIOS Token for setting DCU IP Prefetcher configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :ip_prefetch

    # BIOS Token for setting IPV4 HTTP Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :ipv4http

    # BIOS Token for setting IPv4 PXE Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :ipv4pxe

    # BIOS Token for setting IPV6 HTTP Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :ipv6http

    # BIOS Token for setting IPV6 PXE Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :ipv6pxe

    # BIOS Token for setting KTI Prefetch configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring KtiPrefetch token. * `disabled` - Value - disabled for configuring KtiPrefetch token. * `enabled` - Value - enabled for configuring KtiPrefetch token.
    attr_accessor :kti_prefetch

    # BIOS Token for setting Legacy OS Redirection configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :legacy_os_redirection

    # BIOS Token for setting Legacy USB Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `auto` - Value - auto for configuring LegacyUsbSupport token. * `disabled` - Value - disabled for configuring LegacyUsbSupport token. * `enabled` - Value - enabled for configuring LegacyUsbSupport token.
    attr_accessor :legacy_usb_support

    # BIOS Token for setting LLC Dead Line configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring LlcAlloc token. * `disabled` - Value - disabled for configuring LlcAlloc token. * `enabled` - Value - enabled for configuring LlcAlloc token.
    attr_accessor :llc_alloc

    # BIOS Token for setting LLC Prefetch configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :llc_prefetch

    # BIOS Token for setting LOM Port 0 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring LomPort0state token. * `enabled` - Value - enabled for configuring LomPort0state token. * `Legacy Only` - Value - Legacy Only for configuring LomPort0state token. * `UEFI Only` - Value - UEFI Only for configuring LomPort0state token.
    attr_accessor :lom_port0state

    # BIOS Token for setting LOM Port 1 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring LomPort1state token. * `enabled` - Value - enabled for configuring LomPort1state token. * `Legacy Only` - Value - Legacy Only for configuring LomPort1state token. * `UEFI Only` - Value - UEFI Only for configuring LomPort1state token.
    attr_accessor :lom_port1state

    # BIOS Token for setting LOM Port 2 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring LomPort2state token. * `enabled` - Value - enabled for configuring LomPort2state token. * `Legacy Only` - Value - Legacy Only for configuring LomPort2state token. * `UEFI Only` - Value - UEFI Only for configuring LomPort2state token.
    attr_accessor :lom_port2state

    # BIOS Token for setting LOM Port 3 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring LomPort3state token. * `enabled` - Value - enabled for configuring LomPort3state token. * `Legacy Only` - Value - Legacy Only for configuring LomPort3state token. * `UEFI Only` - Value - UEFI Only for configuring LomPort3state token.
    attr_accessor :lom_port3state

    # BIOS Token for setting All Onboard LOM Ports configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :lom_ports_all_state

    # BIOS Token for setting Low Voltage DDR Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `auto` - Value - auto for configuring LvDdrMode token. * `performance-mode` - Value - performance-mode for configuring LvDdrMode token. * `power-saving-mode` - Value - power-saving-mode for configuring LvDdrMode token.
    attr_accessor :lv_ddr_mode

    # BIOS Token for setting Make Device Non Bootable configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :make_device_non_bootable

    # BIOS Token for setting Memory Bandwidth Boost configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :memory_bandwidth_boost

    # BIOS Token for setting Intel Memory Interleaving configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `1 Way Node Interleave` - Value - 1 Way Node Interleave for configuring MemoryInterLeave token. * `2 Way Node Interleave` - Value - 2 Way Node Interleave for configuring MemoryInterLeave token. * `4 Way Node Interleave` - Value - 4 Way Node Interleave for configuring MemoryInterLeave token. * `8 Way Node Interleave` - Value - 8 Way Node Interleave for configuring MemoryInterLeave token. * `disabled` - Value - disabled for configuring MemoryInterLeave token. * `enabled` - Value - enabled for configuring MemoryInterLeave token.
    attr_accessor :memory_inter_leave

    # BIOS Token for setting Memory Mapped IO above 4GiB configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :memory_mapped_io_above4gb

    # BIOS Token for setting Memory Refresh Rate configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `1x Refresh` - Value - 1x Refresh for configuring MemoryRefreshRate token. * `2x Refresh` - Value - 2x Refresh for configuring MemoryRefreshRate token.
    attr_accessor :memory_refresh_rate

    # BIOS Token for setting Memory Size Limit in GiB configuration (0 - 65535 GiB).
    attr_accessor :memory_size_limit

    # BIOS Token for setting Memory Thermal Throttling Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `CLTT with PECI` - Value - CLTT with PECI for configuring MemoryThermalThrottling token. * `Disabled` - Value - Disabled for configuring MemoryThermalThrottling token.
    attr_accessor :memory_thermal_throttling

    # BIOS Token for setting Mirroring Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `inter-socket` - Value - inter-socket for configuring MirroringMode token. * `intra-socket` - Value - intra-socket for configuring MirroringMode token.
    attr_accessor :mirroring_mode

    # BIOS Token for setting MMCFG BASE configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `1 GB` - Value - 1 GiB for configuring MmcfgBase token. * `2 GB` - Value - 2 GiB for configuring MmcfgBase token. * `2.5 GB` - Value - 2.5 GiB for configuring MmcfgBase token. * `3 GB` - Value - 3 GiB for configuring MmcfgBase token. * `Auto` - Value - Auto for configuring MmcfgBase token.
    attr_accessor :mmcfg_base

    # BIOS Token for setting Network Stack configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :network_stack

    # BIOS Token for setting NUMA Optimized configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :numa_optimized

    # BIOS Token for setting NVM Performance Setting configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `BW Optimized` - Value - BW Optimized for configuring NvmdimmPerformConfig token. * `Balanced Profile` - Value - Balanced Profile for configuring NvmdimmPerformConfig token. * `Latency Optimized` - Value - Latency Optimized for configuring NvmdimmPerformConfig token.
    attr_accessor :nvmdimm_perform_config

    # BIOS Token for setting Onboard 10Gbit LOM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :onboard10gbit_lom

    # BIOS Token for setting Onboard Gbit LOM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :onboard_gbit_lom

    # BIOS Token for setting Onboard SCU Storage Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :onboard_scu_storage_support

    # BIOS Token for setting Onboard SCU Storage SW Stack configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Intel RSTe` - Value - Intel RSTe for configuring OnboardScuStorageSwStack token. * `LSI SW RAID` - Value - LSI SW RAID for configuring OnboardScuStorageSwStack token.
    attr_accessor :onboard_scu_storage_sw_stack

    # BIOS Token for setting Operation Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Test Only` - Value - Test Only for configuring OperationMode token. * `Test and Repair` - Value - Test and Repair for configuring OperationMode token.
    attr_accessor :operation_mode

    # BIOS Token for setting OS Boot Watchdog Timer configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :os_boot_watchdog_timer

    # BIOS Token for setting OS Boot Watchdog Timer Policy configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `do-nothing` - Value - do-nothing for configuring OsBootWatchdogTimerPolicy token. * `power-off` - Value - power-off for configuring OsBootWatchdogTimerPolicy token. * `reset` - Value - reset for configuring OsBootWatchdogTimerPolicy token.
    attr_accessor :os_boot_watchdog_timer_policy

    # BIOS Token for setting OS Boot Watchdog Timer Timeout configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `5-minutes` - Value - 5-minutes for configuring OsBootWatchdogTimerTimeout token. * `10-minutes` - Value - 10-minutes for configuring OsBootWatchdogTimerTimeout token. * `15-minutes` - Value - 15-minutes for configuring OsBootWatchdogTimerTimeout token. * `20-minutes` - Value - 20-minutes for configuring OsBootWatchdogTimerTimeout token.
    attr_accessor :os_boot_watchdog_timer_timeout

    # BIOS Token for setting Out-of-Band Mgmt Port configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :out_of_band_mgmt_port

    # BIOS Token for setting Package C State Limit configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PackageCstateLimit token. * `C0 C1 State` - Value - C0 C1 State for configuring PackageCstateLimit token. * `C0/C1` - Value - C0/C1 for configuring PackageCstateLimit token. * `C2` - Value - C2 for configuring PackageCstateLimit token. * `C6 Non Retention` - Value - C6 Non Retention for configuring PackageCstateLimit token. * `C6 Retention` - Value - C6 Retention for configuring PackageCstateLimit token. * `No Limit` - Value - No Limit for configuring PackageCstateLimit token.
    attr_accessor :package_cstate_limit

    # BIOS Token for setting Panic and High Watermark configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `High` - Value - High for configuring PanicHighWatermark token. * `Low` - Value - Low for configuring PanicHighWatermark token.
    attr_accessor :panic_high_watermark

    # BIOS Token for setting Partial Cache Line Sparing configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :partial_cache_line_sparing

    # BIOS Token for setting Partial Memory Mirror Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring PartialMirrorModeConfig token. * `Percentage` - Value - Percentage for configuring PartialMirrorModeConfig token. * `Value in GB` - Value - Value in GiB for configuring PartialMirrorModeConfig token.
    attr_accessor :partial_mirror_mode_config

    # BIOS Token for setting Partial Mirror Percentage configuration (0.00 - 50.00 Percentage).
    attr_accessor :partial_mirror_percent

    # BIOS Token for setting Partial Mirror1 Size in GiB configuration (0 - 65535 GiB).
    attr_accessor :partial_mirror_value1

    # BIOS Token for setting Partial Mirror2 Size in GiB configuration (0 - 65535 GiB).
    attr_accessor :partial_mirror_value2

    # BIOS Token for setting Partial Mirror3 Size in GiB configuration (0 - 65535 GiB).
    attr_accessor :partial_mirror_value3

    # BIOS Token for setting Partial Mirror4 Size in GiB configuration (0 - 65535 GiB).
    attr_accessor :partial_mirror_value4

    # BIOS Token for setting Patrol Scrub configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring PatrolScrub token. * `Enable at End of POST` - Value - Enable at End of POST for configuring PatrolScrub token. * `enabled` - Value - enabled for configuring PatrolScrub token.
    attr_accessor :patrol_scrub

    # BIOS Token for setting Patrol Scrub Interval configuration (5 - 23 Hour).
    attr_accessor :patrol_scrub_duration

    # BIOS Token for setting PCIe RAS Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :pc_ie_ras_support

    # BIOS Token for setting NVMe SSD Hot-Plug Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :pc_ie_ssd_hot_plug_support

    # BIOS Token for setting xHCI Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :pch_usb30mode

    # BIOS Token for setting All PCIe Slots OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring PciOptionRoMs token. * `enabled` - Value - enabled for configuring PciOptionRoMs token. * `Legacy Only` - Value - Legacy Only for configuring PciOptionRoMs token. * `UEFI Only` - Value - UEFI Only for configuring PciOptionRoMs token.
    attr_accessor :pci_option_ro_ms

    # BIOS Token for setting PCI ROM CLP configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :pci_rom_clp

    # BIOS Token for setting PCIe ARI Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PcieAriSupport token. * `disabled` - Value - disabled for configuring PcieAriSupport token. * `enabled` - Value - enabled for configuring PcieAriSupport token.
    attr_accessor :pcie_ari_support

    # BIOS Token for setting PCIe PLL SSC configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PciePllSsc token. * `Disabled` - Value - Disabled for configuring PciePllSsc token. * `ZeroPointFive` - Value - ZeroPointFive for configuring PciePllSsc token.
    attr_accessor :pcie_pll_ssc

    # BIOS Token for setting MRAID1 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PcieSlotMraid1linkSpeed token. * `Disabled` - Value - Disabled for configuring PcieSlotMraid1linkSpeed token. * `GEN1` - Value - GEN1 for configuring PcieSlotMraid1linkSpeed token. * `GEN2` - Value - GEN2 for configuring PcieSlotMraid1linkSpeed token. * `GEN3` - Value - GEN3 for configuring PcieSlotMraid1linkSpeed token. * `GEN4` - Value - GEN4 for configuring PcieSlotMraid1linkSpeed token.
    attr_accessor :pcie_slot_mraid1link_speed

    # BIOS Token for setting MRAID1 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :pcie_slot_mraid1option_rom

    # BIOS Token for setting MRAID2 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PcieSlotMraid2linkSpeed token. * `Disabled` - Value - Disabled for configuring PcieSlotMraid2linkSpeed token. * `GEN1` - Value - GEN1 for configuring PcieSlotMraid2linkSpeed token. * `GEN2` - Value - GEN2 for configuring PcieSlotMraid2linkSpeed token. * `GEN3` - Value - GEN3 for configuring PcieSlotMraid2linkSpeed token. * `GEN4` - Value - GEN4 for configuring PcieSlotMraid2linkSpeed token.
    attr_accessor :pcie_slot_mraid2link_speed

    # BIOS Token for setting MRAID2 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :pcie_slot_mraid2option_rom

    # BIOS Token for setting PCIe Slot MSTOR Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PcieSlotMstorraidLinkSpeed token. * `Disabled` - Value - Disabled for configuring PcieSlotMstorraidLinkSpeed token. * `GEN1` - Value - GEN1 for configuring PcieSlotMstorraidLinkSpeed token. * `GEN2` - Value - GEN2 for configuring PcieSlotMstorraidLinkSpeed token. * `GEN3` - Value - GEN3 for configuring PcieSlotMstorraidLinkSpeed token. * `GEN4` - Value - GEN4 for configuring PcieSlotMstorraidLinkSpeed token.
    attr_accessor :pcie_slot_mstorraid_link_speed

    # BIOS Token for setting PCIe Slot MSTOR RAID OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :pcie_slot_mstorraid_option_rom

    # BIOS Token for setting NVME 1 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PcieSlotNvme1linkSpeed token. * `Disabled` - Value - Disabled for configuring PcieSlotNvme1linkSpeed token. * `GEN1` - Value - GEN1 for configuring PcieSlotNvme1linkSpeed token. * `GEN2` - Value - GEN2 for configuring PcieSlotNvme1linkSpeed token. * `GEN3` - Value - GEN3 for configuring PcieSlotNvme1linkSpeed token.
    attr_accessor :pcie_slot_nvme1link_speed

    # BIOS Token for setting NVME 1 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :pcie_slot_nvme1option_rom

    # BIOS Token for setting NVME 2 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PcieSlotNvme2linkSpeed token. * `Disabled` - Value - Disabled for configuring PcieSlotNvme2linkSpeed token. * `GEN1` - Value - GEN1 for configuring PcieSlotNvme2linkSpeed token. * `GEN2` - Value - GEN2 for configuring PcieSlotNvme2linkSpeed token. * `GEN3` - Value - GEN3 for configuring PcieSlotNvme2linkSpeed token.
    attr_accessor :pcie_slot_nvme2link_speed

    # BIOS Token for setting NVME 2 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :pcie_slot_nvme2option_rom

    # BIOS Token for setting NVME 3 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PcieSlotNvme3linkSpeed token. * `Disabled` - Value - Disabled for configuring PcieSlotNvme3linkSpeed token. * `GEN1` - Value - GEN1 for configuring PcieSlotNvme3linkSpeed token. * `GEN2` - Value - GEN2 for configuring PcieSlotNvme3linkSpeed token. * `GEN3` - Value - GEN3 for configuring PcieSlotNvme3linkSpeed token.
    attr_accessor :pcie_slot_nvme3link_speed

    # BIOS Token for setting NVME 3 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :pcie_slot_nvme3option_rom

    # BIOS Token for setting NVME 4 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PcieSlotNvme4linkSpeed token. * `Disabled` - Value - Disabled for configuring PcieSlotNvme4linkSpeed token. * `GEN1` - Value - GEN1 for configuring PcieSlotNvme4linkSpeed token. * `GEN2` - Value - GEN2 for configuring PcieSlotNvme4linkSpeed token. * `GEN3` - Value - GEN3 for configuring PcieSlotNvme4linkSpeed token.
    attr_accessor :pcie_slot_nvme4link_speed

    # BIOS Token for setting NVME 4 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :pcie_slot_nvme4option_rom

    # BIOS Token for setting NVME 5 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PcieSlotNvme5linkSpeed token. * `Disabled` - Value - Disabled for configuring PcieSlotNvme5linkSpeed token. * `GEN1` - Value - GEN1 for configuring PcieSlotNvme5linkSpeed token. * `GEN2` - Value - GEN2 for configuring PcieSlotNvme5linkSpeed token. * `GEN3` - Value - GEN3 for configuring PcieSlotNvme5linkSpeed token.
    attr_accessor :pcie_slot_nvme5link_speed

    # BIOS Token for setting NVME 5 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :pcie_slot_nvme5option_rom

    # BIOS Token for setting NVME 6 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PcieSlotNvme6linkSpeed token. * `Disabled` - Value - Disabled for configuring PcieSlotNvme6linkSpeed token. * `GEN1` - Value - GEN1 for configuring PcieSlotNvme6linkSpeed token. * `GEN2` - Value - GEN2 for configuring PcieSlotNvme6linkSpeed token. * `GEN3` - Value - GEN3 for configuring PcieSlotNvme6linkSpeed token.
    attr_accessor :pcie_slot_nvme6link_speed

    # BIOS Token for setting NVME 6 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :pcie_slot_nvme6option_rom

    # BIOS Token for setting PCIe Slots CDN Control configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :pcie_slots_cdn_enable

    # BIOS Token for setting Power ON Password configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :pop_support

    # BIOS Token for setting POST Error Pause configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :post_error_pause

    # BIOS Token for setting Post Package Repair configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Disabled` - Value - Disabled for configuring PostPackageRepair token. * `Hard PPR` - Value - Hard PPR for configuring PostPackageRepair token.
    attr_accessor :post_package_repair

    # BIOS Token for setting Processor C1E configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :processor_c1e

    # BIOS Token for setting Processor C3 Report configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :processor_c3report

    # BIOS Token for setting Processor C6 Report configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :processor_c6report

    # BIOS Token for setting CPU C State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :processor_cstate

    # BIOS Token for setting P-SATA Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `AHCI` - Value - AHCI for configuring Psata token. * `Disabled` - Value - Disabled for configuring Psata token. * `LSI SW RAID` - Value - LSI SW RAID for configuring Psata token.
    attr_accessor :psata

    # BIOS Token for setting P-STATE Coordination configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `HW ALL` - Value - HW ALL for configuring PstateCoordType token. * `SW ALL` - Value - SW ALL for configuring PstateCoordType token. * `SW ANY` - Value - SW ANY for configuring PstateCoordType token.
    attr_accessor :pstate_coord_type

    # BIOS Token for setting Putty KeyPad configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `ESCN` - Value - ESCN for configuring PuttyKeyPad token. * `LINUX` - Value - LINUX for configuring PuttyKeyPad token. * `SCO` - Value - SCO for configuring PuttyKeyPad token. * `VT100` - Value - VT100 for configuring PuttyKeyPad token. * `VT400` - Value - VT400 for configuring PuttyKeyPad token. * `XTERMR6` - Value - XTERMR6 for configuring PuttyKeyPad token.
    attr_accessor :putty_key_pad

    # BIOS Token for setting Power Performance Tuning configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `bios` - Value - BIOS for configuring PwrPerfTuning token. * `os` - Value - os for configuring PwrPerfTuning token. * `peci` - Value - peci for configuring PwrPerfTuning token.
    attr_accessor :pwr_perf_tuning

    # BIOS Token for setting QPI Link Frequency Select configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `6.4-gt/s` - Value - 6.4-gt/s for configuring QpiLinkFrequency token. * `7.2-gt/s` - Value - 7.2-gt/s for configuring QpiLinkFrequency token. * `8.0-gt/s` - Value - 8.0-gt/s for configuring QpiLinkFrequency token. * `9.6-gt/s` - Value - 9.6-gt/s for configuring QpiLinkFrequency token. * `auto` - Value - auto for configuring QpiLinkFrequency token.
    attr_accessor :qpi_link_frequency

    # BIOS Token for setting UPI Link Frequency Select configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `10.4GT/s` - Value - 10.4GT/s for configuring QpiLinkSpeed token. * `11.2GT/s` - Value - 11.2GT/s for configuring QpiLinkSpeed token. * `9.6GT/s` - Value - 9.6GT/s for configuring QpiLinkSpeed token. * `Auto` - Value - Auto for configuring QpiLinkSpeed token.
    attr_accessor :qpi_link_speed

    # BIOS Token for setting QPI Snoop Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `auto` - Value - auto for configuring QpiSnoopMode token. * `cluster-on-die` - Value - cluster-on-die for configuring QpiSnoopMode token. * `early-snoop` - Value - early-snoop for configuring QpiSnoopMode token. * `home-directory-snoop` - Value - home-directory-snoop for configuring QpiSnoopMode token. * `home-directory-snoop-with-osb` - Value - home-directory-snoop-with-osb for configuring QpiSnoopMode token. * `home-snoop` - Value - home-snoop for configuring QpiSnoopMode token.
    attr_accessor :qpi_snoop_mode

    # BIOS Token for setting Rank Interleaving configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `1-way` - Value - 1-way for configuring RankInterLeave token. * `2-way` - Value - 2-way for configuring RankInterLeave token. * `4-way` - Value - 4-way for configuring RankInterLeave token. * `8-way` - Value - 8-way for configuring RankInterLeave token. * `auto` - Value - auto for configuring RankInterLeave token.
    attr_accessor :rank_inter_leave

    # BIOS Token for setting Redirection After BIOS POST configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Always Enable` - Value - Always Enable for configuring RedirectionAfterPost token. * `Bootloader` - Value - Bootloader for configuring RedirectionAfterPost token.
    attr_accessor :redirection_after_post

    # BIOS Token for setting SATA Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `AHCI` - Value - AHCI for configuring SataModeSelect token. * `Disabled` - Value - Disabled for configuring SataModeSelect token. * `LSI SW RAID` - Value - LSI SW RAID for configuring SataModeSelect token.
    attr_accessor :sata_mode_select

    # BIOS Token for setting Memory RAS Configuration configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `adddc-sparing` - Value - adddc-sparing for configuring SelectMemoryRasConfiguration token. * `lockstep` - Value - lockstep for configuring SelectMemoryRasConfiguration token. * `maximum-performance` - Value - maximum-performance for configuring SelectMemoryRasConfiguration token. * `mirror-mode-1lm` - Value - mirror-mode-1lm for configuring SelectMemoryRasConfiguration token. * `mirroring` - Value - mirroring for configuring SelectMemoryRasConfiguration token. * `partial-mirror-mode-1lm` - Value - partial-mirror-mode-1lm for configuring SelectMemoryRasConfiguration token. * `sparing` - Value - sparing for configuring SelectMemoryRasConfiguration token.
    attr_accessor :select_memory_ras_configuration

    # BIOS Token for setting PPR Type configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring SelectPprType token. * `Hard PPR` - Value - Hard PPR for configuring SelectPprType token. * `Soft PPR` - Value - Soft PPR for configuring SelectPprType token.
    attr_accessor :select_ppr_type

    # BIOS Token for setting Serial A Enable configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :serial_port_aenable

    # BIOS Token for setting Secured Encrypted Virtualization configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `253 ASIDs` - Value - 253 ASIDs for configuring Sev token. * `509 ASIDs` - Value - 509 ASIDs for configuring Sev token. * `Auto` - Value - Auto for configuring Sev token.
    attr_accessor :sev

    # BIOS Token for setting SGX Auto MP Registration Agent configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :sgx_auto_registration_agent

    # BIOS Token for setting SGX Epoch 0 configuration (0 - ffffffffffffffff Hash byte 7-0).
    attr_accessor :sgx_epoch0

    # BIOS Token for setting SGX Epoch 1 configuration (0 - ffffffffffffffff Hash byte 7-0).
    attr_accessor :sgx_epoch1

    # BIOS Token for setting SGX Factory Reset configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :sgx_factory_reset

    # BIOS Token for setting SGX PubKey Hash0 configuration (0 - ffffffffffffffff Hash byte 7-0).
    attr_accessor :sgx_le_pub_key_hash0

    # BIOS Token for setting SGX PubKey Hash1 configuration (0 - ffffffffffffffff Hash byte 15-8).
    attr_accessor :sgx_le_pub_key_hash1

    # BIOS Token for setting SGX PubKey Hash2 configuration (0 - ffffffffffffffff Hash byte 23-16).
    attr_accessor :sgx_le_pub_key_hash2

    # BIOS Token for setting SGX PubKey Hash3 configuration (0 - ffffffffffffffff Hash byte 31-24).
    attr_accessor :sgx_le_pub_key_hash3

    # BIOS Token for setting SGX Write Enable configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :sgx_le_wr

    # BIOS Token for setting SGX Package Information In-Band Access configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :sgx_package_info_in_band_access

    # BIOS Token for setting SGX QoS configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :sgx_qos

    # BIOS Token for setting SHA-1 PCR Bank configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :sha1pcr_bank

    # BIOS Token for setting SHA256 PCR Bank configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :sha256pcr_bank

    # BIOS Token for setting Single PCTL configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `No` - Value - No for configuring SinglePctlEnable token. * `Yes` - Value - Yes for configuring SinglePctlEnable token.
    attr_accessor :single_pctl_enable

    # BIOS Token for setting PCIe Slot:10 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot10linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot10linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot10linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot10linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot10linkSpeed token.
    attr_accessor :slot10link_speed

    # BIOS Token for setting Slot 10 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring Slot10state token. * `enabled` - Value - enabled for configuring Slot10state token. * `Legacy Only` - Value - Legacy Only for configuring Slot10state token. * `UEFI Only` - Value - UEFI Only for configuring Slot10state token.
    attr_accessor :slot10state

    # BIOS Token for setting PCIe Slot:11 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot11linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot11linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot11linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot11linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot11linkSpeed token.
    attr_accessor :slot11link_speed

    # BIOS Token for setting Slot 11 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot11state

    # BIOS Token for setting PCIe Slot:12 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot12linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot12linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot12linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot12linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot12linkSpeed token.
    attr_accessor :slot12link_speed

    # BIOS Token for setting Slot 12 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot12state

    # BIOS Token for setting Slot 13 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot13state

    # BIOS Token for setting Slot 14 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot14state

    # BIOS Token for setting PCIe Slot: 1 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot1linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot1linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot1linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot1linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot1linkSpeed token. * `GEN4` - Value - GEN4 for configuring Slot1linkSpeed token.
    attr_accessor :slot1link_speed

    # BIOS Token for setting Slot 1 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring Slot1state token. * `enabled` - Value - enabled for configuring Slot1state token. * `Legacy Only` - Value - Legacy Only for configuring Slot1state token. * `UEFI Only` - Value - UEFI Only for configuring Slot1state token.
    attr_accessor :slot1state

    # BIOS Token for setting PCIe Slot: 2 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot2linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot2linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot2linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot2linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot2linkSpeed token. * `GEN4` - Value - GEN4 for configuring Slot2linkSpeed token.
    attr_accessor :slot2link_speed

    # BIOS Token for setting Slot 2 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring Slot2state token. * `enabled` - Value - enabled for configuring Slot2state token. * `Legacy Only` - Value - Legacy Only for configuring Slot2state token. * `UEFI Only` - Value - UEFI Only for configuring Slot2state token.
    attr_accessor :slot2state

    # BIOS Token for setting PCIe Slot: 3 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot3linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot3linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot3linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot3linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot3linkSpeed token. * `GEN4` - Value - GEN4 for configuring Slot3linkSpeed token.
    attr_accessor :slot3link_speed

    # BIOS Token for setting Slot 3 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring Slot3state token. * `enabled` - Value - enabled for configuring Slot3state token. * `Legacy Only` - Value - Legacy Only for configuring Slot3state token. * `UEFI Only` - Value - UEFI Only for configuring Slot3state token.
    attr_accessor :slot3state

    # BIOS Token for setting PCIe Slot: 4 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot4linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot4linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot4linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot4linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot4linkSpeed token. * `GEN4` - Value - GEN4 for configuring Slot4linkSpeed token.
    attr_accessor :slot4link_speed

    # BIOS Token for setting Slot 4 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring Slot4state token. * `enabled` - Value - enabled for configuring Slot4state token. * `Legacy Only` - Value - Legacy Only for configuring Slot4state token. * `UEFI Only` - Value - UEFI Only for configuring Slot4state token.
    attr_accessor :slot4state

    # BIOS Token for setting PCIe Slot: 5 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot5linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot5linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot5linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot5linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot5linkSpeed token. * `GEN4` - Value - GEN4 for configuring Slot5linkSpeed token.
    attr_accessor :slot5link_speed

    # BIOS Token for setting Slot 5 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring Slot5state token. * `enabled` - Value - enabled for configuring Slot5state token. * `Legacy Only` - Value - Legacy Only for configuring Slot5state token. * `UEFI Only` - Value - UEFI Only for configuring Slot5state token.
    attr_accessor :slot5state

    # BIOS Token for setting PCIe Slot: 6 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot6linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot6linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot6linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot6linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot6linkSpeed token. * `GEN4` - Value - GEN4 for configuring Slot6linkSpeed token.
    attr_accessor :slot6link_speed

    # BIOS Token for setting Slot 6 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring Slot6state token. * `enabled` - Value - enabled for configuring Slot6state token. * `Legacy Only` - Value - Legacy Only for configuring Slot6state token. * `UEFI Only` - Value - UEFI Only for configuring Slot6state token.
    attr_accessor :slot6state

    # BIOS Token for setting PCIe Slot: 7 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot7linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot7linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot7linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot7linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot7linkSpeed token. * `GEN4` - Value - GEN4 for configuring Slot7linkSpeed token.
    attr_accessor :slot7link_speed

    # BIOS Token for setting Slot 7 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring Slot7state token. * `enabled` - Value - enabled for configuring Slot7state token. * `Legacy Only` - Value - Legacy Only for configuring Slot7state token. * `UEFI Only` - Value - UEFI Only for configuring Slot7state token.
    attr_accessor :slot7state

    # BIOS Token for setting PCIe Slot: 8 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot8linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot8linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot8linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot8linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot8linkSpeed token. * `GEN4` - Value - GEN4 for configuring Slot8linkSpeed token.
    attr_accessor :slot8link_speed

    # BIOS Token for setting Slot 8 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring Slot8state token. * `enabled` - Value - enabled for configuring Slot8state token. * `Legacy Only` - Value - Legacy Only for configuring Slot8state token. * `UEFI Only` - Value - UEFI Only for configuring Slot8state token.
    attr_accessor :slot8state

    # BIOS Token for setting PCIe Slot: 9 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot9linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot9linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot9linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot9linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot9linkSpeed token. * `GEN4` - Value - GEN4 for configuring Slot9linkSpeed token.
    attr_accessor :slot9link_speed

    # BIOS Token for setting Slot 9 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring Slot9state token. * `enabled` - Value - enabled for configuring Slot9state token. * `Legacy Only` - Value - Legacy Only for configuring Slot9state token. * `UEFI Only` - Value - UEFI Only for configuring Slot9state token.
    attr_accessor :slot9state

    # BIOS Token for setting PCIe Slot:FLOM Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotFlomLinkSpeed token. * `Disabled` - Value - Disabled for configuring SlotFlomLinkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotFlomLinkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotFlomLinkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotFlomLinkSpeed token.
    attr_accessor :slot_flom_link_speed

    # BIOS Token for setting Front NVME 10 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotFrontNvme10linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotFrontNvme10linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotFrontNvme10linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotFrontNvme10linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotFrontNvme10linkSpeed token. * `GEN4` - Value - GEN4 for configuring SlotFrontNvme10linkSpeed token.
    attr_accessor :slot_front_nvme10link_speed

    # BIOS Token for setting Front NVME 10 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme10option_rom

    # BIOS Token for setting Front NVME 11 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotFrontNvme11linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotFrontNvme11linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotFrontNvme11linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotFrontNvme11linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotFrontNvme11linkSpeed token. * `GEN4` - Value - GEN4 for configuring SlotFrontNvme11linkSpeed token.
    attr_accessor :slot_front_nvme11link_speed

    # BIOS Token for setting Front NVME 11 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme11option_rom

    # BIOS Token for setting Front NVME 12 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotFrontNvme12linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotFrontNvme12linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotFrontNvme12linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotFrontNvme12linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotFrontNvme12linkSpeed token. * `GEN4` - Value - GEN4 for configuring SlotFrontNvme12linkSpeed token.
    attr_accessor :slot_front_nvme12link_speed

    # BIOS Token for setting Front NVME 12 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme12option_rom

    # BIOS Token for setting Front NVME 13 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme13option_rom

    # BIOS Token for setting Front NVME 14 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme14option_rom

    # BIOS Token for setting Front NVME 15 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme15option_rom

    # BIOS Token for setting Front NVME 16 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme16option_rom

    # BIOS Token for setting Front NVME 17 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme17option_rom

    # BIOS Token for setting Front NVME 18 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme18option_rom

    # BIOS Token for setting Front NVME 19 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme19option_rom

    # BIOS Token for setting PCIe Slot:Front NVME 1 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotFrontNvme1linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotFrontNvme1linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotFrontNvme1linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotFrontNvme1linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotFrontNvme1linkSpeed token. * `GEN4` - Value - GEN4 for configuring SlotFrontNvme1linkSpeed token.
    attr_accessor :slot_front_nvme1link_speed

    # BIOS Token for setting Front NVME 1 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme1option_rom

    # BIOS Token for setting Front NVME 20 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme20option_rom

    # BIOS Token for setting Front NVME 21 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme21option_rom

    # BIOS Token for setting Front NVME 22 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme22option_rom

    # BIOS Token for setting Front NVME 23 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme23option_rom

    # BIOS Token for setting Front NVME 24 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme24option_rom

    # BIOS Token for setting PCIe Slot:Front NVME 2 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotFrontNvme2linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotFrontNvme2linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotFrontNvme2linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotFrontNvme2linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotFrontNvme2linkSpeed token. * `GEN4` - Value - GEN4 for configuring SlotFrontNvme2linkSpeed token.
    attr_accessor :slot_front_nvme2link_speed

    # BIOS Token for setting Front NVME 2 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme2option_rom

    # BIOS Token for setting Front NVME 3 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotFrontNvme3linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotFrontNvme3linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotFrontNvme3linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotFrontNvme3linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotFrontNvme3linkSpeed token. * `GEN4` - Value - GEN4 for configuring SlotFrontNvme3linkSpeed token.
    attr_accessor :slot_front_nvme3link_speed

    # BIOS Token for setting Front NVME 3 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme3option_rom

    # BIOS Token for setting Front NVME 4 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotFrontNvme4linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotFrontNvme4linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotFrontNvme4linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotFrontNvme4linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotFrontNvme4linkSpeed token. * `GEN4` - Value - GEN4 for configuring SlotFrontNvme4linkSpeed token.
    attr_accessor :slot_front_nvme4link_speed

    # BIOS Token for setting Front NVME 4 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme4option_rom

    # BIOS Token for setting Front NVME 5 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotFrontNvme5linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotFrontNvme5linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotFrontNvme5linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotFrontNvme5linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotFrontNvme5linkSpeed token. * `GEN4` - Value - GEN4 for configuring SlotFrontNvme5linkSpeed token.
    attr_accessor :slot_front_nvme5link_speed

    # BIOS Token for setting Front NVME 5 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme5option_rom

    # BIOS Token for setting Front NVME 6 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotFrontNvme6linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotFrontNvme6linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotFrontNvme6linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotFrontNvme6linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotFrontNvme6linkSpeed token. * `GEN4` - Value - GEN4 for configuring SlotFrontNvme6linkSpeed token.
    attr_accessor :slot_front_nvme6link_speed

    # BIOS Token for setting Front NVME 6 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme6option_rom

    # BIOS Token for setting Front NVME 7 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotFrontNvme7linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotFrontNvme7linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotFrontNvme7linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotFrontNvme7linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotFrontNvme7linkSpeed token. * `GEN4` - Value - GEN4 for configuring SlotFrontNvme7linkSpeed token.
    attr_accessor :slot_front_nvme7link_speed

    # BIOS Token for setting Front NVME 7 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme7option_rom

    # BIOS Token for setting Front NVME 8 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotFrontNvme8linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotFrontNvme8linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotFrontNvme8linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotFrontNvme8linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotFrontNvme8linkSpeed token. * `GEN4` - Value - GEN4 for configuring SlotFrontNvme8linkSpeed token.
    attr_accessor :slot_front_nvme8link_speed

    # BIOS Token for setting Front NVME 8 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme8option_rom

    # BIOS Token for setting Front NVME 9 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotFrontNvme9linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotFrontNvme9linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotFrontNvme9linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotFrontNvme9linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotFrontNvme9linkSpeed token. * `GEN4` - Value - GEN4 for configuring SlotFrontNvme9linkSpeed token.
    attr_accessor :slot_front_nvme9link_speed

    # BIOS Token for setting Front NVME 9 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_front_nvme9option_rom

    # BIOS Token for setting PCIe Slot:Front1 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotFrontSlot5linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotFrontSlot5linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotFrontSlot5linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotFrontSlot5linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotFrontSlot5linkSpeed token.
    attr_accessor :slot_front_slot5link_speed

    # BIOS Token for setting PCIe Slot:Front2 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotFrontSlot6linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotFrontSlot6linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotFrontSlot6linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotFrontSlot6linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotFrontSlot6linkSpeed token.
    attr_accessor :slot_front_slot6link_speed

    # BIOS Token for setting GPU 1 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_gpu1state

    # BIOS Token for setting GPU 2 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_gpu2state

    # BIOS Token for setting GPU 3 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_gpu3state

    # BIOS Token for setting GPU 4 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_gpu4state

    # BIOS Token for setting GPU 5 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_gpu5state

    # BIOS Token for setting GPU 6 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_gpu6state

    # BIOS Token for setting GPU 7 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_gpu7state

    # BIOS Token for setting GPU 8 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_gpu8state

    # BIOS Token for setting PCIe Slot:HBA Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotHbaLinkSpeed token. * `Disabled` - Value - Disabled for configuring SlotHbaLinkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotHbaLinkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotHbaLinkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotHbaLinkSpeed token.
    attr_accessor :slot_hba_link_speed

    # BIOS Token for setting PCIe Slot:HBA OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring SlotHbaState token. * `enabled` - Value - enabled for configuring SlotHbaState token. * `Legacy Only` - Value - Legacy Only for configuring SlotHbaState token. * `UEFI Only` - Value - UEFI Only for configuring SlotHbaState token.
    attr_accessor :slot_hba_state

    # BIOS Token for setting PCIe LOM:1 Link configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_lom1link

    # BIOS Token for setting PCIe LOM:2 Link configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_lom2link

    # BIOS Token for setting Slot Mezz State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring SlotMezzState token. * `enabled` - Value - enabled for configuring SlotMezzState token. * `Legacy Only` - Value - Legacy Only for configuring SlotMezzState token. * `UEFI Only` - Value - UEFI Only for configuring SlotMezzState token.
    attr_accessor :slot_mezz_state

    # BIOS Token for setting PCIe Slot:MLOM Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotMlomLinkSpeed token. * `Disabled` - Value - Disabled for configuring SlotMlomLinkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotMlomLinkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotMlomLinkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotMlomLinkSpeed token. * `GEN4` - Value - GEN4 for configuring SlotMlomLinkSpeed token.
    attr_accessor :slot_mlom_link_speed

    # BIOS Token for setting PCIe Slot MLOM OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring SlotMlomState token. * `enabled` - Value - enabled for configuring SlotMlomState token. * `Legacy Only` - Value - Legacy Only for configuring SlotMlomState token. * `UEFI Only` - Value - UEFI Only for configuring SlotMlomState token.
    attr_accessor :slot_mlom_state

    # BIOS Token for setting MRAID Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotMraidLinkSpeed token. * `Disabled` - Value - Disabled for configuring SlotMraidLinkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotMraidLinkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotMraidLinkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotMraidLinkSpeed token. * `GEN4` - Value - GEN4 for configuring SlotMraidLinkSpeed token.
    attr_accessor :slot_mraid_link_speed

    # BIOS Token for setting PCIe Slot MRAID OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_mraid_state

    # BIOS Token for setting PCIe Slot N10 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n10state

    # BIOS Token for setting PCIe Slot N11 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n11state

    # BIOS Token for setting PCIe Slot N12 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n12state

    # BIOS Token for setting PCIe Slot N13 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n13state

    # BIOS Token for setting PCIe Slot N14 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n14state

    # BIOS Token for setting PCIe Slot N15 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n15state

    # BIOS Token for setting PCIe Slot N16 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n16state

    # BIOS Token for setting PCIe Slot N17 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n17state

    # BIOS Token for setting PCIe Slot N18 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n18state

    # BIOS Token for setting PCIe Slot N19 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n19state

    # BIOS Token for setting PCIe Slot N1 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring SlotN1state token. * `enabled` - Value - enabled for configuring SlotN1state token. * `Legacy Only` - Value - Legacy Only for configuring SlotN1state token. * `UEFI Only` - Value - UEFI Only for configuring SlotN1state token.
    attr_accessor :slot_n1state

    # BIOS Token for setting PCIe Slot N20 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n20state

    # BIOS Token for setting PCIe Slot N21 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n21state

    # BIOS Token for setting PCIe Slot N22 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n22state

    # BIOS Token for setting PCIe Slot N23 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n23state

    # BIOS Token for setting PCIe Slot N24 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n24state

    # BIOS Token for setting PCIe Slot N2 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring SlotN2state token. * `enabled` - Value - enabled for configuring SlotN2state token. * `Legacy Only` - Value - Legacy Only for configuring SlotN2state token. * `UEFI Only` - Value - UEFI Only for configuring SlotN2state token.
    attr_accessor :slot_n2state

    # BIOS Token for setting PCIe Slot N3 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n3state

    # BIOS Token for setting PCIe Slot N4 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n4state

    # BIOS Token for setting PCIe Slot N5 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n5state

    # BIOS Token for setting PCIe Slot N6 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n6state

    # BIOS Token for setting PCIe Slot N7 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n7state

    # BIOS Token for setting PCIe Slot N8 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n8state

    # BIOS Token for setting PCIe Slot N9 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_n9state

    # BIOS Token for setting RAID Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRaidLinkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRaidLinkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRaidLinkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRaidLinkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRaidLinkSpeed token.
    attr_accessor :slot_raid_link_speed

    # BIOS Token for setting PCIe Slot RAID OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_raid_state

    # BIOS Token for setting PCIe Slot:Rear NVME 1 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRearNvme1linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRearNvme1linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRearNvme1linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRearNvme1linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRearNvme1linkSpeed token. * `GEN4` - Value - GEN4 for configuring SlotRearNvme1linkSpeed token.
    attr_accessor :slot_rear_nvme1link_speed

    # BIOS Token for setting PCIe Slot:Rear NVME 1 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_rear_nvme1state

    # BIOS Token for setting PCIe Slot:Rear NVME 2 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRearNvme2linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRearNvme2linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRearNvme2linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRearNvme2linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRearNvme2linkSpeed token. * `GEN4` - Value - GEN4 for configuring SlotRearNvme2linkSpeed token.
    attr_accessor :slot_rear_nvme2link_speed

    # BIOS Token for setting PCIe Slot:Rear NVME 2 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_rear_nvme2state

    # BIOS Token for setting Rear NVME 3 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRearNvme3linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRearNvme3linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRearNvme3linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRearNvme3linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRearNvme3linkSpeed token. * `GEN4` - Value - GEN4 for configuring SlotRearNvme3linkSpeed token.
    attr_accessor :slot_rear_nvme3link_speed

    # BIOS Token for setting PCIe Slot:Rear NVME 3 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_rear_nvme3state

    # BIOS Token for setting Rear NVME 4 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRearNvme4linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRearNvme4linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRearNvme4linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRearNvme4linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRearNvme4linkSpeed token. * `GEN4` - Value - GEN4 for configuring SlotRearNvme4linkSpeed token.
    attr_accessor :slot_rear_nvme4link_speed

    # BIOS Token for setting PCIe Slot:Rear NVME 4 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_rear_nvme4state

    # BIOS Token for setting PCIe Slot:Rear NVME 5 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_rear_nvme5state

    # BIOS Token for setting PCIe Slot:Rear NVME 6 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_rear_nvme6state

    # BIOS Token for setting PCIe Slot:Rear NVME 7 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_rear_nvme7state

    # BIOS Token for setting PCIe Slot:Rear NVME 8 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :slot_rear_nvme8state

    # BIOS Token for setting PCIe Slot:Riser1 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRiser1linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRiser1linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRiser1linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRiser1linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRiser1linkSpeed token.
    attr_accessor :slot_riser1link_speed

    # BIOS Token for setting PCIe Slot:Riser1 Slot1 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRiser1slot1linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRiser1slot1linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRiser1slot1linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRiser1slot1linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRiser1slot1linkSpeed token.
    attr_accessor :slot_riser1slot1link_speed

    # BIOS Token for setting PCIe Slot:Riser1 Slot2 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRiser1slot2linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRiser1slot2linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRiser1slot2linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRiser1slot2linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRiser1slot2linkSpeed token.
    attr_accessor :slot_riser1slot2link_speed

    # BIOS Token for setting PCIe Slot:Riser1 Slot3 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRiser1slot3linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRiser1slot3linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRiser1slot3linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRiser1slot3linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRiser1slot3linkSpeed token.
    attr_accessor :slot_riser1slot3link_speed

    # BIOS Token for setting PCIe Slot:Riser2 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRiser2linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRiser2linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRiser2linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRiser2linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRiser2linkSpeed token.
    attr_accessor :slot_riser2link_speed

    # BIOS Token for setting PCIe Slot:Riser2 Slot4 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRiser2slot4linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRiser2slot4linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRiser2slot4linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRiser2slot4linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRiser2slot4linkSpeed token.
    attr_accessor :slot_riser2slot4link_speed

    # BIOS Token for setting PCIe Slot:Riser2 Slot5 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRiser2slot5linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRiser2slot5linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRiser2slot5linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRiser2slot5linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRiser2slot5linkSpeed token.
    attr_accessor :slot_riser2slot5link_speed

    # BIOS Token for setting PCIe Slot:Riser2 Slot6 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRiser2slot6linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRiser2slot6linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRiser2slot6linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRiser2slot6linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRiser2slot6linkSpeed token.
    attr_accessor :slot_riser2slot6link_speed

    # BIOS Token for setting PCIe Slot:SAS OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring SlotSasState token. * `enabled` - Value - enabled for configuring SlotSasState token. * `Legacy Only` - Value - Legacy Only for configuring SlotSasState token. * `UEFI Only` - Value - UEFI Only for configuring SlotSasState token.
    attr_accessor :slot_sas_state

    # BIOS Token for setting PCIe Slot:FrontSSD1 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotSsdSlot1linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotSsdSlot1linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotSsdSlot1linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotSsdSlot1linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotSsdSlot1linkSpeed token.
    attr_accessor :slot_ssd_slot1link_speed

    # BIOS Token for setting PCIe Slot:FrontSSD2 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotSsdSlot2linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotSsdSlot2linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotSsdSlot2linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotSsdSlot2linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotSsdSlot2linkSpeed token.
    attr_accessor :slot_ssd_slot2link_speed

    # BIOS Token for setting SMEE configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :smee

    # BIOS Token for setting SMT Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SmtMode token. * `Off` - Value - Off for configuring SmtMode token.
    attr_accessor :smt_mode

    # BIOS Token for setting Sub Numa Clustering configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Snc token. * `disabled` - Value - disabled for configuring Snc token. * `enabled` - Value - enabled for configuring Snc token.
    attr_accessor :snc

    # BIOS Token for setting Snoopy Mode for 2LM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :snoopy_mode_for2lm

    # BIOS Token for setting Snoopy Mode for AD configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :snoopy_mode_for_ad

    # BIOS Token for setting Sparing Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `dimm-sparing` - Value - dimm-sparing for configuring SparingMode token. * `rank-sparing` - Value - rank-sparing for configuring SparingMode token.
    attr_accessor :sparing_mode

    # BIOS Token for setting SR-IOV Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :sr_iov

    # BIOS Token for setting DCU Streamer Prefetch configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :streamer_prefetch

    # BIOS Token for setting SVM Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :svm_mode

    # BIOS Token for setting Terminal Type configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `pc-ansi` - Value - pc-ansi for configuring TerminalType token. * `vt100` - Value - vt100 for configuring TerminalType token. * `vt100-plus` - Value - vt100-plus for configuring TerminalType token. * `vt-utf8` - Value - vt-utf8 for configuring TerminalType token.
    attr_accessor :terminal_type

    # BIOS Token for setting Trusted Platform Module State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :tpm_control

    # BIOS Token for setting TPM Pending Operation configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `None` - Value - None for configuring TpmPendingOperation token. * `TpmClear` - Value - TpmClear for configuring TpmPendingOperation token.
    attr_accessor :tpm_pending_operation

    # BIOS Token for setting TPM Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :tpm_support

    # BIOS Token for setting Transparent Secure Memory Encryption configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Tsme token. * `disabled` - Value - disabled for configuring Tsme token. * `enabled` - Value - enabled for configuring Tsme token.
    attr_accessor :tsme

    # BIOS Token for setting Intel Trusted Execution Technology Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :txt_support

    # BIOS Token for setting Boot Order Rules configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Loose` - Value - Loose for configuring UcsmBootOrderRule token. * `Strict` - Value - Strict for configuring UcsmBootOrderRule token.
    attr_accessor :ucsm_boot_order_rule

    # BIOS Token for setting Uncore Frequency Scaling configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :ufs_disable

    # BIOS Token for setting UMA Based Clustering configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Disable (All2All)` - Value - Disable (All2All) for configuring UmaBasedClustering token. * `Hemisphere (2-clusters)` - Value - Hemisphere (2-clusters) for configuring UmaBasedClustering token.
    attr_accessor :uma_based_clustering

    # BIOS Token for setting UPI Link Enablement configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `1` - Value - 1 for configuring UpiLinkEnablement token. * `2` - Value - 2 for configuring UpiLinkEnablement token. * `Auto` - Value - Auto for configuring UpiLinkEnablement token.
    attr_accessor :upi_link_enablement

    # BIOS Token for setting UPI Power Manangement configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :upi_power_management

    # BIOS Token for setting Port 60/64 Emulation configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :usb_emul6064

    # BIOS Token for setting USB Port Front configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :usb_port_front

    # BIOS Token for setting USB Port Internal configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :usb_port_internal

    # BIOS Token for setting USB Port KVM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :usb_port_kvm

    # BIOS Token for setting USB Port Rear configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :usb_port_rear

    # BIOS Token for setting USB Port SD Card configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :usb_port_sd_card

    # BIOS Token for setting USB Port VMedia configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :usb_port_vmedia

    # BIOS Token for setting XHCI Legacy Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :usb_xhci_support

    # BIOS Token for setting VGA Priority configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Offboard` - Value - Offboard for configuring VgaPriority token. * `Onboard` - Value - Onboard for configuring VgaPriority token. * `Onboard VGA Disabled` - Value - Onboard VGA Disabled for configuring VgaPriority token.
    attr_accessor :vga_priority

    # BIOS Token for setting Virtual NUMA configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :virtual_numa

    # BIOS Token for setting VMD Enablement configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
    attr_accessor :vmd_enable

    # BIOS Token for setting Volatile Memory Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `1LM` - Value - 1LM for configuring VolMemoryMode token. * `2LM` - Value - 2LM for configuring VolMemoryMode token.
    attr_accessor :vol_memory_mode

    # BIOS Token for setting Workload Configuration configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Balanced` - Value - Balanced for configuring WorkLoadConfig token. * `I/O Sensitive` - Value - I/O Sensitive for configuring WorkLoadConfig token. * `NUMA` - Value - NUMA for configuring WorkLoadConfig token. * `UMA` - Value - UMA for configuring WorkLoadConfig token.
    attr_accessor :work_load_config

    # BIOS Token for setting XPT Prefetch configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring XptPrefetch token. * `disabled` - Value - disabled for configuring XptPrefetch token. * `enabled` - Value - enabled for configuring XptPrefetch token.
    attr_accessor :xpt_prefetch

    # BIOS Token for setting XPT Remote Prefetch configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring XptRemotePrefetch token. * `disabled` - Value - disabled for configuring XptRemotePrefetch token. * `enabled` - Value - enabled for configuring XptRemotePrefetch token.
    attr_accessor :xpt_remote_prefetch

    attr_accessor :organization

    # An array of relationships to policyAbstractConfigProfile resources.
    attr_accessor :profiles

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'class_id' => :'ClassId',
        :'object_type' => :'ObjectType',
        :'acs_control_gpu1state' => :'AcsControlGpu1state',
        :'acs_control_gpu2state' => :'AcsControlGpu2state',
        :'acs_control_gpu3state' => :'AcsControlGpu3state',
        :'acs_control_gpu4state' => :'AcsControlGpu4state',
        :'acs_control_gpu5state' => :'AcsControlGpu5state',
        :'acs_control_gpu6state' => :'AcsControlGpu6state',
        :'acs_control_gpu7state' => :'AcsControlGpu7state',
        :'acs_control_gpu8state' => :'AcsControlGpu8state',
        :'acs_control_slot11state' => :'AcsControlSlot11state',
        :'acs_control_slot12state' => :'AcsControlSlot12state',
        :'acs_control_slot13state' => :'AcsControlSlot13state',
        :'acs_control_slot14state' => :'AcsControlSlot14state',
        :'adjacent_cache_line_prefetch' => :'AdjacentCacheLinePrefetch',
        :'advanced_mem_test' => :'AdvancedMemTest',
        :'all_usb_devices' => :'AllUsbDevices',
        :'altitude' => :'Altitude',
        :'aspm_support' => :'AspmSupport',
        :'assert_nmi_on_perr' => :'AssertNmiOnPerr',
        :'assert_nmi_on_serr' => :'AssertNmiOnSerr',
        :'auto_cc_state' => :'AutoCcState',
        :'autonumous_cstate_enable' => :'AutonumousCstateEnable',
        :'baud_rate' => :'BaudRate',
        :'bme_dma_mitigation' => :'BmeDmaMitigation',
        :'boot_option_num_retry' => :'BootOptionNumRetry',
        :'boot_option_re_cool_down' => :'BootOptionReCoolDown',
        :'boot_option_retry' => :'BootOptionRetry',
        :'boot_performance_mode' => :'BootPerformanceMode',
        :'burst_and_postponed_refresh' => :'BurstAndPostponedRefresh',
        :'c1auto_demotion' => :'C1autoDemotion',
        :'c1auto_un_demotion' => :'C1autoUnDemotion',
        :'cbs_cmn_apbdis' => :'CbsCmnApbdis',
        :'cbs_cmn_cpu_cpb' => :'CbsCmnCpuCpb',
        :'cbs_cmn_cpu_gen_downcore_ctrl' => :'CbsCmnCpuGenDowncoreCtrl',
        :'cbs_cmn_cpu_global_cstate_ctrl' => :'CbsCmnCpuGlobalCstateCtrl',
        :'cbs_cmn_cpu_l1stream_hw_prefetcher' => :'CbsCmnCpuL1streamHwPrefetcher',
        :'cbs_cmn_cpu_l2stream_hw_prefetcher' => :'CbsCmnCpuL2streamHwPrefetcher',
        :'cbs_cmn_cpu_smee' => :'CbsCmnCpuSmee',
        :'cbs_cmn_cpu_streaming_stores_ctrl' => :'CbsCmnCpuStreamingStoresCtrl',
        :'cbs_cmn_determinism_slider' => :'CbsCmnDeterminismSlider',
        :'cbs_cmn_efficiency_mode_en' => :'CbsCmnEfficiencyModeEn',
        :'cbs_cmn_fixed_soc_pstate' => :'CbsCmnFixedSocPstate',
        :'cbs_cmn_gnb_nb_iommu' => :'CbsCmnGnbNbIommu',
        :'cbs_cmn_gnb_smu_df_cstates' => :'CbsCmnGnbSmuDfCstates',
        :'cbs_cmn_gnb_smucppc' => :'CbsCmnGnbSmucppc',
        :'cbs_cmn_mem_ctrl_bank_group_swap_ddr4' => :'CbsCmnMemCtrlBankGroupSwapDdr4',
        :'cbs_cmn_mem_map_bank_interleave_ddr4' => :'CbsCmnMemMapBankInterleaveDdr4',
        :'cbs_cmnc_tdp_ctl' => :'CbsCmncTdpCtl',
        :'cbs_cpu_ccd_ctrl_ssp' => :'CbsCpuCcdCtrlSsp',
        :'cbs_cpu_core_ctrl' => :'CbsCpuCoreCtrl',
        :'cbs_cpu_smt_ctrl' => :'CbsCpuSmtCtrl',
        :'cbs_dbg_cpu_snp_mem_cover' => :'CbsDbgCpuSnpMemCover',
        :'cbs_dbg_cpu_snp_mem_size_cover' => :'CbsDbgCpuSnpMemSizeCover',
        :'cbs_df_cmn_acpi_srat_l3numa' => :'CbsDfCmnAcpiSratL3numa',
        :'cbs_df_cmn_dram_nps' => :'CbsDfCmnDramNps',
        :'cbs_df_cmn_mem_intlv' => :'CbsDfCmnMemIntlv',
        :'cbs_df_cmn_mem_intlv_size' => :'CbsDfCmnMemIntlvSize',
        :'cbs_sev_snp_support' => :'CbsSevSnpSupport',
        :'cdn_enable' => :'CdnEnable',
        :'cdn_support' => :'CdnSupport',
        :'channel_inter_leave' => :'ChannelInterLeave',
        :'cisco_adaptive_mem_training' => :'CiscoAdaptiveMemTraining',
        :'cisco_debug_level' => :'CiscoDebugLevel',
        :'cisco_oprom_launch_optimization' => :'CiscoOpromLaunchOptimization',
        :'cisco_xgmi_max_speed' => :'CiscoXgmiMaxSpeed',
        :'cke_low_policy' => :'CkeLowPolicy',
        :'closed_loop_therm_throtl' => :'ClosedLoopThermThrotl',
        :'cmci_enable' => :'CmciEnable',
        :'config_tdp' => :'ConfigTdp',
        :'config_tdp_level' => :'ConfigTdpLevel',
        :'console_redirection' => :'ConsoleRedirection',
        :'core_multi_processing' => :'CoreMultiProcessing',
        :'cpu_energy_performance' => :'CpuEnergyPerformance',
        :'cpu_frequency_floor' => :'CpuFrequencyFloor',
        :'cpu_perf_enhancement' => :'CpuPerfEnhancement',
        :'cpu_performance' => :'CpuPerformance',
        :'cpu_power_management' => :'CpuPowerManagement',
        :'cr_qos' => :'CrQos',
        :'crfastgo_config' => :'CrfastgoConfig',
        :'dcpmm_firmware_downgrade' => :'DcpmmFirmwareDowngrade',
        :'demand_scrub' => :'DemandScrub',
        :'direct_cache_access' => :'DirectCacheAccess',
        :'dram_clock_throttling' => :'DramClockThrottling',
        :'dram_refresh_rate' => :'DramRefreshRate',
        :'dram_sw_thermal_throttling' => :'DramSwThermalThrottling',
        :'eadr_support' => :'EadrSupport',
        :'edpc_en' => :'EdpcEn',
        :'enable_clock_spread_spec' => :'EnableClockSpreadSpec',
        :'enable_mktme' => :'EnableMktme',
        :'enable_sgx' => :'EnableSgx',
        :'enable_tme' => :'EnableTme',
        :'energy_efficient_turbo' => :'EnergyEfficientTurbo',
        :'eng_perf_tuning' => :'EngPerfTuning',
        :'enhanced_intel_speed_step_tech' => :'EnhancedIntelSpeedStepTech',
        :'epoch_update' => :'EpochUpdate',
        :'epp_enable' => :'EppEnable',
        :'epp_profile' => :'EppProfile',
        :'execute_disable_bit' => :'ExecuteDisableBit',
        :'extended_apic' => :'ExtendedApic',
        :'flow_control' => :'FlowControl',
        :'frb2enable' => :'Frb2enable',
        :'hardware_prefetch' => :'HardwarePrefetch',
        :'hwpm_enable' => :'HwpmEnable',
        :'imc_interleave' => :'ImcInterleave',
        :'intel_dynamic_speed_select' => :'IntelDynamicSpeedSelect',
        :'intel_hyper_threading_tech' => :'IntelHyperThreadingTech',
        :'intel_speed_select' => :'IntelSpeedSelect',
        :'intel_turbo_boost_tech' => :'IntelTurboBoostTech',
        :'intel_virtualization_technology' => :'IntelVirtualizationTechnology',
        :'intel_vt_for_directed_io' => :'IntelVtForDirectedIo',
        :'intel_vtd_coherency_support' => :'IntelVtdCoherencySupport',
        :'intel_vtd_interrupt_remapping' => :'IntelVtdInterruptRemapping',
        :'intel_vtd_pass_through_dma_support' => :'IntelVtdPassThroughDmaSupport',
        :'intel_vtdats_support' => :'IntelVtdatsSupport',
        :'ioh_error_enable' => :'IohErrorEnable',
        :'ioh_resource' => :'IohResource',
        :'ip_prefetch' => :'IpPrefetch',
        :'ipv4http' => :'Ipv4http',
        :'ipv4pxe' => :'Ipv4pxe',
        :'ipv6http' => :'Ipv6http',
        :'ipv6pxe' => :'Ipv6pxe',
        :'kti_prefetch' => :'KtiPrefetch',
        :'legacy_os_redirection' => :'LegacyOsRedirection',
        :'legacy_usb_support' => :'LegacyUsbSupport',
        :'llc_alloc' => :'LlcAlloc',
        :'llc_prefetch' => :'LlcPrefetch',
        :'lom_port0state' => :'LomPort0state',
        :'lom_port1state' => :'LomPort1state',
        :'lom_port2state' => :'LomPort2state',
        :'lom_port3state' => :'LomPort3state',
        :'lom_ports_all_state' => :'LomPortsAllState',
        :'lv_ddr_mode' => :'LvDdrMode',
        :'make_device_non_bootable' => :'MakeDeviceNonBootable',
        :'memory_bandwidth_boost' => :'MemoryBandwidthBoost',
        :'memory_inter_leave' => :'MemoryInterLeave',
        :'memory_mapped_io_above4gb' => :'MemoryMappedIoAbove4gb',
        :'memory_refresh_rate' => :'MemoryRefreshRate',
        :'memory_size_limit' => :'MemorySizeLimit',
        :'memory_thermal_throttling' => :'MemoryThermalThrottling',
        :'mirroring_mode' => :'MirroringMode',
        :'mmcfg_base' => :'MmcfgBase',
        :'network_stack' => :'NetworkStack',
        :'numa_optimized' => :'NumaOptimized',
        :'nvmdimm_perform_config' => :'NvmdimmPerformConfig',
        :'onboard10gbit_lom' => :'Onboard10gbitLom',
        :'onboard_gbit_lom' => :'OnboardGbitLom',
        :'onboard_scu_storage_support' => :'OnboardScuStorageSupport',
        :'onboard_scu_storage_sw_stack' => :'OnboardScuStorageSwStack',
        :'operation_mode' => :'OperationMode',
        :'os_boot_watchdog_timer' => :'OsBootWatchdogTimer',
        :'os_boot_watchdog_timer_policy' => :'OsBootWatchdogTimerPolicy',
        :'os_boot_watchdog_timer_timeout' => :'OsBootWatchdogTimerTimeout',
        :'out_of_band_mgmt_port' => :'OutOfBandMgmtPort',
        :'package_cstate_limit' => :'PackageCstateLimit',
        :'panic_high_watermark' => :'PanicHighWatermark',
        :'partial_cache_line_sparing' => :'PartialCacheLineSparing',
        :'partial_mirror_mode_config' => :'PartialMirrorModeConfig',
        :'partial_mirror_percent' => :'PartialMirrorPercent',
        :'partial_mirror_value1' => :'PartialMirrorValue1',
        :'partial_mirror_value2' => :'PartialMirrorValue2',
        :'partial_mirror_value3' => :'PartialMirrorValue3',
        :'partial_mirror_value4' => :'PartialMirrorValue4',
        :'patrol_scrub' => :'PatrolScrub',
        :'patrol_scrub_duration' => :'PatrolScrubDuration',
        :'pc_ie_ras_support' => :'PcIeRasSupport',
        :'pc_ie_ssd_hot_plug_support' => :'PcIeSsdHotPlugSupport',
        :'pch_usb30mode' => :'PchUsb30mode',
        :'pci_option_ro_ms' => :'PciOptionRoMs',
        :'pci_rom_clp' => :'PciRomClp',
        :'pcie_ari_support' => :'PcieAriSupport',
        :'pcie_pll_ssc' => :'PciePllSsc',
        :'pcie_slot_mraid1link_speed' => :'PcieSlotMraid1linkSpeed',
        :'pcie_slot_mraid1option_rom' => :'PcieSlotMraid1optionRom',
        :'pcie_slot_mraid2link_speed' => :'PcieSlotMraid2linkSpeed',
        :'pcie_slot_mraid2option_rom' => :'PcieSlotMraid2optionRom',
        :'pcie_slot_mstorraid_link_speed' => :'PcieSlotMstorraidLinkSpeed',
        :'pcie_slot_mstorraid_option_rom' => :'PcieSlotMstorraidOptionRom',
        :'pcie_slot_nvme1link_speed' => :'PcieSlotNvme1linkSpeed',
        :'pcie_slot_nvme1option_rom' => :'PcieSlotNvme1optionRom',
        :'pcie_slot_nvme2link_speed' => :'PcieSlotNvme2linkSpeed',
        :'pcie_slot_nvme2option_rom' => :'PcieSlotNvme2optionRom',
        :'pcie_slot_nvme3link_speed' => :'PcieSlotNvme3linkSpeed',
        :'pcie_slot_nvme3option_rom' => :'PcieSlotNvme3optionRom',
        :'pcie_slot_nvme4link_speed' => :'PcieSlotNvme4linkSpeed',
        :'pcie_slot_nvme4option_rom' => :'PcieSlotNvme4optionRom',
        :'pcie_slot_nvme5link_speed' => :'PcieSlotNvme5linkSpeed',
        :'pcie_slot_nvme5option_rom' => :'PcieSlotNvme5optionRom',
        :'pcie_slot_nvme6link_speed' => :'PcieSlotNvme6linkSpeed',
        :'pcie_slot_nvme6option_rom' => :'PcieSlotNvme6optionRom',
        :'pcie_slots_cdn_enable' => :'PcieSlotsCdnEnable',
        :'pop_support' => :'PopSupport',
        :'post_error_pause' => :'PostErrorPause',
        :'post_package_repair' => :'PostPackageRepair',
        :'processor_c1e' => :'ProcessorC1e',
        :'processor_c3report' => :'ProcessorC3report',
        :'processor_c6report' => :'ProcessorC6report',
        :'processor_cstate' => :'ProcessorCstate',
        :'psata' => :'Psata',
        :'pstate_coord_type' => :'PstateCoordType',
        :'putty_key_pad' => :'PuttyKeyPad',
        :'pwr_perf_tuning' => :'PwrPerfTuning',
        :'qpi_link_frequency' => :'QpiLinkFrequency',
        :'qpi_link_speed' => :'QpiLinkSpeed',
        :'qpi_snoop_mode' => :'QpiSnoopMode',
        :'rank_inter_leave' => :'RankInterLeave',
        :'redirection_after_post' => :'RedirectionAfterPost',
        :'sata_mode_select' => :'SataModeSelect',
        :'select_memory_ras_configuration' => :'SelectMemoryRasConfiguration',
        :'select_ppr_type' => :'SelectPprType',
        :'serial_port_aenable' => :'SerialPortAenable',
        :'sev' => :'Sev',
        :'sgx_auto_registration_agent' => :'SgxAutoRegistrationAgent',
        :'sgx_epoch0' => :'SgxEpoch0',
        :'sgx_epoch1' => :'SgxEpoch1',
        :'sgx_factory_reset' => :'SgxFactoryReset',
        :'sgx_le_pub_key_hash0' => :'SgxLePubKeyHash0',
        :'sgx_le_pub_key_hash1' => :'SgxLePubKeyHash1',
        :'sgx_le_pub_key_hash2' => :'SgxLePubKeyHash2',
        :'sgx_le_pub_key_hash3' => :'SgxLePubKeyHash3',
        :'sgx_le_wr' => :'SgxLeWr',
        :'sgx_package_info_in_band_access' => :'SgxPackageInfoInBandAccess',
        :'sgx_qos' => :'SgxQos',
        :'sha1pcr_bank' => :'Sha1pcrBank',
        :'sha256pcr_bank' => :'Sha256pcrBank',
        :'single_pctl_enable' => :'SinglePctlEnable',
        :'slot10link_speed' => :'Slot10linkSpeed',
        :'slot10state' => :'Slot10state',
        :'slot11link_speed' => :'Slot11linkSpeed',
        :'slot11state' => :'Slot11state',
        :'slot12link_speed' => :'Slot12linkSpeed',
        :'slot12state' => :'Slot12state',
        :'slot13state' => :'Slot13state',
        :'slot14state' => :'Slot14state',
        :'slot1link_speed' => :'Slot1linkSpeed',
        :'slot1state' => :'Slot1state',
        :'slot2link_speed' => :'Slot2linkSpeed',
        :'slot2state' => :'Slot2state',
        :'slot3link_speed' => :'Slot3linkSpeed',
        :'slot3state' => :'Slot3state',
        :'slot4link_speed' => :'Slot4linkSpeed',
        :'slot4state' => :'Slot4state',
        :'slot5link_speed' => :'Slot5linkSpeed',
        :'slot5state' => :'Slot5state',
        :'slot6link_speed' => :'Slot6linkSpeed',
        :'slot6state' => :'Slot6state',
        :'slot7link_speed' => :'Slot7linkSpeed',
        :'slot7state' => :'Slot7state',
        :'slot8link_speed' => :'Slot8linkSpeed',
        :'slot8state' => :'Slot8state',
        :'slot9link_speed' => :'Slot9linkSpeed',
        :'slot9state' => :'Slot9state',
        :'slot_flom_link_speed' => :'SlotFlomLinkSpeed',
        :'slot_front_nvme10link_speed' => :'SlotFrontNvme10linkSpeed',
        :'slot_front_nvme10option_rom' => :'SlotFrontNvme10optionRom',
        :'slot_front_nvme11link_speed' => :'SlotFrontNvme11linkSpeed',
        :'slot_front_nvme11option_rom' => :'SlotFrontNvme11optionRom',
        :'slot_front_nvme12link_speed' => :'SlotFrontNvme12linkSpeed',
        :'slot_front_nvme12option_rom' => :'SlotFrontNvme12optionRom',
        :'slot_front_nvme13option_rom' => :'SlotFrontNvme13optionRom',
        :'slot_front_nvme14option_rom' => :'SlotFrontNvme14optionRom',
        :'slot_front_nvme15option_rom' => :'SlotFrontNvme15optionRom',
        :'slot_front_nvme16option_rom' => :'SlotFrontNvme16optionRom',
        :'slot_front_nvme17option_rom' => :'SlotFrontNvme17optionRom',
        :'slot_front_nvme18option_rom' => :'SlotFrontNvme18optionRom',
        :'slot_front_nvme19option_rom' => :'SlotFrontNvme19optionRom',
        :'slot_front_nvme1link_speed' => :'SlotFrontNvme1linkSpeed',
        :'slot_front_nvme1option_rom' => :'SlotFrontNvme1optionRom',
        :'slot_front_nvme20option_rom' => :'SlotFrontNvme20optionRom',
        :'slot_front_nvme21option_rom' => :'SlotFrontNvme21optionRom',
        :'slot_front_nvme22option_rom' => :'SlotFrontNvme22optionRom',
        :'slot_front_nvme23option_rom' => :'SlotFrontNvme23optionRom',
        :'slot_front_nvme24option_rom' => :'SlotFrontNvme24optionRom',
        :'slot_front_nvme2link_speed' => :'SlotFrontNvme2linkSpeed',
        :'slot_front_nvme2option_rom' => :'SlotFrontNvme2optionRom',
        :'slot_front_nvme3link_speed' => :'SlotFrontNvme3linkSpeed',
        :'slot_front_nvme3option_rom' => :'SlotFrontNvme3optionRom',
        :'slot_front_nvme4link_speed' => :'SlotFrontNvme4linkSpeed',
        :'slot_front_nvme4option_rom' => :'SlotFrontNvme4optionRom',
        :'slot_front_nvme5link_speed' => :'SlotFrontNvme5linkSpeed',
        :'slot_front_nvme5option_rom' => :'SlotFrontNvme5optionRom',
        :'slot_front_nvme6link_speed' => :'SlotFrontNvme6linkSpeed',
        :'slot_front_nvme6option_rom' => :'SlotFrontNvme6optionRom',
        :'slot_front_nvme7link_speed' => :'SlotFrontNvme7linkSpeed',
        :'slot_front_nvme7option_rom' => :'SlotFrontNvme7optionRom',
        :'slot_front_nvme8link_speed' => :'SlotFrontNvme8linkSpeed',
        :'slot_front_nvme8option_rom' => :'SlotFrontNvme8optionRom',
        :'slot_front_nvme9link_speed' => :'SlotFrontNvme9linkSpeed',
        :'slot_front_nvme9option_rom' => :'SlotFrontNvme9optionRom',
        :'slot_front_slot5link_speed' => :'SlotFrontSlot5linkSpeed',
        :'slot_front_slot6link_speed' => :'SlotFrontSlot6linkSpeed',
        :'slot_gpu1state' => :'SlotGpu1state',
        :'slot_gpu2state' => :'SlotGpu2state',
        :'slot_gpu3state' => :'SlotGpu3state',
        :'slot_gpu4state' => :'SlotGpu4state',
        :'slot_gpu5state' => :'SlotGpu5state',
        :'slot_gpu6state' => :'SlotGpu6state',
        :'slot_gpu7state' => :'SlotGpu7state',
        :'slot_gpu8state' => :'SlotGpu8state',
        :'slot_hba_link_speed' => :'SlotHbaLinkSpeed',
        :'slot_hba_state' => :'SlotHbaState',
        :'slot_lom1link' => :'SlotLom1link',
        :'slot_lom2link' => :'SlotLom2link',
        :'slot_mezz_state' => :'SlotMezzState',
        :'slot_mlom_link_speed' => :'SlotMlomLinkSpeed',
        :'slot_mlom_state' => :'SlotMlomState',
        :'slot_mraid_link_speed' => :'SlotMraidLinkSpeed',
        :'slot_mraid_state' => :'SlotMraidState',
        :'slot_n10state' => :'SlotN10state',
        :'slot_n11state' => :'SlotN11state',
        :'slot_n12state' => :'SlotN12state',
        :'slot_n13state' => :'SlotN13state',
        :'slot_n14state' => :'SlotN14state',
        :'slot_n15state' => :'SlotN15state',
        :'slot_n16state' => :'SlotN16state',
        :'slot_n17state' => :'SlotN17state',
        :'slot_n18state' => :'SlotN18state',
        :'slot_n19state' => :'SlotN19state',
        :'slot_n1state' => :'SlotN1state',
        :'slot_n20state' => :'SlotN20state',
        :'slot_n21state' => :'SlotN21state',
        :'slot_n22state' => :'SlotN22state',
        :'slot_n23state' => :'SlotN23state',
        :'slot_n24state' => :'SlotN24state',
        :'slot_n2state' => :'SlotN2state',
        :'slot_n3state' => :'SlotN3state',
        :'slot_n4state' => :'SlotN4state',
        :'slot_n5state' => :'SlotN5state',
        :'slot_n6state' => :'SlotN6state',
        :'slot_n7state' => :'SlotN7state',
        :'slot_n8state' => :'SlotN8state',
        :'slot_n9state' => :'SlotN9state',
        :'slot_raid_link_speed' => :'SlotRaidLinkSpeed',
        :'slot_raid_state' => :'SlotRaidState',
        :'slot_rear_nvme1link_speed' => :'SlotRearNvme1linkSpeed',
        :'slot_rear_nvme1state' => :'SlotRearNvme1state',
        :'slot_rear_nvme2link_speed' => :'SlotRearNvme2linkSpeed',
        :'slot_rear_nvme2state' => :'SlotRearNvme2state',
        :'slot_rear_nvme3link_speed' => :'SlotRearNvme3linkSpeed',
        :'slot_rear_nvme3state' => :'SlotRearNvme3state',
        :'slot_rear_nvme4link_speed' => :'SlotRearNvme4linkSpeed',
        :'slot_rear_nvme4state' => :'SlotRearNvme4state',
        :'slot_rear_nvme5state' => :'SlotRearNvme5state',
        :'slot_rear_nvme6state' => :'SlotRearNvme6state',
        :'slot_rear_nvme7state' => :'SlotRearNvme7state',
        :'slot_rear_nvme8state' => :'SlotRearNvme8state',
        :'slot_riser1link_speed' => :'SlotRiser1linkSpeed',
        :'slot_riser1slot1link_speed' => :'SlotRiser1slot1linkSpeed',
        :'slot_riser1slot2link_speed' => :'SlotRiser1slot2linkSpeed',
        :'slot_riser1slot3link_speed' => :'SlotRiser1slot3linkSpeed',
        :'slot_riser2link_speed' => :'SlotRiser2linkSpeed',
        :'slot_riser2slot4link_speed' => :'SlotRiser2slot4linkSpeed',
        :'slot_riser2slot5link_speed' => :'SlotRiser2slot5linkSpeed',
        :'slot_riser2slot6link_speed' => :'SlotRiser2slot6linkSpeed',
        :'slot_sas_state' => :'SlotSasState',
        :'slot_ssd_slot1link_speed' => :'SlotSsdSlot1linkSpeed',
        :'slot_ssd_slot2link_speed' => :'SlotSsdSlot2linkSpeed',
        :'smee' => :'Smee',
        :'smt_mode' => :'SmtMode',
        :'snc' => :'Snc',
        :'snoopy_mode_for2lm' => :'SnoopyModeFor2lm',
        :'snoopy_mode_for_ad' => :'SnoopyModeForAd',
        :'sparing_mode' => :'SparingMode',
        :'sr_iov' => :'SrIov',
        :'streamer_prefetch' => :'StreamerPrefetch',
        :'svm_mode' => :'SvmMode',
        :'terminal_type' => :'TerminalType',
        :'tpm_control' => :'TpmControl',
        :'tpm_pending_operation' => :'TpmPendingOperation',
        :'tpm_support' => :'TpmSupport',
        :'tsme' => :'Tsme',
        :'txt_support' => :'TxtSupport',
        :'ucsm_boot_order_rule' => :'UcsmBootOrderRule',
        :'ufs_disable' => :'UfsDisable',
        :'uma_based_clustering' => :'UmaBasedClustering',
        :'upi_link_enablement' => :'UpiLinkEnablement',
        :'upi_power_management' => :'UpiPowerManagement',
        :'usb_emul6064' => :'UsbEmul6064',
        :'usb_port_front' => :'UsbPortFront',
        :'usb_port_internal' => :'UsbPortInternal',
        :'usb_port_kvm' => :'UsbPortKvm',
        :'usb_port_rear' => :'UsbPortRear',
        :'usb_port_sd_card' => :'UsbPortSdCard',
        :'usb_port_vmedia' => :'UsbPortVmedia',
        :'usb_xhci_support' => :'UsbXhciSupport',
        :'vga_priority' => :'VgaPriority',
        :'virtual_numa' => :'VirtualNuma',
        :'vmd_enable' => :'VmdEnable',
        :'vol_memory_mode' => :'VolMemoryMode',
        :'work_load_config' => :'WorkLoadConfig',
        :'xpt_prefetch' => :'XptPrefetch',
        :'xpt_remote_prefetch' => :'XptRemotePrefetch',
        :'organization' => :'Organization',
        :'profiles' => :'Profiles'
      }
    end

    # Returns all the JSON keys this model knows about, including the ones defined in its parent(s)
    def self.acceptable_attributes
      attribute_map.values.concat(superclass.acceptable_attributes)
    end

    # Returns the key-value map of all the JSON attributes this model knows about, including the ones defined in its parent(s)
    def self.acceptable_attribute_map
      attribute_map.merge(superclass.acceptable_attribute_map)
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'class_id' => :'String',
        :'object_type' => :'String',
        :'acs_control_gpu1state' => :'String',
        :'acs_control_gpu2state' => :'String',
        :'acs_control_gpu3state' => :'String',
        :'acs_control_gpu4state' => :'String',
        :'acs_control_gpu5state' => :'String',
        :'acs_control_gpu6state' => :'String',
        :'acs_control_gpu7state' => :'String',
        :'acs_control_gpu8state' => :'String',
        :'acs_control_slot11state' => :'String',
        :'acs_control_slot12state' => :'String',
        :'acs_control_slot13state' => :'String',
        :'acs_control_slot14state' => :'String',
        :'adjacent_cache_line_prefetch' => :'String',
        :'advanced_mem_test' => :'String',
        :'all_usb_devices' => :'String',
        :'altitude' => :'String',
        :'aspm_support' => :'String',
        :'assert_nmi_on_perr' => :'String',
        :'assert_nmi_on_serr' => :'String',
        :'auto_cc_state' => :'String',
        :'autonumous_cstate_enable' => :'String',
        :'baud_rate' => :'String',
        :'bme_dma_mitigation' => :'String',
        :'boot_option_num_retry' => :'String',
        :'boot_option_re_cool_down' => :'String',
        :'boot_option_retry' => :'String',
        :'boot_performance_mode' => :'String',
        :'burst_and_postponed_refresh' => :'String',
        :'c1auto_demotion' => :'String',
        :'c1auto_un_demotion' => :'String',
        :'cbs_cmn_apbdis' => :'String',
        :'cbs_cmn_cpu_cpb' => :'String',
        :'cbs_cmn_cpu_gen_downcore_ctrl' => :'String',
        :'cbs_cmn_cpu_global_cstate_ctrl' => :'String',
        :'cbs_cmn_cpu_l1stream_hw_prefetcher' => :'String',
        :'cbs_cmn_cpu_l2stream_hw_prefetcher' => :'String',
        :'cbs_cmn_cpu_smee' => :'String',
        :'cbs_cmn_cpu_streaming_stores_ctrl' => :'String',
        :'cbs_cmn_determinism_slider' => :'String',
        :'cbs_cmn_efficiency_mode_en' => :'String',
        :'cbs_cmn_fixed_soc_pstate' => :'String',
        :'cbs_cmn_gnb_nb_iommu' => :'String',
        :'cbs_cmn_gnb_smu_df_cstates' => :'String',
        :'cbs_cmn_gnb_smucppc' => :'String',
        :'cbs_cmn_mem_ctrl_bank_group_swap_ddr4' => :'String',
        :'cbs_cmn_mem_map_bank_interleave_ddr4' => :'String',
        :'cbs_cmnc_tdp_ctl' => :'String',
        :'cbs_cpu_ccd_ctrl_ssp' => :'String',
        :'cbs_cpu_core_ctrl' => :'String',
        :'cbs_cpu_smt_ctrl' => :'String',
        :'cbs_dbg_cpu_snp_mem_cover' => :'String',
        :'cbs_dbg_cpu_snp_mem_size_cover' => :'String',
        :'cbs_df_cmn_acpi_srat_l3numa' => :'String',
        :'cbs_df_cmn_dram_nps' => :'String',
        :'cbs_df_cmn_mem_intlv' => :'String',
        :'cbs_df_cmn_mem_intlv_size' => :'String',
        :'cbs_sev_snp_support' => :'String',
        :'cdn_enable' => :'String',
        :'cdn_support' => :'String',
        :'channel_inter_leave' => :'String',
        :'cisco_adaptive_mem_training' => :'String',
        :'cisco_debug_level' => :'String',
        :'cisco_oprom_launch_optimization' => :'String',
        :'cisco_xgmi_max_speed' => :'String',
        :'cke_low_policy' => :'String',
        :'closed_loop_therm_throtl' => :'String',
        :'cmci_enable' => :'String',
        :'config_tdp' => :'String',
        :'config_tdp_level' => :'String',
        :'console_redirection' => :'String',
        :'core_multi_processing' => :'String',
        :'cpu_energy_performance' => :'String',
        :'cpu_frequency_floor' => :'String',
        :'cpu_perf_enhancement' => :'String',
        :'cpu_performance' => :'String',
        :'cpu_power_management' => :'String',
        :'cr_qos' => :'String',
        :'crfastgo_config' => :'String',
        :'dcpmm_firmware_downgrade' => :'String',
        :'demand_scrub' => :'String',
        :'direct_cache_access' => :'String',
        :'dram_clock_throttling' => :'String',
        :'dram_refresh_rate' => :'String',
        :'dram_sw_thermal_throttling' => :'String',
        :'eadr_support' => :'String',
        :'edpc_en' => :'String',
        :'enable_clock_spread_spec' => :'String',
        :'enable_mktme' => :'String',
        :'enable_sgx' => :'String',
        :'enable_tme' => :'String',
        :'energy_efficient_turbo' => :'String',
        :'eng_perf_tuning' => :'String',
        :'enhanced_intel_speed_step_tech' => :'String',
        :'epoch_update' => :'String',
        :'epp_enable' => :'String',
        :'epp_profile' => :'String',
        :'execute_disable_bit' => :'String',
        :'extended_apic' => :'String',
        :'flow_control' => :'String',
        :'frb2enable' => :'String',
        :'hardware_prefetch' => :'String',
        :'hwpm_enable' => :'String',
        :'imc_interleave' => :'String',
        :'intel_dynamic_speed_select' => :'String',
        :'intel_hyper_threading_tech' => :'String',
        :'intel_speed_select' => :'String',
        :'intel_turbo_boost_tech' => :'String',
        :'intel_virtualization_technology' => :'String',
        :'intel_vt_for_directed_io' => :'String',
        :'intel_vtd_coherency_support' => :'String',
        :'intel_vtd_interrupt_remapping' => :'String',
        :'intel_vtd_pass_through_dma_support' => :'String',
        :'intel_vtdats_support' => :'String',
        :'ioh_error_enable' => :'String',
        :'ioh_resource' => :'String',
        :'ip_prefetch' => :'String',
        :'ipv4http' => :'String',
        :'ipv4pxe' => :'String',
        :'ipv6http' => :'String',
        :'ipv6pxe' => :'String',
        :'kti_prefetch' => :'String',
        :'legacy_os_redirection' => :'String',
        :'legacy_usb_support' => :'String',
        :'llc_alloc' => :'String',
        :'llc_prefetch' => :'String',
        :'lom_port0state' => :'String',
        :'lom_port1state' => :'String',
        :'lom_port2state' => :'String',
        :'lom_port3state' => :'String',
        :'lom_ports_all_state' => :'String',
        :'lv_ddr_mode' => :'String',
        :'make_device_non_bootable' => :'String',
        :'memory_bandwidth_boost' => :'String',
        :'memory_inter_leave' => :'String',
        :'memory_mapped_io_above4gb' => :'String',
        :'memory_refresh_rate' => :'String',
        :'memory_size_limit' => :'String',
        :'memory_thermal_throttling' => :'String',
        :'mirroring_mode' => :'String',
        :'mmcfg_base' => :'String',
        :'network_stack' => :'String',
        :'numa_optimized' => :'String',
        :'nvmdimm_perform_config' => :'String',
        :'onboard10gbit_lom' => :'String',
        :'onboard_gbit_lom' => :'String',
        :'onboard_scu_storage_support' => :'String',
        :'onboard_scu_storage_sw_stack' => :'String',
        :'operation_mode' => :'String',
        :'os_boot_watchdog_timer' => :'String',
        :'os_boot_watchdog_timer_policy' => :'String',
        :'os_boot_watchdog_timer_timeout' => :'String',
        :'out_of_band_mgmt_port' => :'String',
        :'package_cstate_limit' => :'String',
        :'panic_high_watermark' => :'String',
        :'partial_cache_line_sparing' => :'String',
        :'partial_mirror_mode_config' => :'String',
        :'partial_mirror_percent' => :'String',
        :'partial_mirror_value1' => :'String',
        :'partial_mirror_value2' => :'String',
        :'partial_mirror_value3' => :'String',
        :'partial_mirror_value4' => :'String',
        :'patrol_scrub' => :'String',
        :'patrol_scrub_duration' => :'String',
        :'pc_ie_ras_support' => :'String',
        :'pc_ie_ssd_hot_plug_support' => :'String',
        :'pch_usb30mode' => :'String',
        :'pci_option_ro_ms' => :'String',
        :'pci_rom_clp' => :'String',
        :'pcie_ari_support' => :'String',
        :'pcie_pll_ssc' => :'String',
        :'pcie_slot_mraid1link_speed' => :'String',
        :'pcie_slot_mraid1option_rom' => :'String',
        :'pcie_slot_mraid2link_speed' => :'String',
        :'pcie_slot_mraid2option_rom' => :'String',
        :'pcie_slot_mstorraid_link_speed' => :'String',
        :'pcie_slot_mstorraid_option_rom' => :'String',
        :'pcie_slot_nvme1link_speed' => :'String',
        :'pcie_slot_nvme1option_rom' => :'String',
        :'pcie_slot_nvme2link_speed' => :'String',
        :'pcie_slot_nvme2option_rom' => :'String',
        :'pcie_slot_nvme3link_speed' => :'String',
        :'pcie_slot_nvme3option_rom' => :'String',
        :'pcie_slot_nvme4link_speed' => :'String',
        :'pcie_slot_nvme4option_rom' => :'String',
        :'pcie_slot_nvme5link_speed' => :'String',
        :'pcie_slot_nvme5option_rom' => :'String',
        :'pcie_slot_nvme6link_speed' => :'String',
        :'pcie_slot_nvme6option_rom' => :'String',
        :'pcie_slots_cdn_enable' => :'String',
        :'pop_support' => :'String',
        :'post_error_pause' => :'String',
        :'post_package_repair' => :'String',
        :'processor_c1e' => :'String',
        :'processor_c3report' => :'String',
        :'processor_c6report' => :'String',
        :'processor_cstate' => :'String',
        :'psata' => :'String',
        :'pstate_coord_type' => :'String',
        :'putty_key_pad' => :'String',
        :'pwr_perf_tuning' => :'String',
        :'qpi_link_frequency' => :'String',
        :'qpi_link_speed' => :'String',
        :'qpi_snoop_mode' => :'String',
        :'rank_inter_leave' => :'String',
        :'redirection_after_post' => :'String',
        :'sata_mode_select' => :'String',
        :'select_memory_ras_configuration' => :'String',
        :'select_ppr_type' => :'String',
        :'serial_port_aenable' => :'String',
        :'sev' => :'String',
        :'sgx_auto_registration_agent' => :'String',
        :'sgx_epoch0' => :'String',
        :'sgx_epoch1' => :'String',
        :'sgx_factory_reset' => :'String',
        :'sgx_le_pub_key_hash0' => :'String',
        :'sgx_le_pub_key_hash1' => :'String',
        :'sgx_le_pub_key_hash2' => :'String',
        :'sgx_le_pub_key_hash3' => :'String',
        :'sgx_le_wr' => :'String',
        :'sgx_package_info_in_band_access' => :'String',
        :'sgx_qos' => :'String',
        :'sha1pcr_bank' => :'String',
        :'sha256pcr_bank' => :'String',
        :'single_pctl_enable' => :'String',
        :'slot10link_speed' => :'String',
        :'slot10state' => :'String',
        :'slot11link_speed' => :'String',
        :'slot11state' => :'String',
        :'slot12link_speed' => :'String',
        :'slot12state' => :'String',
        :'slot13state' => :'String',
        :'slot14state' => :'String',
        :'slot1link_speed' => :'String',
        :'slot1state' => :'String',
        :'slot2link_speed' => :'String',
        :'slot2state' => :'String',
        :'slot3link_speed' => :'String',
        :'slot3state' => :'String',
        :'slot4link_speed' => :'String',
        :'slot4state' => :'String',
        :'slot5link_speed' => :'String',
        :'slot5state' => :'String',
        :'slot6link_speed' => :'String',
        :'slot6state' => :'String',
        :'slot7link_speed' => :'String',
        :'slot7state' => :'String',
        :'slot8link_speed' => :'String',
        :'slot8state' => :'String',
        :'slot9link_speed' => :'String',
        :'slot9state' => :'String',
        :'slot_flom_link_speed' => :'String',
        :'slot_front_nvme10link_speed' => :'String',
        :'slot_front_nvme10option_rom' => :'String',
        :'slot_front_nvme11link_speed' => :'String',
        :'slot_front_nvme11option_rom' => :'String',
        :'slot_front_nvme12link_speed' => :'String',
        :'slot_front_nvme12option_rom' => :'String',
        :'slot_front_nvme13option_rom' => :'String',
        :'slot_front_nvme14option_rom' => :'String',
        :'slot_front_nvme15option_rom' => :'String',
        :'slot_front_nvme16option_rom' => :'String',
        :'slot_front_nvme17option_rom' => :'String',
        :'slot_front_nvme18option_rom' => :'String',
        :'slot_front_nvme19option_rom' => :'String',
        :'slot_front_nvme1link_speed' => :'String',
        :'slot_front_nvme1option_rom' => :'String',
        :'slot_front_nvme20option_rom' => :'String',
        :'slot_front_nvme21option_rom' => :'String',
        :'slot_front_nvme22option_rom' => :'String',
        :'slot_front_nvme23option_rom' => :'String',
        :'slot_front_nvme24option_rom' => :'String',
        :'slot_front_nvme2link_speed' => :'String',
        :'slot_front_nvme2option_rom' => :'String',
        :'slot_front_nvme3link_speed' => :'String',
        :'slot_front_nvme3option_rom' => :'String',
        :'slot_front_nvme4link_speed' => :'String',
        :'slot_front_nvme4option_rom' => :'String',
        :'slot_front_nvme5link_speed' => :'String',
        :'slot_front_nvme5option_rom' => :'String',
        :'slot_front_nvme6link_speed' => :'String',
        :'slot_front_nvme6option_rom' => :'String',
        :'slot_front_nvme7link_speed' => :'String',
        :'slot_front_nvme7option_rom' => :'String',
        :'slot_front_nvme8link_speed' => :'String',
        :'slot_front_nvme8option_rom' => :'String',
        :'slot_front_nvme9link_speed' => :'String',
        :'slot_front_nvme9option_rom' => :'String',
        :'slot_front_slot5link_speed' => :'String',
        :'slot_front_slot6link_speed' => :'String',
        :'slot_gpu1state' => :'String',
        :'slot_gpu2state' => :'String',
        :'slot_gpu3state' => :'String',
        :'slot_gpu4state' => :'String',
        :'slot_gpu5state' => :'String',
        :'slot_gpu6state' => :'String',
        :'slot_gpu7state' => :'String',
        :'slot_gpu8state' => :'String',
        :'slot_hba_link_speed' => :'String',
        :'slot_hba_state' => :'String',
        :'slot_lom1link' => :'String',
        :'slot_lom2link' => :'String',
        :'slot_mezz_state' => :'String',
        :'slot_mlom_link_speed' => :'String',
        :'slot_mlom_state' => :'String',
        :'slot_mraid_link_speed' => :'String',
        :'slot_mraid_state' => :'String',
        :'slot_n10state' => :'String',
        :'slot_n11state' => :'String',
        :'slot_n12state' => :'String',
        :'slot_n13state' => :'String',
        :'slot_n14state' => :'String',
        :'slot_n15state' => :'String',
        :'slot_n16state' => :'String',
        :'slot_n17state' => :'String',
        :'slot_n18state' => :'String',
        :'slot_n19state' => :'String',
        :'slot_n1state' => :'String',
        :'slot_n20state' => :'String',
        :'slot_n21state' => :'String',
        :'slot_n22state' => :'String',
        :'slot_n23state' => :'String',
        :'slot_n24state' => :'String',
        :'slot_n2state' => :'String',
        :'slot_n3state' => :'String',
        :'slot_n4state' => :'String',
        :'slot_n5state' => :'String',
        :'slot_n6state' => :'String',
        :'slot_n7state' => :'String',
        :'slot_n8state' => :'String',
        :'slot_n9state' => :'String',
        :'slot_raid_link_speed' => :'String',
        :'slot_raid_state' => :'String',
        :'slot_rear_nvme1link_speed' => :'String',
        :'slot_rear_nvme1state' => :'String',
        :'slot_rear_nvme2link_speed' => :'String',
        :'slot_rear_nvme2state' => :'String',
        :'slot_rear_nvme3link_speed' => :'String',
        :'slot_rear_nvme3state' => :'String',
        :'slot_rear_nvme4link_speed' => :'String',
        :'slot_rear_nvme4state' => :'String',
        :'slot_rear_nvme5state' => :'String',
        :'slot_rear_nvme6state' => :'String',
        :'slot_rear_nvme7state' => :'String',
        :'slot_rear_nvme8state' => :'String',
        :'slot_riser1link_speed' => :'String',
        :'slot_riser1slot1link_speed' => :'String',
        :'slot_riser1slot2link_speed' => :'String',
        :'slot_riser1slot3link_speed' => :'String',
        :'slot_riser2link_speed' => :'String',
        :'slot_riser2slot4link_speed' => :'String',
        :'slot_riser2slot5link_speed' => :'String',
        :'slot_riser2slot6link_speed' => :'String',
        :'slot_sas_state' => :'String',
        :'slot_ssd_slot1link_speed' => :'String',
        :'slot_ssd_slot2link_speed' => :'String',
        :'smee' => :'String',
        :'smt_mode' => :'String',
        :'snc' => :'String',
        :'snoopy_mode_for2lm' => :'String',
        :'snoopy_mode_for_ad' => :'String',
        :'sparing_mode' => :'String',
        :'sr_iov' => :'String',
        :'streamer_prefetch' => :'String',
        :'svm_mode' => :'String',
        :'terminal_type' => :'String',
        :'tpm_control' => :'String',
        :'tpm_pending_operation' => :'String',
        :'tpm_support' => :'String',
        :'tsme' => :'String',
        :'txt_support' => :'String',
        :'ucsm_boot_order_rule' => :'String',
        :'ufs_disable' => :'String',
        :'uma_based_clustering' => :'String',
        :'upi_link_enablement' => :'String',
        :'upi_power_management' => :'String',
        :'usb_emul6064' => :'String',
        :'usb_port_front' => :'String',
        :'usb_port_internal' => :'String',
        :'usb_port_kvm' => :'String',
        :'usb_port_rear' => :'String',
        :'usb_port_sd_card' => :'String',
        :'usb_port_vmedia' => :'String',
        :'usb_xhci_support' => :'String',
        :'vga_priority' => :'String',
        :'virtual_numa' => :'String',
        :'vmd_enable' => :'String',
        :'vol_memory_mode' => :'String',
        :'work_load_config' => :'String',
        :'xpt_prefetch' => :'String',
        :'xpt_remote_prefetch' => :'String',
        :'organization' => :'OrganizationOrganizationRelationship',
        :'profiles' => :'Array<PolicyAbstractConfigProfileRelationship>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'profiles'
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'BiosPolicyAllOf',
      :'PolicyAbstractPolicy'
      ]
    end

    # discriminator's property name in OpenAPI v3
    def self.openapi_discriminator_name
      :'ClassId'
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IntersightClient::BiosPolicy` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `#{self.class.name}`. Please check the name to make sure it's valid. List of attributes: " + self.class.acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'class_id')
        self.class_id = attributes[:'class_id']
      else
        self.class_id = 'bios.Policy'
      end

      if attributes.key?(:'object_type')
        self.object_type = attributes[:'object_type']
      else
        self.object_type = 'bios.Policy'
      end

      if attributes.key?(:'acs_control_gpu1state')
        self.acs_control_gpu1state = attributes[:'acs_control_gpu1state']
      else
        self.acs_control_gpu1state = 'platform-default'
      end

      if attributes.key?(:'acs_control_gpu2state')
        self.acs_control_gpu2state = attributes[:'acs_control_gpu2state']
      else
        self.acs_control_gpu2state = 'platform-default'
      end

      if attributes.key?(:'acs_control_gpu3state')
        self.acs_control_gpu3state = attributes[:'acs_control_gpu3state']
      else
        self.acs_control_gpu3state = 'platform-default'
      end

      if attributes.key?(:'acs_control_gpu4state')
        self.acs_control_gpu4state = attributes[:'acs_control_gpu4state']
      else
        self.acs_control_gpu4state = 'platform-default'
      end

      if attributes.key?(:'acs_control_gpu5state')
        self.acs_control_gpu5state = attributes[:'acs_control_gpu5state']
      else
        self.acs_control_gpu5state = 'platform-default'
      end

      if attributes.key?(:'acs_control_gpu6state')
        self.acs_control_gpu6state = attributes[:'acs_control_gpu6state']
      else
        self.acs_control_gpu6state = 'platform-default'
      end

      if attributes.key?(:'acs_control_gpu7state')
        self.acs_control_gpu7state = attributes[:'acs_control_gpu7state']
      else
        self.acs_control_gpu7state = 'platform-default'
      end

      if attributes.key?(:'acs_control_gpu8state')
        self.acs_control_gpu8state = attributes[:'acs_control_gpu8state']
      else
        self.acs_control_gpu8state = 'platform-default'
      end

      if attributes.key?(:'acs_control_slot11state')
        self.acs_control_slot11state = attributes[:'acs_control_slot11state']
      else
        self.acs_control_slot11state = 'platform-default'
      end

      if attributes.key?(:'acs_control_slot12state')
        self.acs_control_slot12state = attributes[:'acs_control_slot12state']
      else
        self.acs_control_slot12state = 'platform-default'
      end

      if attributes.key?(:'acs_control_slot13state')
        self.acs_control_slot13state = attributes[:'acs_control_slot13state']
      else
        self.acs_control_slot13state = 'platform-default'
      end

      if attributes.key?(:'acs_control_slot14state')
        self.acs_control_slot14state = attributes[:'acs_control_slot14state']
      else
        self.acs_control_slot14state = 'platform-default'
      end

      if attributes.key?(:'adjacent_cache_line_prefetch')
        self.adjacent_cache_line_prefetch = attributes[:'adjacent_cache_line_prefetch']
      else
        self.adjacent_cache_line_prefetch = 'platform-default'
      end

      if attributes.key?(:'advanced_mem_test')
        self.advanced_mem_test = attributes[:'advanced_mem_test']
      else
        self.advanced_mem_test = 'platform-default'
      end

      if attributes.key?(:'all_usb_devices')
        self.all_usb_devices = attributes[:'all_usb_devices']
      else
        self.all_usb_devices = 'platform-default'
      end

      if attributes.key?(:'altitude')
        self.altitude = attributes[:'altitude']
      else
        self.altitude = 'platform-default'
      end

      if attributes.key?(:'aspm_support')
        self.aspm_support = attributes[:'aspm_support']
      else
        self.aspm_support = 'platform-default'
      end

      if attributes.key?(:'assert_nmi_on_perr')
        self.assert_nmi_on_perr = attributes[:'assert_nmi_on_perr']
      else
        self.assert_nmi_on_perr = 'platform-default'
      end

      if attributes.key?(:'assert_nmi_on_serr')
        self.assert_nmi_on_serr = attributes[:'assert_nmi_on_serr']
      else
        self.assert_nmi_on_serr = 'platform-default'
      end

      if attributes.key?(:'auto_cc_state')
        self.auto_cc_state = attributes[:'auto_cc_state']
      else
        self.auto_cc_state = 'platform-default'
      end

      if attributes.key?(:'autonumous_cstate_enable')
        self.autonumous_cstate_enable = attributes[:'autonumous_cstate_enable']
      else
        self.autonumous_cstate_enable = 'platform-default'
      end

      if attributes.key?(:'baud_rate')
        self.baud_rate = attributes[:'baud_rate']
      else
        self.baud_rate = 'platform-default'
      end

      if attributes.key?(:'bme_dma_mitigation')
        self.bme_dma_mitigation = attributes[:'bme_dma_mitigation']
      else
        self.bme_dma_mitigation = 'platform-default'
      end

      if attributes.key?(:'boot_option_num_retry')
        self.boot_option_num_retry = attributes[:'boot_option_num_retry']
      else
        self.boot_option_num_retry = 'platform-default'
      end

      if attributes.key?(:'boot_option_re_cool_down')
        self.boot_option_re_cool_down = attributes[:'boot_option_re_cool_down']
      else
        self.boot_option_re_cool_down = 'platform-default'
      end

      if attributes.key?(:'boot_option_retry')
        self.boot_option_retry = attributes[:'boot_option_retry']
      else
        self.boot_option_retry = 'platform-default'
      end

      if attributes.key?(:'boot_performance_mode')
        self.boot_performance_mode = attributes[:'boot_performance_mode']
      else
        self.boot_performance_mode = 'platform-default'
      end

      if attributes.key?(:'burst_and_postponed_refresh')
        self.burst_and_postponed_refresh = attributes[:'burst_and_postponed_refresh']
      else
        self.burst_and_postponed_refresh = 'platform-default'
      end

      if attributes.key?(:'c1auto_demotion')
        self.c1auto_demotion = attributes[:'c1auto_demotion']
      else
        self.c1auto_demotion = 'platform-default'
      end

      if attributes.key?(:'c1auto_un_demotion')
        self.c1auto_un_demotion = attributes[:'c1auto_un_demotion']
      else
        self.c1auto_un_demotion = 'platform-default'
      end

      if attributes.key?(:'cbs_cmn_apbdis')
        self.cbs_cmn_apbdis = attributes[:'cbs_cmn_apbdis']
      else
        self.cbs_cmn_apbdis = 'platform-default'
      end

      if attributes.key?(:'cbs_cmn_cpu_cpb')
        self.cbs_cmn_cpu_cpb = attributes[:'cbs_cmn_cpu_cpb']
      else
        self.cbs_cmn_cpu_cpb = 'platform-default'
      end

      if attributes.key?(:'cbs_cmn_cpu_gen_downcore_ctrl')
        self.cbs_cmn_cpu_gen_downcore_ctrl = attributes[:'cbs_cmn_cpu_gen_downcore_ctrl']
      else
        self.cbs_cmn_cpu_gen_downcore_ctrl = 'platform-default'
      end

      if attributes.key?(:'cbs_cmn_cpu_global_cstate_ctrl')
        self.cbs_cmn_cpu_global_cstate_ctrl = attributes[:'cbs_cmn_cpu_global_cstate_ctrl']
      else
        self.cbs_cmn_cpu_global_cstate_ctrl = 'platform-default'
      end

      if attributes.key?(:'cbs_cmn_cpu_l1stream_hw_prefetcher')
        self.cbs_cmn_cpu_l1stream_hw_prefetcher = attributes[:'cbs_cmn_cpu_l1stream_hw_prefetcher']
      else
        self.cbs_cmn_cpu_l1stream_hw_prefetcher = 'platform-default'
      end

      if attributes.key?(:'cbs_cmn_cpu_l2stream_hw_prefetcher')
        self.cbs_cmn_cpu_l2stream_hw_prefetcher = attributes[:'cbs_cmn_cpu_l2stream_hw_prefetcher']
      else
        self.cbs_cmn_cpu_l2stream_hw_prefetcher = 'platform-default'
      end

      if attributes.key?(:'cbs_cmn_cpu_smee')
        self.cbs_cmn_cpu_smee = attributes[:'cbs_cmn_cpu_smee']
      else
        self.cbs_cmn_cpu_smee = 'platform-default'
      end

      if attributes.key?(:'cbs_cmn_cpu_streaming_stores_ctrl')
        self.cbs_cmn_cpu_streaming_stores_ctrl = attributes[:'cbs_cmn_cpu_streaming_stores_ctrl']
      else
        self.cbs_cmn_cpu_streaming_stores_ctrl = 'platform-default'
      end

      if attributes.key?(:'cbs_cmn_determinism_slider')
        self.cbs_cmn_determinism_slider = attributes[:'cbs_cmn_determinism_slider']
      else
        self.cbs_cmn_determinism_slider = 'platform-default'
      end

      if attributes.key?(:'cbs_cmn_efficiency_mode_en')
        self.cbs_cmn_efficiency_mode_en = attributes[:'cbs_cmn_efficiency_mode_en']
      else
        self.cbs_cmn_efficiency_mode_en = 'platform-default'
      end

      if attributes.key?(:'cbs_cmn_fixed_soc_pstate')
        self.cbs_cmn_fixed_soc_pstate = attributes[:'cbs_cmn_fixed_soc_pstate']
      else
        self.cbs_cmn_fixed_soc_pstate = 'platform-default'
      end

      if attributes.key?(:'cbs_cmn_gnb_nb_iommu')
        self.cbs_cmn_gnb_nb_iommu = attributes[:'cbs_cmn_gnb_nb_iommu']
      else
        self.cbs_cmn_gnb_nb_iommu = 'platform-default'
      end

      if attributes.key?(:'cbs_cmn_gnb_smu_df_cstates')
        self.cbs_cmn_gnb_smu_df_cstates = attributes[:'cbs_cmn_gnb_smu_df_cstates']
      else
        self.cbs_cmn_gnb_smu_df_cstates = 'platform-default'
      end

      if attributes.key?(:'cbs_cmn_gnb_smucppc')
        self.cbs_cmn_gnb_smucppc = attributes[:'cbs_cmn_gnb_smucppc']
      else
        self.cbs_cmn_gnb_smucppc = 'platform-default'
      end

      if attributes.key?(:'cbs_cmn_mem_ctrl_bank_group_swap_ddr4')
        self.cbs_cmn_mem_ctrl_bank_group_swap_ddr4 = attributes[:'cbs_cmn_mem_ctrl_bank_group_swap_ddr4']
      else
        self.cbs_cmn_mem_ctrl_bank_group_swap_ddr4 = 'platform-default'
      end

      if attributes.key?(:'cbs_cmn_mem_map_bank_interleave_ddr4')
        self.cbs_cmn_mem_map_bank_interleave_ddr4 = attributes[:'cbs_cmn_mem_map_bank_interleave_ddr4']
      else
        self.cbs_cmn_mem_map_bank_interleave_ddr4 = 'platform-default'
      end

      if attributes.key?(:'cbs_cmnc_tdp_ctl')
        self.cbs_cmnc_tdp_ctl = attributes[:'cbs_cmnc_tdp_ctl']
      else
        self.cbs_cmnc_tdp_ctl = 'platform-default'
      end

      if attributes.key?(:'cbs_cpu_ccd_ctrl_ssp')
        self.cbs_cpu_ccd_ctrl_ssp = attributes[:'cbs_cpu_ccd_ctrl_ssp']
      else
        self.cbs_cpu_ccd_ctrl_ssp = 'platform-default'
      end

      if attributes.key?(:'cbs_cpu_core_ctrl')
        self.cbs_cpu_core_ctrl = attributes[:'cbs_cpu_core_ctrl']
      else
        self.cbs_cpu_core_ctrl = 'platform-default'
      end

      if attributes.key?(:'cbs_cpu_smt_ctrl')
        self.cbs_cpu_smt_ctrl = attributes[:'cbs_cpu_smt_ctrl']
      else
        self.cbs_cpu_smt_ctrl = 'platform-default'
      end

      if attributes.key?(:'cbs_dbg_cpu_snp_mem_cover')
        self.cbs_dbg_cpu_snp_mem_cover = attributes[:'cbs_dbg_cpu_snp_mem_cover']
      else
        self.cbs_dbg_cpu_snp_mem_cover = 'platform-default'
      end

      if attributes.key?(:'cbs_dbg_cpu_snp_mem_size_cover')
        self.cbs_dbg_cpu_snp_mem_size_cover = attributes[:'cbs_dbg_cpu_snp_mem_size_cover']
      else
        self.cbs_dbg_cpu_snp_mem_size_cover = 'platform-default'
      end

      if attributes.key?(:'cbs_df_cmn_acpi_srat_l3numa')
        self.cbs_df_cmn_acpi_srat_l3numa = attributes[:'cbs_df_cmn_acpi_srat_l3numa']
      else
        self.cbs_df_cmn_acpi_srat_l3numa = 'platform-default'
      end

      if attributes.key?(:'cbs_df_cmn_dram_nps')
        self.cbs_df_cmn_dram_nps = attributes[:'cbs_df_cmn_dram_nps']
      else
        self.cbs_df_cmn_dram_nps = 'platform-default'
      end

      if attributes.key?(:'cbs_df_cmn_mem_intlv')
        self.cbs_df_cmn_mem_intlv = attributes[:'cbs_df_cmn_mem_intlv']
      else
        self.cbs_df_cmn_mem_intlv = 'platform-default'
      end

      if attributes.key?(:'cbs_df_cmn_mem_intlv_size')
        self.cbs_df_cmn_mem_intlv_size = attributes[:'cbs_df_cmn_mem_intlv_size']
      else
        self.cbs_df_cmn_mem_intlv_size = 'platform-default'
      end

      if attributes.key?(:'cbs_sev_snp_support')
        self.cbs_sev_snp_support = attributes[:'cbs_sev_snp_support']
      else
        self.cbs_sev_snp_support = 'platform-default'
      end

      if attributes.key?(:'cdn_enable')
        self.cdn_enable = attributes[:'cdn_enable']
      else
        self.cdn_enable = 'platform-default'
      end

      if attributes.key?(:'cdn_support')
        self.cdn_support = attributes[:'cdn_support']
      else
        self.cdn_support = 'platform-default'
      end

      if attributes.key?(:'channel_inter_leave')
        self.channel_inter_leave = attributes[:'channel_inter_leave']
      else
        self.channel_inter_leave = 'platform-default'
      end

      if attributes.key?(:'cisco_adaptive_mem_training')
        self.cisco_adaptive_mem_training = attributes[:'cisco_adaptive_mem_training']
      else
        self.cisco_adaptive_mem_training = 'platform-default'
      end

      if attributes.key?(:'cisco_debug_level')
        self.cisco_debug_level = attributes[:'cisco_debug_level']
      else
        self.cisco_debug_level = 'platform-default'
      end

      if attributes.key?(:'cisco_oprom_launch_optimization')
        self.cisco_oprom_launch_optimization = attributes[:'cisco_oprom_launch_optimization']
      else
        self.cisco_oprom_launch_optimization = 'platform-default'
      end

      if attributes.key?(:'cisco_xgmi_max_speed')
        self.cisco_xgmi_max_speed = attributes[:'cisco_xgmi_max_speed']
      else
        self.cisco_xgmi_max_speed = 'platform-default'
      end

      if attributes.key?(:'cke_low_policy')
        self.cke_low_policy = attributes[:'cke_low_policy']
      else
        self.cke_low_policy = 'platform-default'
      end

      if attributes.key?(:'closed_loop_therm_throtl')
        self.closed_loop_therm_throtl = attributes[:'closed_loop_therm_throtl']
      else
        self.closed_loop_therm_throtl = 'platform-default'
      end

      if attributes.key?(:'cmci_enable')
        self.cmci_enable = attributes[:'cmci_enable']
      else
        self.cmci_enable = 'platform-default'
      end

      if attributes.key?(:'config_tdp')
        self.config_tdp = attributes[:'config_tdp']
      else
        self.config_tdp = 'platform-default'
      end

      if attributes.key?(:'config_tdp_level')
        self.config_tdp_level = attributes[:'config_tdp_level']
      else
        self.config_tdp_level = 'platform-default'
      end

      if attributes.key?(:'console_redirection')
        self.console_redirection = attributes[:'console_redirection']
      else
        self.console_redirection = 'platform-default'
      end

      if attributes.key?(:'core_multi_processing')
        self.core_multi_processing = attributes[:'core_multi_processing']
      else
        self.core_multi_processing = 'platform-default'
      end

      if attributes.key?(:'cpu_energy_performance')
        self.cpu_energy_performance = attributes[:'cpu_energy_performance']
      else
        self.cpu_energy_performance = 'platform-default'
      end

      if attributes.key?(:'cpu_frequency_floor')
        self.cpu_frequency_floor = attributes[:'cpu_frequency_floor']
      else
        self.cpu_frequency_floor = 'platform-default'
      end

      if attributes.key?(:'cpu_perf_enhancement')
        self.cpu_perf_enhancement = attributes[:'cpu_perf_enhancement']
      else
        self.cpu_perf_enhancement = 'platform-default'
      end

      if attributes.key?(:'cpu_performance')
        self.cpu_performance = attributes[:'cpu_performance']
      else
        self.cpu_performance = 'platform-default'
      end

      if attributes.key?(:'cpu_power_management')
        self.cpu_power_management = attributes[:'cpu_power_management']
      else
        self.cpu_power_management = 'platform-default'
      end

      if attributes.key?(:'cr_qos')
        self.cr_qos = attributes[:'cr_qos']
      else
        self.cr_qos = 'platform-default'
      end

      if attributes.key?(:'crfastgo_config')
        self.crfastgo_config = attributes[:'crfastgo_config']
      else
        self.crfastgo_config = 'platform-default'
      end

      if attributes.key?(:'dcpmm_firmware_downgrade')
        self.dcpmm_firmware_downgrade = attributes[:'dcpmm_firmware_downgrade']
      else
        self.dcpmm_firmware_downgrade = 'platform-default'
      end

      if attributes.key?(:'demand_scrub')
        self.demand_scrub = attributes[:'demand_scrub']
      else
        self.demand_scrub = 'platform-default'
      end

      if attributes.key?(:'direct_cache_access')
        self.direct_cache_access = attributes[:'direct_cache_access']
      else
        self.direct_cache_access = 'platform-default'
      end

      if attributes.key?(:'dram_clock_throttling')
        self.dram_clock_throttling = attributes[:'dram_clock_throttling']
      else
        self.dram_clock_throttling = 'platform-default'
      end

      if attributes.key?(:'dram_refresh_rate')
        self.dram_refresh_rate = attributes[:'dram_refresh_rate']
      else
        self.dram_refresh_rate = 'platform-default'
      end

      if attributes.key?(:'dram_sw_thermal_throttling')
        self.dram_sw_thermal_throttling = attributes[:'dram_sw_thermal_throttling']
      else
        self.dram_sw_thermal_throttling = 'platform-default'
      end

      if attributes.key?(:'eadr_support')
        self.eadr_support = attributes[:'eadr_support']
      else
        self.eadr_support = 'platform-default'
      end

      if attributes.key?(:'edpc_en')
        self.edpc_en = attributes[:'edpc_en']
      else
        self.edpc_en = 'platform-default'
      end

      if attributes.key?(:'enable_clock_spread_spec')
        self.enable_clock_spread_spec = attributes[:'enable_clock_spread_spec']
      else
        self.enable_clock_spread_spec = 'platform-default'
      end

      if attributes.key?(:'enable_mktme')
        self.enable_mktme = attributes[:'enable_mktme']
      else
        self.enable_mktme = 'platform-default'
      end

      if attributes.key?(:'enable_sgx')
        self.enable_sgx = attributes[:'enable_sgx']
      else
        self.enable_sgx = 'platform-default'
      end

      if attributes.key?(:'enable_tme')
        self.enable_tme = attributes[:'enable_tme']
      else
        self.enable_tme = 'platform-default'
      end

      if attributes.key?(:'energy_efficient_turbo')
        self.energy_efficient_turbo = attributes[:'energy_efficient_turbo']
      else
        self.energy_efficient_turbo = 'platform-default'
      end

      if attributes.key?(:'eng_perf_tuning')
        self.eng_perf_tuning = attributes[:'eng_perf_tuning']
      else
        self.eng_perf_tuning = 'platform-default'
      end

      if attributes.key?(:'enhanced_intel_speed_step_tech')
        self.enhanced_intel_speed_step_tech = attributes[:'enhanced_intel_speed_step_tech']
      else
        self.enhanced_intel_speed_step_tech = 'platform-default'
      end

      if attributes.key?(:'epoch_update')
        self.epoch_update = attributes[:'epoch_update']
      else
        self.epoch_update = 'platform-default'
      end

      if attributes.key?(:'epp_enable')
        self.epp_enable = attributes[:'epp_enable']
      else
        self.epp_enable = 'platform-default'
      end

      if attributes.key?(:'epp_profile')
        self.epp_profile = attributes[:'epp_profile']
      else
        self.epp_profile = 'platform-default'
      end

      if attributes.key?(:'execute_disable_bit')
        self.execute_disable_bit = attributes[:'execute_disable_bit']
      else
        self.execute_disable_bit = 'platform-default'
      end

      if attributes.key?(:'extended_apic')
        self.extended_apic = attributes[:'extended_apic']
      else
        self.extended_apic = 'platform-default'
      end

      if attributes.key?(:'flow_control')
        self.flow_control = attributes[:'flow_control']
      else
        self.flow_control = 'platform-default'
      end

      if attributes.key?(:'frb2enable')
        self.frb2enable = attributes[:'frb2enable']
      else
        self.frb2enable = 'platform-default'
      end

      if attributes.key?(:'hardware_prefetch')
        self.hardware_prefetch = attributes[:'hardware_prefetch']
      else
        self.hardware_prefetch = 'platform-default'
      end

      if attributes.key?(:'hwpm_enable')
        self.hwpm_enable = attributes[:'hwpm_enable']
      else
        self.hwpm_enable = 'platform-default'
      end

      if attributes.key?(:'imc_interleave')
        self.imc_interleave = attributes[:'imc_interleave']
      else
        self.imc_interleave = 'platform-default'
      end

      if attributes.key?(:'intel_dynamic_speed_select')
        self.intel_dynamic_speed_select = attributes[:'intel_dynamic_speed_select']
      else
        self.intel_dynamic_speed_select = 'platform-default'
      end

      if attributes.key?(:'intel_hyper_threading_tech')
        self.intel_hyper_threading_tech = attributes[:'intel_hyper_threading_tech']
      else
        self.intel_hyper_threading_tech = 'platform-default'
      end

      if attributes.key?(:'intel_speed_select')
        self.intel_speed_select = attributes[:'intel_speed_select']
      else
        self.intel_speed_select = 'platform-default'
      end

      if attributes.key?(:'intel_turbo_boost_tech')
        self.intel_turbo_boost_tech = attributes[:'intel_turbo_boost_tech']
      else
        self.intel_turbo_boost_tech = 'platform-default'
      end

      if attributes.key?(:'intel_virtualization_technology')
        self.intel_virtualization_technology = attributes[:'intel_virtualization_technology']
      else
        self.intel_virtualization_technology = 'platform-default'
      end

      if attributes.key?(:'intel_vt_for_directed_io')
        self.intel_vt_for_directed_io = attributes[:'intel_vt_for_directed_io']
      else
        self.intel_vt_for_directed_io = 'platform-default'
      end

      if attributes.key?(:'intel_vtd_coherency_support')
        self.intel_vtd_coherency_support = attributes[:'intel_vtd_coherency_support']
      else
        self.intel_vtd_coherency_support = 'platform-default'
      end

      if attributes.key?(:'intel_vtd_interrupt_remapping')
        self.intel_vtd_interrupt_remapping = attributes[:'intel_vtd_interrupt_remapping']
      else
        self.intel_vtd_interrupt_remapping = 'platform-default'
      end

      if attributes.key?(:'intel_vtd_pass_through_dma_support')
        self.intel_vtd_pass_through_dma_support = attributes[:'intel_vtd_pass_through_dma_support']
      else
        self.intel_vtd_pass_through_dma_support = 'platform-default'
      end

      if attributes.key?(:'intel_vtdats_support')
        self.intel_vtdats_support = attributes[:'intel_vtdats_support']
      else
        self.intel_vtdats_support = 'platform-default'
      end

      if attributes.key?(:'ioh_error_enable')
        self.ioh_error_enable = attributes[:'ioh_error_enable']
      else
        self.ioh_error_enable = 'platform-default'
      end

      if attributes.key?(:'ioh_resource')
        self.ioh_resource = attributes[:'ioh_resource']
      else
        self.ioh_resource = 'platform-default'
      end

      if attributes.key?(:'ip_prefetch')
        self.ip_prefetch = attributes[:'ip_prefetch']
      else
        self.ip_prefetch = 'platform-default'
      end

      if attributes.key?(:'ipv4http')
        self.ipv4http = attributes[:'ipv4http']
      else
        self.ipv4http = 'platform-default'
      end

      if attributes.key?(:'ipv4pxe')
        self.ipv4pxe = attributes[:'ipv4pxe']
      else
        self.ipv4pxe = 'platform-default'
      end

      if attributes.key?(:'ipv6http')
        self.ipv6http = attributes[:'ipv6http']
      else
        self.ipv6http = 'platform-default'
      end

      if attributes.key?(:'ipv6pxe')
        self.ipv6pxe = attributes[:'ipv6pxe']
      else
        self.ipv6pxe = 'platform-default'
      end

      if attributes.key?(:'kti_prefetch')
        self.kti_prefetch = attributes[:'kti_prefetch']
      else
        self.kti_prefetch = 'platform-default'
      end

      if attributes.key?(:'legacy_os_redirection')
        self.legacy_os_redirection = attributes[:'legacy_os_redirection']
      else
        self.legacy_os_redirection = 'platform-default'
      end

      if attributes.key?(:'legacy_usb_support')
        self.legacy_usb_support = attributes[:'legacy_usb_support']
      else
        self.legacy_usb_support = 'platform-default'
      end

      if attributes.key?(:'llc_alloc')
        self.llc_alloc = attributes[:'llc_alloc']
      else
        self.llc_alloc = 'platform-default'
      end

      if attributes.key?(:'llc_prefetch')
        self.llc_prefetch = attributes[:'llc_prefetch']
      else
        self.llc_prefetch = 'platform-default'
      end

      if attributes.key?(:'lom_port0state')
        self.lom_port0state = attributes[:'lom_port0state']
      else
        self.lom_port0state = 'platform-default'
      end

      if attributes.key?(:'lom_port1state')
        self.lom_port1state = attributes[:'lom_port1state']
      else
        self.lom_port1state = 'platform-default'
      end

      if attributes.key?(:'lom_port2state')
        self.lom_port2state = attributes[:'lom_port2state']
      else
        self.lom_port2state = 'platform-default'
      end

      if attributes.key?(:'lom_port3state')
        self.lom_port3state = attributes[:'lom_port3state']
      else
        self.lom_port3state = 'platform-default'
      end

      if attributes.key?(:'lom_ports_all_state')
        self.lom_ports_all_state = attributes[:'lom_ports_all_state']
      else
        self.lom_ports_all_state = 'platform-default'
      end

      if attributes.key?(:'lv_ddr_mode')
        self.lv_ddr_mode = attributes[:'lv_ddr_mode']
      else
        self.lv_ddr_mode = 'platform-default'
      end

      if attributes.key?(:'make_device_non_bootable')
        self.make_device_non_bootable = attributes[:'make_device_non_bootable']
      else
        self.make_device_non_bootable = 'platform-default'
      end

      if attributes.key?(:'memory_bandwidth_boost')
        self.memory_bandwidth_boost = attributes[:'memory_bandwidth_boost']
      else
        self.memory_bandwidth_boost = 'platform-default'
      end

      if attributes.key?(:'memory_inter_leave')
        self.memory_inter_leave = attributes[:'memory_inter_leave']
      else
        self.memory_inter_leave = 'platform-default'
      end

      if attributes.key?(:'memory_mapped_io_above4gb')
        self.memory_mapped_io_above4gb = attributes[:'memory_mapped_io_above4gb']
      else
        self.memory_mapped_io_above4gb = 'platform-default'
      end

      if attributes.key?(:'memory_refresh_rate')
        self.memory_refresh_rate = attributes[:'memory_refresh_rate']
      else
        self.memory_refresh_rate = 'platform-default'
      end

      if attributes.key?(:'memory_size_limit')
        self.memory_size_limit = attributes[:'memory_size_limit']
      else
        self.memory_size_limit = 'platform-default'
      end

      if attributes.key?(:'memory_thermal_throttling')
        self.memory_thermal_throttling = attributes[:'memory_thermal_throttling']
      else
        self.memory_thermal_throttling = 'platform-default'
      end

      if attributes.key?(:'mirroring_mode')
        self.mirroring_mode = attributes[:'mirroring_mode']
      else
        self.mirroring_mode = 'platform-default'
      end

      if attributes.key?(:'mmcfg_base')
        self.mmcfg_base = attributes[:'mmcfg_base']
      else
        self.mmcfg_base = 'platform-default'
      end

      if attributes.key?(:'network_stack')
        self.network_stack = attributes[:'network_stack']
      else
        self.network_stack = 'platform-default'
      end

      if attributes.key?(:'numa_optimized')
        self.numa_optimized = attributes[:'numa_optimized']
      else
        self.numa_optimized = 'platform-default'
      end

      if attributes.key?(:'nvmdimm_perform_config')
        self.nvmdimm_perform_config = attributes[:'nvmdimm_perform_config']
      else
        self.nvmdimm_perform_config = 'platform-default'
      end

      if attributes.key?(:'onboard10gbit_lom')
        self.onboard10gbit_lom = attributes[:'onboard10gbit_lom']
      else
        self.onboard10gbit_lom = 'platform-default'
      end

      if attributes.key?(:'onboard_gbit_lom')
        self.onboard_gbit_lom = attributes[:'onboard_gbit_lom']
      else
        self.onboard_gbit_lom = 'platform-default'
      end

      if attributes.key?(:'onboard_scu_storage_support')
        self.onboard_scu_storage_support = attributes[:'onboard_scu_storage_support']
      else
        self.onboard_scu_storage_support = 'platform-default'
      end

      if attributes.key?(:'onboard_scu_storage_sw_stack')
        self.onboard_scu_storage_sw_stack = attributes[:'onboard_scu_storage_sw_stack']
      else
        self.onboard_scu_storage_sw_stack = 'platform-default'
      end

      if attributes.key?(:'operation_mode')
        self.operation_mode = attributes[:'operation_mode']
      else
        self.operation_mode = 'platform-default'
      end

      if attributes.key?(:'os_boot_watchdog_timer')
        self.os_boot_watchdog_timer = attributes[:'os_boot_watchdog_timer']
      else
        self.os_boot_watchdog_timer = 'platform-default'
      end

      if attributes.key?(:'os_boot_watchdog_timer_policy')
        self.os_boot_watchdog_timer_policy = attributes[:'os_boot_watchdog_timer_policy']
      else
        self.os_boot_watchdog_timer_policy = 'platform-default'
      end

      if attributes.key?(:'os_boot_watchdog_timer_timeout')
        self.os_boot_watchdog_timer_timeout = attributes[:'os_boot_watchdog_timer_timeout']
      else
        self.os_boot_watchdog_timer_timeout = 'platform-default'
      end

      if attributes.key?(:'out_of_band_mgmt_port')
        self.out_of_band_mgmt_port = attributes[:'out_of_band_mgmt_port']
      else
        self.out_of_band_mgmt_port = 'platform-default'
      end

      if attributes.key?(:'package_cstate_limit')
        self.package_cstate_limit = attributes[:'package_cstate_limit']
      else
        self.package_cstate_limit = 'platform-default'
      end

      if attributes.key?(:'panic_high_watermark')
        self.panic_high_watermark = attributes[:'panic_high_watermark']
      else
        self.panic_high_watermark = 'platform-default'
      end

      if attributes.key?(:'partial_cache_line_sparing')
        self.partial_cache_line_sparing = attributes[:'partial_cache_line_sparing']
      else
        self.partial_cache_line_sparing = 'platform-default'
      end

      if attributes.key?(:'partial_mirror_mode_config')
        self.partial_mirror_mode_config = attributes[:'partial_mirror_mode_config']
      else
        self.partial_mirror_mode_config = 'platform-default'
      end

      if attributes.key?(:'partial_mirror_percent')
        self.partial_mirror_percent = attributes[:'partial_mirror_percent']
      else
        self.partial_mirror_percent = 'platform-default'
      end

      if attributes.key?(:'partial_mirror_value1')
        self.partial_mirror_value1 = attributes[:'partial_mirror_value1']
      else
        self.partial_mirror_value1 = 'platform-default'
      end

      if attributes.key?(:'partial_mirror_value2')
        self.partial_mirror_value2 = attributes[:'partial_mirror_value2']
      else
        self.partial_mirror_value2 = 'platform-default'
      end

      if attributes.key?(:'partial_mirror_value3')
        self.partial_mirror_value3 = attributes[:'partial_mirror_value3']
      else
        self.partial_mirror_value3 = 'platform-default'
      end

      if attributes.key?(:'partial_mirror_value4')
        self.partial_mirror_value4 = attributes[:'partial_mirror_value4']
      else
        self.partial_mirror_value4 = 'platform-default'
      end

      if attributes.key?(:'patrol_scrub')
        self.patrol_scrub = attributes[:'patrol_scrub']
      else
        self.patrol_scrub = 'platform-default'
      end

      if attributes.key?(:'patrol_scrub_duration')
        self.patrol_scrub_duration = attributes[:'patrol_scrub_duration']
      else
        self.patrol_scrub_duration = 'platform-default'
      end

      if attributes.key?(:'pc_ie_ras_support')
        self.pc_ie_ras_support = attributes[:'pc_ie_ras_support']
      else
        self.pc_ie_ras_support = 'platform-default'
      end

      if attributes.key?(:'pc_ie_ssd_hot_plug_support')
        self.pc_ie_ssd_hot_plug_support = attributes[:'pc_ie_ssd_hot_plug_support']
      else
        self.pc_ie_ssd_hot_plug_support = 'platform-default'
      end

      if attributes.key?(:'pch_usb30mode')
        self.pch_usb30mode = attributes[:'pch_usb30mode']
      else
        self.pch_usb30mode = 'platform-default'
      end

      if attributes.key?(:'pci_option_ro_ms')
        self.pci_option_ro_ms = attributes[:'pci_option_ro_ms']
      else
        self.pci_option_ro_ms = 'platform-default'
      end

      if attributes.key?(:'pci_rom_clp')
        self.pci_rom_clp = attributes[:'pci_rom_clp']
      else
        self.pci_rom_clp = 'platform-default'
      end

      if attributes.key?(:'pcie_ari_support')
        self.pcie_ari_support = attributes[:'pcie_ari_support']
      else
        self.pcie_ari_support = 'platform-default'
      end

      if attributes.key?(:'pcie_pll_ssc')
        self.pcie_pll_ssc = attributes[:'pcie_pll_ssc']
      else
        self.pcie_pll_ssc = 'platform-default'
      end

      if attributes.key?(:'pcie_slot_mraid1link_speed')
        self.pcie_slot_mraid1link_speed = attributes[:'pcie_slot_mraid1link_speed']
      else
        self.pcie_slot_mraid1link_speed = 'platform-default'
      end

      if attributes.key?(:'pcie_slot_mraid1option_rom')
        self.pcie_slot_mraid1option_rom = attributes[:'pcie_slot_mraid1option_rom']
      else
        self.pcie_slot_mraid1option_rom = 'platform-default'
      end

      if attributes.key?(:'pcie_slot_mraid2link_speed')
        self.pcie_slot_mraid2link_speed = attributes[:'pcie_slot_mraid2link_speed']
      else
        self.pcie_slot_mraid2link_speed = 'platform-default'
      end

      if attributes.key?(:'pcie_slot_mraid2option_rom')
        self.pcie_slot_mraid2option_rom = attributes[:'pcie_slot_mraid2option_rom']
      else
        self.pcie_slot_mraid2option_rom = 'platform-default'
      end

      if attributes.key?(:'pcie_slot_mstorraid_link_speed')
        self.pcie_slot_mstorraid_link_speed = attributes[:'pcie_slot_mstorraid_link_speed']
      else
        self.pcie_slot_mstorraid_link_speed = 'platform-default'
      end

      if attributes.key?(:'pcie_slot_mstorraid_option_rom')
        self.pcie_slot_mstorraid_option_rom = attributes[:'pcie_slot_mstorraid_option_rom']
      else
        self.pcie_slot_mstorraid_option_rom = 'platform-default'
      end

      if attributes.key?(:'pcie_slot_nvme1link_speed')
        self.pcie_slot_nvme1link_speed = attributes[:'pcie_slot_nvme1link_speed']
      else
        self.pcie_slot_nvme1link_speed = 'platform-default'
      end

      if attributes.key?(:'pcie_slot_nvme1option_rom')
        self.pcie_slot_nvme1option_rom = attributes[:'pcie_slot_nvme1option_rom']
      else
        self.pcie_slot_nvme1option_rom = 'platform-default'
      end

      if attributes.key?(:'pcie_slot_nvme2link_speed')
        self.pcie_slot_nvme2link_speed = attributes[:'pcie_slot_nvme2link_speed']
      else
        self.pcie_slot_nvme2link_speed = 'platform-default'
      end

      if attributes.key?(:'pcie_slot_nvme2option_rom')
        self.pcie_slot_nvme2option_rom = attributes[:'pcie_slot_nvme2option_rom']
      else
        self.pcie_slot_nvme2option_rom = 'platform-default'
      end

      if attributes.key?(:'pcie_slot_nvme3link_speed')
        self.pcie_slot_nvme3link_speed = attributes[:'pcie_slot_nvme3link_speed']
      else
        self.pcie_slot_nvme3link_speed = 'platform-default'
      end

      if attributes.key?(:'pcie_slot_nvme3option_rom')
        self.pcie_slot_nvme3option_rom = attributes[:'pcie_slot_nvme3option_rom']
      else
        self.pcie_slot_nvme3option_rom = 'platform-default'
      end

      if attributes.key?(:'pcie_slot_nvme4link_speed')
        self.pcie_slot_nvme4link_speed = attributes[:'pcie_slot_nvme4link_speed']
      else
        self.pcie_slot_nvme4link_speed = 'platform-default'
      end

      if attributes.key?(:'pcie_slot_nvme4option_rom')
        self.pcie_slot_nvme4option_rom = attributes[:'pcie_slot_nvme4option_rom']
      else
        self.pcie_slot_nvme4option_rom = 'platform-default'
      end

      if attributes.key?(:'pcie_slot_nvme5link_speed')
        self.pcie_slot_nvme5link_speed = attributes[:'pcie_slot_nvme5link_speed']
      else
        self.pcie_slot_nvme5link_speed = 'platform-default'
      end

      if attributes.key?(:'pcie_slot_nvme5option_rom')
        self.pcie_slot_nvme5option_rom = attributes[:'pcie_slot_nvme5option_rom']
      else
        self.pcie_slot_nvme5option_rom = 'platform-default'
      end

      if attributes.key?(:'pcie_slot_nvme6link_speed')
        self.pcie_slot_nvme6link_speed = attributes[:'pcie_slot_nvme6link_speed']
      else
        self.pcie_slot_nvme6link_speed = 'platform-default'
      end

      if attributes.key?(:'pcie_slot_nvme6option_rom')
        self.pcie_slot_nvme6option_rom = attributes[:'pcie_slot_nvme6option_rom']
      else
        self.pcie_slot_nvme6option_rom = 'platform-default'
      end

      if attributes.key?(:'pcie_slots_cdn_enable')
        self.pcie_slots_cdn_enable = attributes[:'pcie_slots_cdn_enable']
      else
        self.pcie_slots_cdn_enable = 'platform-default'
      end

      if attributes.key?(:'pop_support')
        self.pop_support = attributes[:'pop_support']
      else
        self.pop_support = 'platform-default'
      end

      if attributes.key?(:'post_error_pause')
        self.post_error_pause = attributes[:'post_error_pause']
      else
        self.post_error_pause = 'platform-default'
      end

      if attributes.key?(:'post_package_repair')
        self.post_package_repair = attributes[:'post_package_repair']
      else
        self.post_package_repair = 'platform-default'
      end

      if attributes.key?(:'processor_c1e')
        self.processor_c1e = attributes[:'processor_c1e']
      else
        self.processor_c1e = 'platform-default'
      end

      if attributes.key?(:'processor_c3report')
        self.processor_c3report = attributes[:'processor_c3report']
      else
        self.processor_c3report = 'platform-default'
      end

      if attributes.key?(:'processor_c6report')
        self.processor_c6report = attributes[:'processor_c6report']
      else
        self.processor_c6report = 'platform-default'
      end

      if attributes.key?(:'processor_cstate')
        self.processor_cstate = attributes[:'processor_cstate']
      else
        self.processor_cstate = 'platform-default'
      end

      if attributes.key?(:'psata')
        self.psata = attributes[:'psata']
      else
        self.psata = 'platform-default'
      end

      if attributes.key?(:'pstate_coord_type')
        self.pstate_coord_type = attributes[:'pstate_coord_type']
      else
        self.pstate_coord_type = 'platform-default'
      end

      if attributes.key?(:'putty_key_pad')
        self.putty_key_pad = attributes[:'putty_key_pad']
      else
        self.putty_key_pad = 'platform-default'
      end

      if attributes.key?(:'pwr_perf_tuning')
        self.pwr_perf_tuning = attributes[:'pwr_perf_tuning']
      else
        self.pwr_perf_tuning = 'platform-default'
      end

      if attributes.key?(:'qpi_link_frequency')
        self.qpi_link_frequency = attributes[:'qpi_link_frequency']
      else
        self.qpi_link_frequency = 'platform-default'
      end

      if attributes.key?(:'qpi_link_speed')
        self.qpi_link_speed = attributes[:'qpi_link_speed']
      else
        self.qpi_link_speed = 'platform-default'
      end

      if attributes.key?(:'qpi_snoop_mode')
        self.qpi_snoop_mode = attributes[:'qpi_snoop_mode']
      else
        self.qpi_snoop_mode = 'platform-default'
      end

      if attributes.key?(:'rank_inter_leave')
        self.rank_inter_leave = attributes[:'rank_inter_leave']
      else
        self.rank_inter_leave = 'platform-default'
      end

      if attributes.key?(:'redirection_after_post')
        self.redirection_after_post = attributes[:'redirection_after_post']
      else
        self.redirection_after_post = 'platform-default'
      end

      if attributes.key?(:'sata_mode_select')
        self.sata_mode_select = attributes[:'sata_mode_select']
      else
        self.sata_mode_select = 'platform-default'
      end

      if attributes.key?(:'select_memory_ras_configuration')
        self.select_memory_ras_configuration = attributes[:'select_memory_ras_configuration']
      else
        self.select_memory_ras_configuration = 'platform-default'
      end

      if attributes.key?(:'select_ppr_type')
        self.select_ppr_type = attributes[:'select_ppr_type']
      else
        self.select_ppr_type = 'platform-default'
      end

      if attributes.key?(:'serial_port_aenable')
        self.serial_port_aenable = attributes[:'serial_port_aenable']
      else
        self.serial_port_aenable = 'platform-default'
      end

      if attributes.key?(:'sev')
        self.sev = attributes[:'sev']
      else
        self.sev = 'platform-default'
      end

      if attributes.key?(:'sgx_auto_registration_agent')
        self.sgx_auto_registration_agent = attributes[:'sgx_auto_registration_agent']
      else
        self.sgx_auto_registration_agent = 'platform-default'
      end

      if attributes.key?(:'sgx_epoch0')
        self.sgx_epoch0 = attributes[:'sgx_epoch0']
      else
        self.sgx_epoch0 = 'platform-default'
      end

      if attributes.key?(:'sgx_epoch1')
        self.sgx_epoch1 = attributes[:'sgx_epoch1']
      else
        self.sgx_epoch1 = 'platform-default'
      end

      if attributes.key?(:'sgx_factory_reset')
        self.sgx_factory_reset = attributes[:'sgx_factory_reset']
      else
        self.sgx_factory_reset = 'platform-default'
      end

      if attributes.key?(:'sgx_le_pub_key_hash0')
        self.sgx_le_pub_key_hash0 = attributes[:'sgx_le_pub_key_hash0']
      else
        self.sgx_le_pub_key_hash0 = 'platform-default'
      end

      if attributes.key?(:'sgx_le_pub_key_hash1')
        self.sgx_le_pub_key_hash1 = attributes[:'sgx_le_pub_key_hash1']
      else
        self.sgx_le_pub_key_hash1 = 'platform-default'
      end

      if attributes.key?(:'sgx_le_pub_key_hash2')
        self.sgx_le_pub_key_hash2 = attributes[:'sgx_le_pub_key_hash2']
      else
        self.sgx_le_pub_key_hash2 = 'platform-default'
      end

      if attributes.key?(:'sgx_le_pub_key_hash3')
        self.sgx_le_pub_key_hash3 = attributes[:'sgx_le_pub_key_hash3']
      else
        self.sgx_le_pub_key_hash3 = 'platform-default'
      end

      if attributes.key?(:'sgx_le_wr')
        self.sgx_le_wr = attributes[:'sgx_le_wr']
      else
        self.sgx_le_wr = 'platform-default'
      end

      if attributes.key?(:'sgx_package_info_in_band_access')
        self.sgx_package_info_in_band_access = attributes[:'sgx_package_info_in_band_access']
      else
        self.sgx_package_info_in_band_access = 'platform-default'
      end

      if attributes.key?(:'sgx_qos')
        self.sgx_qos = attributes[:'sgx_qos']
      else
        self.sgx_qos = 'platform-default'
      end

      if attributes.key?(:'sha1pcr_bank')
        self.sha1pcr_bank = attributes[:'sha1pcr_bank']
      else
        self.sha1pcr_bank = 'platform-default'
      end

      if attributes.key?(:'sha256pcr_bank')
        self.sha256pcr_bank = attributes[:'sha256pcr_bank']
      else
        self.sha256pcr_bank = 'platform-default'
      end

      if attributes.key?(:'single_pctl_enable')
        self.single_pctl_enable = attributes[:'single_pctl_enable']
      else
        self.single_pctl_enable = 'platform-default'
      end

      if attributes.key?(:'slot10link_speed')
        self.slot10link_speed = attributes[:'slot10link_speed']
      else
        self.slot10link_speed = 'platform-default'
      end

      if attributes.key?(:'slot10state')
        self.slot10state = attributes[:'slot10state']
      else
        self.slot10state = 'platform-default'
      end

      if attributes.key?(:'slot11link_speed')
        self.slot11link_speed = attributes[:'slot11link_speed']
      else
        self.slot11link_speed = 'platform-default'
      end

      if attributes.key?(:'slot11state')
        self.slot11state = attributes[:'slot11state']
      else
        self.slot11state = 'platform-default'
      end

      if attributes.key?(:'slot12link_speed')
        self.slot12link_speed = attributes[:'slot12link_speed']
      else
        self.slot12link_speed = 'platform-default'
      end

      if attributes.key?(:'slot12state')
        self.slot12state = attributes[:'slot12state']
      else
        self.slot12state = 'platform-default'
      end

      if attributes.key?(:'slot13state')
        self.slot13state = attributes[:'slot13state']
      else
        self.slot13state = 'platform-default'
      end

      if attributes.key?(:'slot14state')
        self.slot14state = attributes[:'slot14state']
      else
        self.slot14state = 'platform-default'
      end

      if attributes.key?(:'slot1link_speed')
        self.slot1link_speed = attributes[:'slot1link_speed']
      else
        self.slot1link_speed = 'platform-default'
      end

      if attributes.key?(:'slot1state')
        self.slot1state = attributes[:'slot1state']
      else
        self.slot1state = 'platform-default'
      end

      if attributes.key?(:'slot2link_speed')
        self.slot2link_speed = attributes[:'slot2link_speed']
      else
        self.slot2link_speed = 'platform-default'
      end

      if attributes.key?(:'slot2state')
        self.slot2state = attributes[:'slot2state']
      else
        self.slot2state = 'platform-default'
      end

      if attributes.key?(:'slot3link_speed')
        self.slot3link_speed = attributes[:'slot3link_speed']
      else
        self.slot3link_speed = 'platform-default'
      end

      if attributes.key?(:'slot3state')
        self.slot3state = attributes[:'slot3state']
      else
        self.slot3state = 'platform-default'
      end

      if attributes.key?(:'slot4link_speed')
        self.slot4link_speed = attributes[:'slot4link_speed']
      else
        self.slot4link_speed = 'platform-default'
      end

      if attributes.key?(:'slot4state')
        self.slot4state = attributes[:'slot4state']
      else
        self.slot4state = 'platform-default'
      end

      if attributes.key?(:'slot5link_speed')
        self.slot5link_speed = attributes[:'slot5link_speed']
      else
        self.slot5link_speed = 'platform-default'
      end

      if attributes.key?(:'slot5state')
        self.slot5state = attributes[:'slot5state']
      else
        self.slot5state = 'platform-default'
      end

      if attributes.key?(:'slot6link_speed')
        self.slot6link_speed = attributes[:'slot6link_speed']
      else
        self.slot6link_speed = 'platform-default'
      end

      if attributes.key?(:'slot6state')
        self.slot6state = attributes[:'slot6state']
      else
        self.slot6state = 'platform-default'
      end

      if attributes.key?(:'slot7link_speed')
        self.slot7link_speed = attributes[:'slot7link_speed']
      else
        self.slot7link_speed = 'platform-default'
      end

      if attributes.key?(:'slot7state')
        self.slot7state = attributes[:'slot7state']
      else
        self.slot7state = 'platform-default'
      end

      if attributes.key?(:'slot8link_speed')
        self.slot8link_speed = attributes[:'slot8link_speed']
      else
        self.slot8link_speed = 'platform-default'
      end

      if attributes.key?(:'slot8state')
        self.slot8state = attributes[:'slot8state']
      else
        self.slot8state = 'platform-default'
      end

      if attributes.key?(:'slot9link_speed')
        self.slot9link_speed = attributes[:'slot9link_speed']
      else
        self.slot9link_speed = 'platform-default'
      end

      if attributes.key?(:'slot9state')
        self.slot9state = attributes[:'slot9state']
      else
        self.slot9state = 'platform-default'
      end

      if attributes.key?(:'slot_flom_link_speed')
        self.slot_flom_link_speed = attributes[:'slot_flom_link_speed']
      else
        self.slot_flom_link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme10link_speed')
        self.slot_front_nvme10link_speed = attributes[:'slot_front_nvme10link_speed']
      else
        self.slot_front_nvme10link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme10option_rom')
        self.slot_front_nvme10option_rom = attributes[:'slot_front_nvme10option_rom']
      else
        self.slot_front_nvme10option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme11link_speed')
        self.slot_front_nvme11link_speed = attributes[:'slot_front_nvme11link_speed']
      else
        self.slot_front_nvme11link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme11option_rom')
        self.slot_front_nvme11option_rom = attributes[:'slot_front_nvme11option_rom']
      else
        self.slot_front_nvme11option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme12link_speed')
        self.slot_front_nvme12link_speed = attributes[:'slot_front_nvme12link_speed']
      else
        self.slot_front_nvme12link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme12option_rom')
        self.slot_front_nvme12option_rom = attributes[:'slot_front_nvme12option_rom']
      else
        self.slot_front_nvme12option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme13option_rom')
        self.slot_front_nvme13option_rom = attributes[:'slot_front_nvme13option_rom']
      else
        self.slot_front_nvme13option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme14option_rom')
        self.slot_front_nvme14option_rom = attributes[:'slot_front_nvme14option_rom']
      else
        self.slot_front_nvme14option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme15option_rom')
        self.slot_front_nvme15option_rom = attributes[:'slot_front_nvme15option_rom']
      else
        self.slot_front_nvme15option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme16option_rom')
        self.slot_front_nvme16option_rom = attributes[:'slot_front_nvme16option_rom']
      else
        self.slot_front_nvme16option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme17option_rom')
        self.slot_front_nvme17option_rom = attributes[:'slot_front_nvme17option_rom']
      else
        self.slot_front_nvme17option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme18option_rom')
        self.slot_front_nvme18option_rom = attributes[:'slot_front_nvme18option_rom']
      else
        self.slot_front_nvme18option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme19option_rom')
        self.slot_front_nvme19option_rom = attributes[:'slot_front_nvme19option_rom']
      else
        self.slot_front_nvme19option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme1link_speed')
        self.slot_front_nvme1link_speed = attributes[:'slot_front_nvme1link_speed']
      else
        self.slot_front_nvme1link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme1option_rom')
        self.slot_front_nvme1option_rom = attributes[:'slot_front_nvme1option_rom']
      else
        self.slot_front_nvme1option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme20option_rom')
        self.slot_front_nvme20option_rom = attributes[:'slot_front_nvme20option_rom']
      else
        self.slot_front_nvme20option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme21option_rom')
        self.slot_front_nvme21option_rom = attributes[:'slot_front_nvme21option_rom']
      else
        self.slot_front_nvme21option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme22option_rom')
        self.slot_front_nvme22option_rom = attributes[:'slot_front_nvme22option_rom']
      else
        self.slot_front_nvme22option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme23option_rom')
        self.slot_front_nvme23option_rom = attributes[:'slot_front_nvme23option_rom']
      else
        self.slot_front_nvme23option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme24option_rom')
        self.slot_front_nvme24option_rom = attributes[:'slot_front_nvme24option_rom']
      else
        self.slot_front_nvme24option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme2link_speed')
        self.slot_front_nvme2link_speed = attributes[:'slot_front_nvme2link_speed']
      else
        self.slot_front_nvme2link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme2option_rom')
        self.slot_front_nvme2option_rom = attributes[:'slot_front_nvme2option_rom']
      else
        self.slot_front_nvme2option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme3link_speed')
        self.slot_front_nvme3link_speed = attributes[:'slot_front_nvme3link_speed']
      else
        self.slot_front_nvme3link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme3option_rom')
        self.slot_front_nvme3option_rom = attributes[:'slot_front_nvme3option_rom']
      else
        self.slot_front_nvme3option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme4link_speed')
        self.slot_front_nvme4link_speed = attributes[:'slot_front_nvme4link_speed']
      else
        self.slot_front_nvme4link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme4option_rom')
        self.slot_front_nvme4option_rom = attributes[:'slot_front_nvme4option_rom']
      else
        self.slot_front_nvme4option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme5link_speed')
        self.slot_front_nvme5link_speed = attributes[:'slot_front_nvme5link_speed']
      else
        self.slot_front_nvme5link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme5option_rom')
        self.slot_front_nvme5option_rom = attributes[:'slot_front_nvme5option_rom']
      else
        self.slot_front_nvme5option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme6link_speed')
        self.slot_front_nvme6link_speed = attributes[:'slot_front_nvme6link_speed']
      else
        self.slot_front_nvme6link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme6option_rom')
        self.slot_front_nvme6option_rom = attributes[:'slot_front_nvme6option_rom']
      else
        self.slot_front_nvme6option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme7link_speed')
        self.slot_front_nvme7link_speed = attributes[:'slot_front_nvme7link_speed']
      else
        self.slot_front_nvme7link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme7option_rom')
        self.slot_front_nvme7option_rom = attributes[:'slot_front_nvme7option_rom']
      else
        self.slot_front_nvme7option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme8link_speed')
        self.slot_front_nvme8link_speed = attributes[:'slot_front_nvme8link_speed']
      else
        self.slot_front_nvme8link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme8option_rom')
        self.slot_front_nvme8option_rom = attributes[:'slot_front_nvme8option_rom']
      else
        self.slot_front_nvme8option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme9link_speed')
        self.slot_front_nvme9link_speed = attributes[:'slot_front_nvme9link_speed']
      else
        self.slot_front_nvme9link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_front_nvme9option_rom')
        self.slot_front_nvme9option_rom = attributes[:'slot_front_nvme9option_rom']
      else
        self.slot_front_nvme9option_rom = 'platform-default'
      end

      if attributes.key?(:'slot_front_slot5link_speed')
        self.slot_front_slot5link_speed = attributes[:'slot_front_slot5link_speed']
      else
        self.slot_front_slot5link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_front_slot6link_speed')
        self.slot_front_slot6link_speed = attributes[:'slot_front_slot6link_speed']
      else
        self.slot_front_slot6link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_gpu1state')
        self.slot_gpu1state = attributes[:'slot_gpu1state']
      else
        self.slot_gpu1state = 'platform-default'
      end

      if attributes.key?(:'slot_gpu2state')
        self.slot_gpu2state = attributes[:'slot_gpu2state']
      else
        self.slot_gpu2state = 'platform-default'
      end

      if attributes.key?(:'slot_gpu3state')
        self.slot_gpu3state = attributes[:'slot_gpu3state']
      else
        self.slot_gpu3state = 'platform-default'
      end

      if attributes.key?(:'slot_gpu4state')
        self.slot_gpu4state = attributes[:'slot_gpu4state']
      else
        self.slot_gpu4state = 'platform-default'
      end

      if attributes.key?(:'slot_gpu5state')
        self.slot_gpu5state = attributes[:'slot_gpu5state']
      else
        self.slot_gpu5state = 'platform-default'
      end

      if attributes.key?(:'slot_gpu6state')
        self.slot_gpu6state = attributes[:'slot_gpu6state']
      else
        self.slot_gpu6state = 'platform-default'
      end

      if attributes.key?(:'slot_gpu7state')
        self.slot_gpu7state = attributes[:'slot_gpu7state']
      else
        self.slot_gpu7state = 'platform-default'
      end

      if attributes.key?(:'slot_gpu8state')
        self.slot_gpu8state = attributes[:'slot_gpu8state']
      else
        self.slot_gpu8state = 'platform-default'
      end

      if attributes.key?(:'slot_hba_link_speed')
        self.slot_hba_link_speed = attributes[:'slot_hba_link_speed']
      else
        self.slot_hba_link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_hba_state')
        self.slot_hba_state = attributes[:'slot_hba_state']
      else
        self.slot_hba_state = 'platform-default'
      end

      if attributes.key?(:'slot_lom1link')
        self.slot_lom1link = attributes[:'slot_lom1link']
      else
        self.slot_lom1link = 'platform-default'
      end

      if attributes.key?(:'slot_lom2link')
        self.slot_lom2link = attributes[:'slot_lom2link']
      else
        self.slot_lom2link = 'platform-default'
      end

      if attributes.key?(:'slot_mezz_state')
        self.slot_mezz_state = attributes[:'slot_mezz_state']
      else
        self.slot_mezz_state = 'platform-default'
      end

      if attributes.key?(:'slot_mlom_link_speed')
        self.slot_mlom_link_speed = attributes[:'slot_mlom_link_speed']
      else
        self.slot_mlom_link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_mlom_state')
        self.slot_mlom_state = attributes[:'slot_mlom_state']
      else
        self.slot_mlom_state = 'platform-default'
      end

      if attributes.key?(:'slot_mraid_link_speed')
        self.slot_mraid_link_speed = attributes[:'slot_mraid_link_speed']
      else
        self.slot_mraid_link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_mraid_state')
        self.slot_mraid_state = attributes[:'slot_mraid_state']
      else
        self.slot_mraid_state = 'platform-default'
      end

      if attributes.key?(:'slot_n10state')
        self.slot_n10state = attributes[:'slot_n10state']
      else
        self.slot_n10state = 'platform-default'
      end

      if attributes.key?(:'slot_n11state')
        self.slot_n11state = attributes[:'slot_n11state']
      else
        self.slot_n11state = 'platform-default'
      end

      if attributes.key?(:'slot_n12state')
        self.slot_n12state = attributes[:'slot_n12state']
      else
        self.slot_n12state = 'platform-default'
      end

      if attributes.key?(:'slot_n13state')
        self.slot_n13state = attributes[:'slot_n13state']
      else
        self.slot_n13state = 'platform-default'
      end

      if attributes.key?(:'slot_n14state')
        self.slot_n14state = attributes[:'slot_n14state']
      else
        self.slot_n14state = 'platform-default'
      end

      if attributes.key?(:'slot_n15state')
        self.slot_n15state = attributes[:'slot_n15state']
      else
        self.slot_n15state = 'platform-default'
      end

      if attributes.key?(:'slot_n16state')
        self.slot_n16state = attributes[:'slot_n16state']
      else
        self.slot_n16state = 'platform-default'
      end

      if attributes.key?(:'slot_n17state')
        self.slot_n17state = attributes[:'slot_n17state']
      else
        self.slot_n17state = 'platform-default'
      end

      if attributes.key?(:'slot_n18state')
        self.slot_n18state = attributes[:'slot_n18state']
      else
        self.slot_n18state = 'platform-default'
      end

      if attributes.key?(:'slot_n19state')
        self.slot_n19state = attributes[:'slot_n19state']
      else
        self.slot_n19state = 'platform-default'
      end

      if attributes.key?(:'slot_n1state')
        self.slot_n1state = attributes[:'slot_n1state']
      else
        self.slot_n1state = 'platform-default'
      end

      if attributes.key?(:'slot_n20state')
        self.slot_n20state = attributes[:'slot_n20state']
      else
        self.slot_n20state = 'platform-default'
      end

      if attributes.key?(:'slot_n21state')
        self.slot_n21state = attributes[:'slot_n21state']
      else
        self.slot_n21state = 'platform-default'
      end

      if attributes.key?(:'slot_n22state')
        self.slot_n22state = attributes[:'slot_n22state']
      else
        self.slot_n22state = 'platform-default'
      end

      if attributes.key?(:'slot_n23state')
        self.slot_n23state = attributes[:'slot_n23state']
      else
        self.slot_n23state = 'platform-default'
      end

      if attributes.key?(:'slot_n24state')
        self.slot_n24state = attributes[:'slot_n24state']
      else
        self.slot_n24state = 'platform-default'
      end

      if attributes.key?(:'slot_n2state')
        self.slot_n2state = attributes[:'slot_n2state']
      else
        self.slot_n2state = 'platform-default'
      end

      if attributes.key?(:'slot_n3state')
        self.slot_n3state = attributes[:'slot_n3state']
      else
        self.slot_n3state = 'platform-default'
      end

      if attributes.key?(:'slot_n4state')
        self.slot_n4state = attributes[:'slot_n4state']
      else
        self.slot_n4state = 'platform-default'
      end

      if attributes.key?(:'slot_n5state')
        self.slot_n5state = attributes[:'slot_n5state']
      else
        self.slot_n5state = 'platform-default'
      end

      if attributes.key?(:'slot_n6state')
        self.slot_n6state = attributes[:'slot_n6state']
      else
        self.slot_n6state = 'platform-default'
      end

      if attributes.key?(:'slot_n7state')
        self.slot_n7state = attributes[:'slot_n7state']
      else
        self.slot_n7state = 'platform-default'
      end

      if attributes.key?(:'slot_n8state')
        self.slot_n8state = attributes[:'slot_n8state']
      else
        self.slot_n8state = 'platform-default'
      end

      if attributes.key?(:'slot_n9state')
        self.slot_n9state = attributes[:'slot_n9state']
      else
        self.slot_n9state = 'platform-default'
      end

      if attributes.key?(:'slot_raid_link_speed')
        self.slot_raid_link_speed = attributes[:'slot_raid_link_speed']
      else
        self.slot_raid_link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_raid_state')
        self.slot_raid_state = attributes[:'slot_raid_state']
      else
        self.slot_raid_state = 'platform-default'
      end

      if attributes.key?(:'slot_rear_nvme1link_speed')
        self.slot_rear_nvme1link_speed = attributes[:'slot_rear_nvme1link_speed']
      else
        self.slot_rear_nvme1link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_rear_nvme1state')
        self.slot_rear_nvme1state = attributes[:'slot_rear_nvme1state']
      else
        self.slot_rear_nvme1state = 'platform-default'
      end

      if attributes.key?(:'slot_rear_nvme2link_speed')
        self.slot_rear_nvme2link_speed = attributes[:'slot_rear_nvme2link_speed']
      else
        self.slot_rear_nvme2link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_rear_nvme2state')
        self.slot_rear_nvme2state = attributes[:'slot_rear_nvme2state']
      else
        self.slot_rear_nvme2state = 'platform-default'
      end

      if attributes.key?(:'slot_rear_nvme3link_speed')
        self.slot_rear_nvme3link_speed = attributes[:'slot_rear_nvme3link_speed']
      else
        self.slot_rear_nvme3link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_rear_nvme3state')
        self.slot_rear_nvme3state = attributes[:'slot_rear_nvme3state']
      else
        self.slot_rear_nvme3state = 'platform-default'
      end

      if attributes.key?(:'slot_rear_nvme4link_speed')
        self.slot_rear_nvme4link_speed = attributes[:'slot_rear_nvme4link_speed']
      else
        self.slot_rear_nvme4link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_rear_nvme4state')
        self.slot_rear_nvme4state = attributes[:'slot_rear_nvme4state']
      else
        self.slot_rear_nvme4state = 'platform-default'
      end

      if attributes.key?(:'slot_rear_nvme5state')
        self.slot_rear_nvme5state = attributes[:'slot_rear_nvme5state']
      else
        self.slot_rear_nvme5state = 'platform-default'
      end

      if attributes.key?(:'slot_rear_nvme6state')
        self.slot_rear_nvme6state = attributes[:'slot_rear_nvme6state']
      else
        self.slot_rear_nvme6state = 'platform-default'
      end

      if attributes.key?(:'slot_rear_nvme7state')
        self.slot_rear_nvme7state = attributes[:'slot_rear_nvme7state']
      else
        self.slot_rear_nvme7state = 'platform-default'
      end

      if attributes.key?(:'slot_rear_nvme8state')
        self.slot_rear_nvme8state = attributes[:'slot_rear_nvme8state']
      else
        self.slot_rear_nvme8state = 'platform-default'
      end

      if attributes.key?(:'slot_riser1link_speed')
        self.slot_riser1link_speed = attributes[:'slot_riser1link_speed']
      else
        self.slot_riser1link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_riser1slot1link_speed')
        self.slot_riser1slot1link_speed = attributes[:'slot_riser1slot1link_speed']
      else
        self.slot_riser1slot1link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_riser1slot2link_speed')
        self.slot_riser1slot2link_speed = attributes[:'slot_riser1slot2link_speed']
      else
        self.slot_riser1slot2link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_riser1slot3link_speed')
        self.slot_riser1slot3link_speed = attributes[:'slot_riser1slot3link_speed']
      else
        self.slot_riser1slot3link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_riser2link_speed')
        self.slot_riser2link_speed = attributes[:'slot_riser2link_speed']
      else
        self.slot_riser2link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_riser2slot4link_speed')
        self.slot_riser2slot4link_speed = attributes[:'slot_riser2slot4link_speed']
      else
        self.slot_riser2slot4link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_riser2slot5link_speed')
        self.slot_riser2slot5link_speed = attributes[:'slot_riser2slot5link_speed']
      else
        self.slot_riser2slot5link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_riser2slot6link_speed')
        self.slot_riser2slot6link_speed = attributes[:'slot_riser2slot6link_speed']
      else
        self.slot_riser2slot6link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_sas_state')
        self.slot_sas_state = attributes[:'slot_sas_state']
      else
        self.slot_sas_state = 'platform-default'
      end

      if attributes.key?(:'slot_ssd_slot1link_speed')
        self.slot_ssd_slot1link_speed = attributes[:'slot_ssd_slot1link_speed']
      else
        self.slot_ssd_slot1link_speed = 'platform-default'
      end

      if attributes.key?(:'slot_ssd_slot2link_speed')
        self.slot_ssd_slot2link_speed = attributes[:'slot_ssd_slot2link_speed']
      else
        self.slot_ssd_slot2link_speed = 'platform-default'
      end

      if attributes.key?(:'smee')
        self.smee = attributes[:'smee']
      else
        self.smee = 'platform-default'
      end

      if attributes.key?(:'smt_mode')
        self.smt_mode = attributes[:'smt_mode']
      else
        self.smt_mode = 'platform-default'
      end

      if attributes.key?(:'snc')
        self.snc = attributes[:'snc']
      else
        self.snc = 'platform-default'
      end

      if attributes.key?(:'snoopy_mode_for2lm')
        self.snoopy_mode_for2lm = attributes[:'snoopy_mode_for2lm']
      else
        self.snoopy_mode_for2lm = 'platform-default'
      end

      if attributes.key?(:'snoopy_mode_for_ad')
        self.snoopy_mode_for_ad = attributes[:'snoopy_mode_for_ad']
      else
        self.snoopy_mode_for_ad = 'platform-default'
      end

      if attributes.key?(:'sparing_mode')
        self.sparing_mode = attributes[:'sparing_mode']
      else
        self.sparing_mode = 'platform-default'
      end

      if attributes.key?(:'sr_iov')
        self.sr_iov = attributes[:'sr_iov']
      else
        self.sr_iov = 'platform-default'
      end

      if attributes.key?(:'streamer_prefetch')
        self.streamer_prefetch = attributes[:'streamer_prefetch']
      else
        self.streamer_prefetch = 'platform-default'
      end

      if attributes.key?(:'svm_mode')
        self.svm_mode = attributes[:'svm_mode']
      else
        self.svm_mode = 'platform-default'
      end

      if attributes.key?(:'terminal_type')
        self.terminal_type = attributes[:'terminal_type']
      else
        self.terminal_type = 'platform-default'
      end

      if attributes.key?(:'tpm_control')
        self.tpm_control = attributes[:'tpm_control']
      else
        self.tpm_control = 'platform-default'
      end

      if attributes.key?(:'tpm_pending_operation')
        self.tpm_pending_operation = attributes[:'tpm_pending_operation']
      else
        self.tpm_pending_operation = 'platform-default'
      end

      if attributes.key?(:'tpm_support')
        self.tpm_support = attributes[:'tpm_support']
      else
        self.tpm_support = 'platform-default'
      end

      if attributes.key?(:'tsme')
        self.tsme = attributes[:'tsme']
      else
        self.tsme = 'platform-default'
      end

      if attributes.key?(:'txt_support')
        self.txt_support = attributes[:'txt_support']
      else
        self.txt_support = 'platform-default'
      end

      if attributes.key?(:'ucsm_boot_order_rule')
        self.ucsm_boot_order_rule = attributes[:'ucsm_boot_order_rule']
      else
        self.ucsm_boot_order_rule = 'platform-default'
      end

      if attributes.key?(:'ufs_disable')
        self.ufs_disable = attributes[:'ufs_disable']
      else
        self.ufs_disable = 'platform-default'
      end

      if attributes.key?(:'uma_based_clustering')
        self.uma_based_clustering = attributes[:'uma_based_clustering']
      else
        self.uma_based_clustering = 'platform-default'
      end

      if attributes.key?(:'upi_link_enablement')
        self.upi_link_enablement = attributes[:'upi_link_enablement']
      else
        self.upi_link_enablement = 'platform-default'
      end

      if attributes.key?(:'upi_power_management')
        self.upi_power_management = attributes[:'upi_power_management']
      else
        self.upi_power_management = 'platform-default'
      end

      if attributes.key?(:'usb_emul6064')
        self.usb_emul6064 = attributes[:'usb_emul6064']
      else
        self.usb_emul6064 = 'platform-default'
      end

      if attributes.key?(:'usb_port_front')
        self.usb_port_front = attributes[:'usb_port_front']
      else
        self.usb_port_front = 'platform-default'
      end

      if attributes.key?(:'usb_port_internal')
        self.usb_port_internal = attributes[:'usb_port_internal']
      else
        self.usb_port_internal = 'platform-default'
      end

      if attributes.key?(:'usb_port_kvm')
        self.usb_port_kvm = attributes[:'usb_port_kvm']
      else
        self.usb_port_kvm = 'platform-default'
      end

      if attributes.key?(:'usb_port_rear')
        self.usb_port_rear = attributes[:'usb_port_rear']
      else
        self.usb_port_rear = 'platform-default'
      end

      if attributes.key?(:'usb_port_sd_card')
        self.usb_port_sd_card = attributes[:'usb_port_sd_card']
      else
        self.usb_port_sd_card = 'platform-default'
      end

      if attributes.key?(:'usb_port_vmedia')
        self.usb_port_vmedia = attributes[:'usb_port_vmedia']
      else
        self.usb_port_vmedia = 'platform-default'
      end

      if attributes.key?(:'usb_xhci_support')
        self.usb_xhci_support = attributes[:'usb_xhci_support']
      else
        self.usb_xhci_support = 'platform-default'
      end

      if attributes.key?(:'vga_priority')
        self.vga_priority = attributes[:'vga_priority']
      else
        self.vga_priority = 'platform-default'
      end

      if attributes.key?(:'virtual_numa')
        self.virtual_numa = attributes[:'virtual_numa']
      else
        self.virtual_numa = 'platform-default'
      end

      if attributes.key?(:'vmd_enable')
        self.vmd_enable = attributes[:'vmd_enable']
      else
        self.vmd_enable = 'platform-default'
      end

      if attributes.key?(:'vol_memory_mode')
        self.vol_memory_mode = attributes[:'vol_memory_mode']
      else
        self.vol_memory_mode = 'platform-default'
      end

      if attributes.key?(:'work_load_config')
        self.work_load_config = attributes[:'work_load_config']
      else
        self.work_load_config = 'platform-default'
      end

      if attributes.key?(:'xpt_prefetch')
        self.xpt_prefetch = attributes[:'xpt_prefetch']
      else
        self.xpt_prefetch = 'platform-default'
      end

      if attributes.key?(:'xpt_remote_prefetch')
        self.xpt_remote_prefetch = attributes[:'xpt_remote_prefetch']
      else
        self.xpt_remote_prefetch = 'platform-default'
      end

      if attributes.key?(:'organization')
        self.organization = attributes[:'organization']
      end

      if attributes.key?(:'profiles')
        if (value = attributes[:'profiles']).is_a?(Array)
          self.profiles = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      if @class_id.nil?
        invalid_properties.push('invalid value for "class_id", class_id cannot be nil.')
      end

      if @object_type.nil?
        invalid_properties.push('invalid value for "object_type", object_type cannot be nil.')
      end

      pattern = Regexp.new(/^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-9]\d{4}|[1-9]\d{5}|10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6])$|^(platform-default)$/)
      if !@cbs_dbg_cpu_snp_mem_size_cover.nil? && @cbs_dbg_cpu_snp_mem_size_cover !~ pattern
        invalid_properties.push("invalid value for \"cbs_dbg_cpu_snp_mem_size_cover\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$|^(platform-default)$/)
      if !@memory_size_limit.nil? && @memory_size_limit !~ pattern
        invalid_properties.push("invalid value for \"memory_size_limit\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^(\d\.\d{1,2}|[1-4]\d\.\d{1,2}|50\.[0]{1,2})$|^(platform-default)$/)
      if !@partial_mirror_percent.nil? && @partial_mirror_percent !~ pattern
        invalid_properties.push("invalid value for \"partial_mirror_percent\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$|^(platform-default)$/)
      if !@partial_mirror_value1.nil? && @partial_mirror_value1 !~ pattern
        invalid_properties.push("invalid value for \"partial_mirror_value1\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$|^(platform-default)$/)
      if !@partial_mirror_value2.nil? && @partial_mirror_value2 !~ pattern
        invalid_properties.push("invalid value for \"partial_mirror_value2\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$|^(platform-default)$/)
      if !@partial_mirror_value3.nil? && @partial_mirror_value3 !~ pattern
        invalid_properties.push("invalid value for \"partial_mirror_value3\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$|^(platform-default)$/)
      if !@partial_mirror_value4.nil? && @partial_mirror_value4 !~ pattern
        invalid_properties.push("invalid value for \"partial_mirror_value4\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^([5-9]|1\d|2[0-3])$|^(platform-default)$/)
      if !@patrol_scrub_duration.nil? && @patrol_scrub_duration !~ pattern
        invalid_properties.push("invalid value for \"patrol_scrub_duration\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^([0-9a-fA-F]{1,16})$|^(platform-default)$/)
      if !@sgx_epoch0.nil? && @sgx_epoch0 !~ pattern
        invalid_properties.push("invalid value for \"sgx_epoch0\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^([0-9a-fA-F]{1,16})$|^(platform-default)$/)
      if !@sgx_epoch1.nil? && @sgx_epoch1 !~ pattern
        invalid_properties.push("invalid value for \"sgx_epoch1\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^([0-9a-fA-F]{1,16})$|^(platform-default)$/)
      if !@sgx_le_pub_key_hash0.nil? && @sgx_le_pub_key_hash0 !~ pattern
        invalid_properties.push("invalid value for \"sgx_le_pub_key_hash0\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^([0-9a-fA-F]{1,16})$|^(platform-default)$/)
      if !@sgx_le_pub_key_hash1.nil? && @sgx_le_pub_key_hash1 !~ pattern
        invalid_properties.push("invalid value for \"sgx_le_pub_key_hash1\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^([0-9a-fA-F]{1,16})$|^(platform-default)$/)
      if !@sgx_le_pub_key_hash2.nil? && @sgx_le_pub_key_hash2 !~ pattern
        invalid_properties.push("invalid value for \"sgx_le_pub_key_hash2\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^([0-9a-fA-F]{1,16})$|^(platform-default)$/)
      if !@sgx_le_pub_key_hash3.nil? && @sgx_le_pub_key_hash3 !~ pattern
        invalid_properties.push("invalid value for \"sgx_le_pub_key_hash3\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @class_id.nil?
      class_id_validator = EnumAttributeValidator.new('String', ["bios.Policy"])
      return false unless class_id_validator.valid?(@class_id)
      return false if @object_type.nil?
      object_type_validator = EnumAttributeValidator.new('String', ["bios.Policy"])
      return false unless object_type_validator.valid?(@object_type)
      acs_control_gpu1state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless acs_control_gpu1state_validator.valid?(@acs_control_gpu1state)
      acs_control_gpu2state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless acs_control_gpu2state_validator.valid?(@acs_control_gpu2state)
      acs_control_gpu3state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless acs_control_gpu3state_validator.valid?(@acs_control_gpu3state)
      acs_control_gpu4state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless acs_control_gpu4state_validator.valid?(@acs_control_gpu4state)
      acs_control_gpu5state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless acs_control_gpu5state_validator.valid?(@acs_control_gpu5state)
      acs_control_gpu6state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless acs_control_gpu6state_validator.valid?(@acs_control_gpu6state)
      acs_control_gpu7state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless acs_control_gpu7state_validator.valid?(@acs_control_gpu7state)
      acs_control_gpu8state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless acs_control_gpu8state_validator.valid?(@acs_control_gpu8state)
      acs_control_slot11state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless acs_control_slot11state_validator.valid?(@acs_control_slot11state)
      acs_control_slot12state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless acs_control_slot12state_validator.valid?(@acs_control_slot12state)
      acs_control_slot13state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless acs_control_slot13state_validator.valid?(@acs_control_slot13state)
      acs_control_slot14state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless acs_control_slot14state_validator.valid?(@acs_control_slot14state)
      adjacent_cache_line_prefetch_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless adjacent_cache_line_prefetch_validator.valid?(@adjacent_cache_line_prefetch)
      advanced_mem_test_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      return false unless advanced_mem_test_validator.valid?(@advanced_mem_test)
      all_usb_devices_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless all_usb_devices_validator.valid?(@all_usb_devices)
      altitude_validator = EnumAttributeValidator.new('String', ["platform-default", "300-m", "900-m", "1500-m", "3000-m", "auto"])
      return false unless altitude_validator.valid?(@altitude)
      aspm_support_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "Force L0s", "L1 Only"])
      return false unless aspm_support_validator.valid?(@aspm_support)
      assert_nmi_on_perr_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless assert_nmi_on_perr_validator.valid?(@assert_nmi_on_perr)
      assert_nmi_on_serr_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless assert_nmi_on_serr_validator.valid?(@assert_nmi_on_serr)
      auto_cc_state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless auto_cc_state_validator.valid?(@auto_cc_state)
      autonumous_cstate_enable_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless autonumous_cstate_enable_validator.valid?(@autonumous_cstate_enable)
      baud_rate_validator = EnumAttributeValidator.new('String', ["platform-default", "9600", "19200", "38400", "57600", "115200"])
      return false unless baud_rate_validator.valid?(@baud_rate)
      bme_dma_mitigation_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless bme_dma_mitigation_validator.valid?(@bme_dma_mitigation)
      boot_option_num_retry_validator = EnumAttributeValidator.new('String', ["platform-default", "5", "13", "Infinite"])
      return false unless boot_option_num_retry_validator.valid?(@boot_option_num_retry)
      boot_option_re_cool_down_validator = EnumAttributeValidator.new('String', ["platform-default", "15", "45", "90"])
      return false unless boot_option_re_cool_down_validator.valid?(@boot_option_re_cool_down)
      boot_option_retry_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless boot_option_retry_validator.valid?(@boot_option_retry)
      boot_performance_mode_validator = EnumAttributeValidator.new('String', ["platform-default", "Max Efficient", "Max Performance", "Set by Intel NM"])
      return false unless boot_performance_mode_validator.valid?(@boot_performance_mode)
      burst_and_postponed_refresh_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless burst_and_postponed_refresh_validator.valid?(@burst_and_postponed_refresh)
      c1auto_demotion_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless c1auto_demotion_validator.valid?(@c1auto_demotion)
      c1auto_un_demotion_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless c1auto_un_demotion_validator.valid?(@c1auto_un_demotion)
      cbs_cmn_apbdis_validator = EnumAttributeValidator.new('String', ["platform-default", "0", "1", "Auto"])
      return false unless cbs_cmn_apbdis_validator.valid?(@cbs_cmn_apbdis)
      cbs_cmn_cpu_cpb_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled"])
      return false unless cbs_cmn_cpu_cpb_validator.valid?(@cbs_cmn_cpu_cpb)
      cbs_cmn_cpu_gen_downcore_ctrl_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "FOUR (2 + 2)", "FOUR (4 + 0)", "SIX (3 + 3)", "THREE (3 + 0)", "TWO (1 + 1)", "TWO (2 + 0)"])
      return false unless cbs_cmn_cpu_gen_downcore_ctrl_validator.valid?(@cbs_cmn_cpu_gen_downcore_ctrl)
      cbs_cmn_cpu_global_cstate_ctrl_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      return false unless cbs_cmn_cpu_global_cstate_ctrl_validator.valid?(@cbs_cmn_cpu_global_cstate_ctrl)
      cbs_cmn_cpu_l1stream_hw_prefetcher_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      return false unless cbs_cmn_cpu_l1stream_hw_prefetcher_validator.valid?(@cbs_cmn_cpu_l1stream_hw_prefetcher)
      cbs_cmn_cpu_l2stream_hw_prefetcher_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      return false unless cbs_cmn_cpu_l2stream_hw_prefetcher_validator.valid?(@cbs_cmn_cpu_l2stream_hw_prefetcher)
      cbs_cmn_cpu_smee_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      return false unless cbs_cmn_cpu_smee_validator.valid?(@cbs_cmn_cpu_smee)
      cbs_cmn_cpu_streaming_stores_ctrl_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      return false unless cbs_cmn_cpu_streaming_stores_ctrl_validator.valid?(@cbs_cmn_cpu_streaming_stores_ctrl)
      cbs_cmn_determinism_slider_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Performance", "Power"])
      return false unless cbs_cmn_determinism_slider_validator.valid?(@cbs_cmn_determinism_slider)
      cbs_cmn_efficiency_mode_en_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Enabled"])
      return false unless cbs_cmn_efficiency_mode_en_validator.valid?(@cbs_cmn_efficiency_mode_en)
      cbs_cmn_fixed_soc_pstate_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "P0", "P1", "P2", "P3"])
      return false unless cbs_cmn_fixed_soc_pstate_validator.valid?(@cbs_cmn_fixed_soc_pstate)
      cbs_cmn_gnb_nb_iommu_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      return false unless cbs_cmn_gnb_nb_iommu_validator.valid?(@cbs_cmn_gnb_nb_iommu)
      cbs_cmn_gnb_smu_df_cstates_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      return false unless cbs_cmn_gnb_smu_df_cstates_validator.valid?(@cbs_cmn_gnb_smu_df_cstates)
      cbs_cmn_gnb_smucppc_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      return false unless cbs_cmn_gnb_smucppc_validator.valid?(@cbs_cmn_gnb_smucppc)
      cbs_cmn_mem_ctrl_bank_group_swap_ddr4_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      return false unless cbs_cmn_mem_ctrl_bank_group_swap_ddr4_validator.valid?(@cbs_cmn_mem_ctrl_bank_group_swap_ddr4)
      cbs_cmn_mem_map_bank_interleave_ddr4_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled"])
      return false unless cbs_cmn_mem_map_bank_interleave_ddr4_validator.valid?(@cbs_cmn_mem_map_bank_interleave_ddr4)
      cbs_cmnc_tdp_ctl_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Manual"])
      return false unless cbs_cmnc_tdp_ctl_validator.valid?(@cbs_cmnc_tdp_ctl)
      cbs_cpu_ccd_ctrl_ssp_validator = EnumAttributeValidator.new('String', ["platform-default", "2 CCDs", "3 CCDs", "4 CCDs", "6 CCDs", "Auto"])
      return false unless cbs_cpu_ccd_ctrl_ssp_validator.valid?(@cbs_cpu_ccd_ctrl_ssp)
      cbs_cpu_core_ctrl_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "FIVE (5 + 0)", "FOUR (4 + 0)", "ONE (1 + 0)", "SEVEN (7 + 0)", "SIX (6 + 0)", "THREE (3 + 0)", "TWO (2 + 0)"])
      return false unless cbs_cpu_core_ctrl_validator.valid?(@cbs_cpu_core_ctrl)
      cbs_cpu_smt_ctrl_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      return false unless cbs_cpu_smt_ctrl_validator.valid?(@cbs_cpu_smt_ctrl)
      cbs_dbg_cpu_snp_mem_cover_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Custom", "disabled", "enabled"])
      return false unless cbs_dbg_cpu_snp_mem_cover_validator.valid?(@cbs_dbg_cpu_snp_mem_cover)
      return false if !@cbs_dbg_cpu_snp_mem_size_cover.nil? && @cbs_dbg_cpu_snp_mem_size_cover !~ Regexp.new(/^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-9]\d{4}|[1-9]\d{5}|10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6])$|^(platform-default)$/)
      cbs_df_cmn_acpi_srat_l3numa_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      return false unless cbs_df_cmn_acpi_srat_l3numa_validator.valid?(@cbs_df_cmn_acpi_srat_l3numa)
      cbs_df_cmn_dram_nps_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "NPS0", "NPS1", "NPS2", "NPS4"])
      return false unless cbs_df_cmn_dram_nps_validator.valid?(@cbs_df_cmn_dram_nps)
      cbs_df_cmn_mem_intlv_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Channel", "Die", "None", "Socket"])
      return false unless cbs_df_cmn_mem_intlv_validator.valid?(@cbs_df_cmn_mem_intlv)
      cbs_df_cmn_mem_intlv_size_validator = EnumAttributeValidator.new('String', ["platform-default", "256 Bytes", "512 Bytes", "1 KB", "2 KB", "4 KB", "Auto"])
      return false unless cbs_df_cmn_mem_intlv_size_validator.valid?(@cbs_df_cmn_mem_intlv_size)
      cbs_sev_snp_support_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless cbs_sev_snp_support_validator.valid?(@cbs_sev_snp_support)
      cdn_enable_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless cdn_enable_validator.valid?(@cdn_enable)
      cdn_support_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "LOMs Only"])
      return false unless cdn_support_validator.valid?(@cdn_support)
      channel_inter_leave_validator = EnumAttributeValidator.new('String', ["platform-default", "1-way", "2-way", "3-way", "4-way", "auto"])
      return false unless channel_inter_leave_validator.valid?(@channel_inter_leave)
      cisco_adaptive_mem_training_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless cisco_adaptive_mem_training_validator.valid?(@cisco_adaptive_mem_training)
      cisco_debug_level_validator = EnumAttributeValidator.new('String', ["platform-default", "Maximum", "Minimum", "Normal"])
      return false unless cisco_debug_level_validator.valid?(@cisco_debug_level)
      cisco_oprom_launch_optimization_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless cisco_oprom_launch_optimization_validator.valid?(@cisco_oprom_launch_optimization)
      cisco_xgmi_max_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless cisco_xgmi_max_speed_validator.valid?(@cisco_xgmi_max_speed)
      cke_low_policy_validator = EnumAttributeValidator.new('String', ["platform-default", "auto", "disabled", "fast", "slow"])
      return false unless cke_low_policy_validator.valid?(@cke_low_policy)
      closed_loop_therm_throtl_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless closed_loop_therm_throtl_validator.valid?(@closed_loop_therm_throtl)
      cmci_enable_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless cmci_enable_validator.valid?(@cmci_enable)
      config_tdp_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless config_tdp_validator.valid?(@config_tdp)
      config_tdp_level_validator = EnumAttributeValidator.new('String', ["platform-default", "Level 1", "Level 2", "Normal"])
      return false unless config_tdp_level_validator.valid?(@config_tdp_level)
      console_redirection_validator = EnumAttributeValidator.new('String', ["platform-default", "com-0", "com-1", "disabled", "enabled", "serial-port-a"])
      return false unless console_redirection_validator.valid?(@console_redirection)
      core_multi_processing_validator = EnumAttributeValidator.new('String', ["platform-default", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "all"])
      return false unless core_multi_processing_validator.valid?(@core_multi_processing)
      cpu_energy_performance_validator = EnumAttributeValidator.new('String', ["platform-default", "balanced-energy", "balanced-performance", "balanced-power", "energy-efficient", "performance", "power"])
      return false unless cpu_energy_performance_validator.valid?(@cpu_energy_performance)
      cpu_frequency_floor_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless cpu_frequency_floor_validator.valid?(@cpu_frequency_floor)
      cpu_perf_enhancement_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled"])
      return false unless cpu_perf_enhancement_validator.valid?(@cpu_perf_enhancement)
      cpu_performance_validator = EnumAttributeValidator.new('String', ["platform-default", "custom", "enterprise", "high-throughput", "hpc"])
      return false unless cpu_performance_validator.valid?(@cpu_performance)
      cpu_power_management_validator = EnumAttributeValidator.new('String', ["platform-default", "custom", "disabled", "energy-efficient", "performance"])
      return false unless cpu_power_management_validator.valid?(@cpu_power_management)
      cr_qos_validator = EnumAttributeValidator.new('String', ["platform-default", "Disabled", "Mode 0 - Disable the PMem QoS Feature", "Mode 1 - M2M QoS Enable and CHA QoS Disable", "Mode 2 - M2M QoS Enable and CHA QoS Enable", "Recipe 1", "Recipe 2", "Recipe 3"])
      return false unless cr_qos_validator.valid?(@cr_qos)
      crfastgo_config_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Default", "Disable optimization", "Enable optimization", "Option 1", "Option 2", "Option 3", "Option 4", "Option 5"])
      return false unless crfastgo_config_validator.valid?(@crfastgo_config)
      dcpmm_firmware_downgrade_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless dcpmm_firmware_downgrade_validator.valid?(@dcpmm_firmware_downgrade)
      demand_scrub_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless demand_scrub_validator.valid?(@demand_scrub)
      direct_cache_access_validator = EnumAttributeValidator.new('String', ["platform-default", "auto", "disabled", "enabled"])
      return false unless direct_cache_access_validator.valid?(@direct_cache_access)
      dram_clock_throttling_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Balanced", "Energy Efficient", "Performance"])
      return false unless dram_clock_throttling_validator.valid?(@dram_clock_throttling)
      dram_refresh_rate_validator = EnumAttributeValidator.new('String', ["platform-default", "1x", "2x", "3x", "4x", "Auto"])
      return false unless dram_refresh_rate_validator.valid?(@dram_refresh_rate)
      dram_sw_thermal_throttling_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless dram_sw_thermal_throttling_validator.valid?(@dram_sw_thermal_throttling)
      eadr_support_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      return false unless eadr_support_validator.valid?(@eadr_support)
      edpc_en_validator = EnumAttributeValidator.new('String', ["platform-default", "Disabled", "On Fatal Error", "On Fatal and Non-Fatal Errors"])
      return false unless edpc_en_validator.valid?(@edpc_en)
      enable_clock_spread_spec_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless enable_clock_spread_spec_validator.valid?(@enable_clock_spread_spec)
      enable_mktme_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless enable_mktme_validator.valid?(@enable_mktme)
      enable_sgx_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless enable_sgx_validator.valid?(@enable_sgx)
      enable_tme_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless enable_tme_validator.valid?(@enable_tme)
      energy_efficient_turbo_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless energy_efficient_turbo_validator.valid?(@energy_efficient_turbo)
      eng_perf_tuning_validator = EnumAttributeValidator.new('String', ["platform-default", "BIOS", "OS"])
      return false unless eng_perf_tuning_validator.valid?(@eng_perf_tuning)
      enhanced_intel_speed_step_tech_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless enhanced_intel_speed_step_tech_validator.valid?(@enhanced_intel_speed_step_tech)
      epoch_update_validator = EnumAttributeValidator.new('String', ["platform-default", "Change to New Random Owner EPOCHs", "Manual User Defined Owner EPOCHs", "SGX Owner EPOCH activated"])
      return false unless epoch_update_validator.valid?(@epoch_update)
      epp_enable_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless epp_enable_validator.valid?(@epp_enable)
      epp_profile_validator = EnumAttributeValidator.new('String', ["platform-default", "Balanced Performance", "Balanced Power", "Performance", "Power"])
      return false unless epp_profile_validator.valid?(@epp_profile)
      execute_disable_bit_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless execute_disable_bit_validator.valid?(@execute_disable_bit)
      extended_apic_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "X2APIC", "XAPIC"])
      return false unless extended_apic_validator.valid?(@extended_apic)
      flow_control_validator = EnumAttributeValidator.new('String', ["platform-default", "none", "rts-cts"])
      return false unless flow_control_validator.valid?(@flow_control)
      frb2enable_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless frb2enable_validator.valid?(@frb2enable)
      hardware_prefetch_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless hardware_prefetch_validator.valid?(@hardware_prefetch)
      hwpm_enable_validator = EnumAttributeValidator.new('String', ["platform-default", "Disabled", "HWPM Native Mode", "HWPM OOB Mode", "NATIVE MODE", "Native Mode with no Legacy", "OOB MODE"])
      return false unless hwpm_enable_validator.valid?(@hwpm_enable)
      imc_interleave_validator = EnumAttributeValidator.new('String', ["platform-default", "1-way Interleave", "2-way Interleave", "Auto"])
      return false unless imc_interleave_validator.valid?(@imc_interleave)
      intel_dynamic_speed_select_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless intel_dynamic_speed_select_validator.valid?(@intel_dynamic_speed_select)
      intel_hyper_threading_tech_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless intel_hyper_threading_tech_validator.valid?(@intel_hyper_threading_tech)
      intel_speed_select_validator = EnumAttributeValidator.new('String', ["platform-default", "Base", "Config 1", "Config 2", "Config 3", "Config 4"])
      return false unless intel_speed_select_validator.valid?(@intel_speed_select)
      intel_turbo_boost_tech_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless intel_turbo_boost_tech_validator.valid?(@intel_turbo_boost_tech)
      intel_virtualization_technology_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless intel_virtualization_technology_validator.valid?(@intel_virtualization_technology)
      intel_vt_for_directed_io_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless intel_vt_for_directed_io_validator.valid?(@intel_vt_for_directed_io)
      intel_vtd_coherency_support_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless intel_vtd_coherency_support_validator.valid?(@intel_vtd_coherency_support)
      intel_vtd_interrupt_remapping_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless intel_vtd_interrupt_remapping_validator.valid?(@intel_vtd_interrupt_remapping)
      intel_vtd_pass_through_dma_support_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless intel_vtd_pass_through_dma_support_validator.valid?(@intel_vtd_pass_through_dma_support)
      intel_vtdats_support_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless intel_vtdats_support_validator.valid?(@intel_vtdats_support)
      ioh_error_enable_validator = EnumAttributeValidator.new('String', ["platform-default", "No", "Yes"])
      return false unless ioh_error_enable_validator.valid?(@ioh_error_enable)
      ioh_resource_validator = EnumAttributeValidator.new('String', ["platform-default", "IOH0 24k IOH1 40k", "IOH0 32k IOH1 32k", "IOH0 40k IOH1 24k", "IOH0 48k IOH1 16k", "IOH0 56k IOH1 8k"])
      return false unless ioh_resource_validator.valid?(@ioh_resource)
      ip_prefetch_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless ip_prefetch_validator.valid?(@ip_prefetch)
      ipv4http_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless ipv4http_validator.valid?(@ipv4http)
      ipv4pxe_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless ipv4pxe_validator.valid?(@ipv4pxe)
      ipv6http_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless ipv6http_validator.valid?(@ipv6http)
      ipv6pxe_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless ipv6pxe_validator.valid?(@ipv6pxe)
      kti_prefetch_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      return false unless kti_prefetch_validator.valid?(@kti_prefetch)
      legacy_os_redirection_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless legacy_os_redirection_validator.valid?(@legacy_os_redirection)
      legacy_usb_support_validator = EnumAttributeValidator.new('String', ["platform-default", "auto", "disabled", "enabled"])
      return false unless legacy_usb_support_validator.valid?(@legacy_usb_support)
      llc_alloc_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      return false unless llc_alloc_validator.valid?(@llc_alloc)
      llc_prefetch_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless llc_prefetch_validator.valid?(@llc_prefetch)
      lom_port0state_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless lom_port0state_validator.valid?(@lom_port0state)
      lom_port1state_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless lom_port1state_validator.valid?(@lom_port1state)
      lom_port2state_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless lom_port2state_validator.valid?(@lom_port2state)
      lom_port3state_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless lom_port3state_validator.valid?(@lom_port3state)
      lom_ports_all_state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless lom_ports_all_state_validator.valid?(@lom_ports_all_state)
      lv_ddr_mode_validator = EnumAttributeValidator.new('String', ["platform-default", "auto", "performance-mode", "power-saving-mode"])
      return false unless lv_ddr_mode_validator.valid?(@lv_ddr_mode)
      make_device_non_bootable_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless make_device_non_bootable_validator.valid?(@make_device_non_bootable)
      memory_bandwidth_boost_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless memory_bandwidth_boost_validator.valid?(@memory_bandwidth_boost)
      memory_inter_leave_validator = EnumAttributeValidator.new('String', ["platform-default", "1 Way Node Interleave", "2 Way Node Interleave", "4 Way Node Interleave", "8 Way Node Interleave", "disabled", "enabled"])
      return false unless memory_inter_leave_validator.valid?(@memory_inter_leave)
      memory_mapped_io_above4gb_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless memory_mapped_io_above4gb_validator.valid?(@memory_mapped_io_above4gb)
      memory_refresh_rate_validator = EnumAttributeValidator.new('String', ["platform-default", "1x Refresh", "2x Refresh"])
      return false unless memory_refresh_rate_validator.valid?(@memory_refresh_rate)
      return false if !@memory_size_limit.nil? && @memory_size_limit !~ Regexp.new(/^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$|^(platform-default)$/)
      memory_thermal_throttling_validator = EnumAttributeValidator.new('String', ["platform-default", "CLTT with PECI", "Disabled"])
      return false unless memory_thermal_throttling_validator.valid?(@memory_thermal_throttling)
      mirroring_mode_validator = EnumAttributeValidator.new('String', ["platform-default", "inter-socket", "intra-socket"])
      return false unless mirroring_mode_validator.valid?(@mirroring_mode)
      mmcfg_base_validator = EnumAttributeValidator.new('String', ["platform-default", "1 GB", "2 GB", "2.5 GB", "3 GB", "Auto"])
      return false unless mmcfg_base_validator.valid?(@mmcfg_base)
      network_stack_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless network_stack_validator.valid?(@network_stack)
      numa_optimized_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless numa_optimized_validator.valid?(@numa_optimized)
      nvmdimm_perform_config_validator = EnumAttributeValidator.new('String', ["platform-default", "BW Optimized", "Balanced Profile", "Latency Optimized"])
      return false unless nvmdimm_perform_config_validator.valid?(@nvmdimm_perform_config)
      onboard10gbit_lom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless onboard10gbit_lom_validator.valid?(@onboard10gbit_lom)
      onboard_gbit_lom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless onboard_gbit_lom_validator.valid?(@onboard_gbit_lom)
      onboard_scu_storage_support_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless onboard_scu_storage_support_validator.valid?(@onboard_scu_storage_support)
      onboard_scu_storage_sw_stack_validator = EnumAttributeValidator.new('String', ["platform-default", "Intel RSTe", "LSI SW RAID"])
      return false unless onboard_scu_storage_sw_stack_validator.valid?(@onboard_scu_storage_sw_stack)
      operation_mode_validator = EnumAttributeValidator.new('String', ["platform-default", "Test Only", "Test and Repair"])
      return false unless operation_mode_validator.valid?(@operation_mode)
      os_boot_watchdog_timer_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless os_boot_watchdog_timer_validator.valid?(@os_boot_watchdog_timer)
      os_boot_watchdog_timer_policy_validator = EnumAttributeValidator.new('String', ["platform-default", "do-nothing", "power-off", "reset"])
      return false unless os_boot_watchdog_timer_policy_validator.valid?(@os_boot_watchdog_timer_policy)
      os_boot_watchdog_timer_timeout_validator = EnumAttributeValidator.new('String', ["platform-default", "5-minutes", "10-minutes", "15-minutes", "20-minutes"])
      return false unless os_boot_watchdog_timer_timeout_validator.valid?(@os_boot_watchdog_timer_timeout)
      out_of_band_mgmt_port_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless out_of_band_mgmt_port_validator.valid?(@out_of_band_mgmt_port)
      package_cstate_limit_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "C0 C1 State", "C0/C1", "C2", "C6 Non Retention", "C6 Retention", "No Limit"])
      return false unless package_cstate_limit_validator.valid?(@package_cstate_limit)
      panic_high_watermark_validator = EnumAttributeValidator.new('String', ["platform-default", "High", "Low"])
      return false unless panic_high_watermark_validator.valid?(@panic_high_watermark)
      partial_cache_line_sparing_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless partial_cache_line_sparing_validator.valid?(@partial_cache_line_sparing)
      partial_mirror_mode_config_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "Percentage", "Value in GB"])
      return false unless partial_mirror_mode_config_validator.valid?(@partial_mirror_mode_config)
      return false if !@partial_mirror_percent.nil? && @partial_mirror_percent !~ Regexp.new(/^(\d\.\d{1,2}|[1-4]\d\.\d{1,2}|50\.[0]{1,2})$|^(platform-default)$/)
      return false if !@partial_mirror_value1.nil? && @partial_mirror_value1 !~ Regexp.new(/^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$|^(platform-default)$/)
      return false if !@partial_mirror_value2.nil? && @partial_mirror_value2 !~ Regexp.new(/^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$|^(platform-default)$/)
      return false if !@partial_mirror_value3.nil? && @partial_mirror_value3 !~ Regexp.new(/^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$|^(platform-default)$/)
      return false if !@partial_mirror_value4.nil? && @partial_mirror_value4 !~ Regexp.new(/^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$|^(platform-default)$/)
      patrol_scrub_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "Enable at End of POST", "enabled"])
      return false unless patrol_scrub_validator.valid?(@patrol_scrub)
      return false if !@patrol_scrub_duration.nil? && @patrol_scrub_duration !~ Regexp.new(/^([5-9]|1\d|2[0-3])$|^(platform-default)$/)
      pc_ie_ras_support_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless pc_ie_ras_support_validator.valid?(@pc_ie_ras_support)
      pc_ie_ssd_hot_plug_support_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless pc_ie_ssd_hot_plug_support_validator.valid?(@pc_ie_ssd_hot_plug_support)
      pch_usb30mode_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless pch_usb30mode_validator.valid?(@pch_usb30mode)
      pci_option_ro_ms_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless pci_option_ro_ms_validator.valid?(@pci_option_ro_ms)
      pci_rom_clp_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless pci_rom_clp_validator.valid?(@pci_rom_clp)
      pcie_ari_support_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      return false unless pcie_ari_support_validator.valid?(@pcie_ari_support)
      pcie_pll_ssc_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "ZeroPointFive"])
      return false unless pcie_pll_ssc_validator.valid?(@pcie_pll_ssc)
      pcie_slot_mraid1link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless pcie_slot_mraid1link_speed_validator.valid?(@pcie_slot_mraid1link_speed)
      pcie_slot_mraid1option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless pcie_slot_mraid1option_rom_validator.valid?(@pcie_slot_mraid1option_rom)
      pcie_slot_mraid2link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless pcie_slot_mraid2link_speed_validator.valid?(@pcie_slot_mraid2link_speed)
      pcie_slot_mraid2option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless pcie_slot_mraid2option_rom_validator.valid?(@pcie_slot_mraid2option_rom)
      pcie_slot_mstorraid_link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless pcie_slot_mstorraid_link_speed_validator.valid?(@pcie_slot_mstorraid_link_speed)
      pcie_slot_mstorraid_option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless pcie_slot_mstorraid_option_rom_validator.valid?(@pcie_slot_mstorraid_option_rom)
      pcie_slot_nvme1link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless pcie_slot_nvme1link_speed_validator.valid?(@pcie_slot_nvme1link_speed)
      pcie_slot_nvme1option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless pcie_slot_nvme1option_rom_validator.valid?(@pcie_slot_nvme1option_rom)
      pcie_slot_nvme2link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless pcie_slot_nvme2link_speed_validator.valid?(@pcie_slot_nvme2link_speed)
      pcie_slot_nvme2option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless pcie_slot_nvme2option_rom_validator.valid?(@pcie_slot_nvme2option_rom)
      pcie_slot_nvme3link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless pcie_slot_nvme3link_speed_validator.valid?(@pcie_slot_nvme3link_speed)
      pcie_slot_nvme3option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless pcie_slot_nvme3option_rom_validator.valid?(@pcie_slot_nvme3option_rom)
      pcie_slot_nvme4link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless pcie_slot_nvme4link_speed_validator.valid?(@pcie_slot_nvme4link_speed)
      pcie_slot_nvme4option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless pcie_slot_nvme4option_rom_validator.valid?(@pcie_slot_nvme4option_rom)
      pcie_slot_nvme5link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless pcie_slot_nvme5link_speed_validator.valid?(@pcie_slot_nvme5link_speed)
      pcie_slot_nvme5option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless pcie_slot_nvme5option_rom_validator.valid?(@pcie_slot_nvme5option_rom)
      pcie_slot_nvme6link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless pcie_slot_nvme6link_speed_validator.valid?(@pcie_slot_nvme6link_speed)
      pcie_slot_nvme6option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless pcie_slot_nvme6option_rom_validator.valid?(@pcie_slot_nvme6option_rom)
      pcie_slots_cdn_enable_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless pcie_slots_cdn_enable_validator.valid?(@pcie_slots_cdn_enable)
      pop_support_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless pop_support_validator.valid?(@pop_support)
      post_error_pause_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless post_error_pause_validator.valid?(@post_error_pause)
      post_package_repair_validator = EnumAttributeValidator.new('String', ["platform-default", "Disabled", "Hard PPR"])
      return false unless post_package_repair_validator.valid?(@post_package_repair)
      processor_c1e_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless processor_c1e_validator.valid?(@processor_c1e)
      processor_c3report_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless processor_c3report_validator.valid?(@processor_c3report)
      processor_c6report_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless processor_c6report_validator.valid?(@processor_c6report)
      processor_cstate_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless processor_cstate_validator.valid?(@processor_cstate)
      psata_validator = EnumAttributeValidator.new('String', ["platform-default", "AHCI", "Disabled", "LSI SW RAID"])
      return false unless psata_validator.valid?(@psata)
      pstate_coord_type_validator = EnumAttributeValidator.new('String', ["platform-default", "HW ALL", "SW ALL", "SW ANY"])
      return false unless pstate_coord_type_validator.valid?(@pstate_coord_type)
      putty_key_pad_validator = EnumAttributeValidator.new('String', ["platform-default", "ESCN", "LINUX", "SCO", "VT100", "VT400", "XTERMR6"])
      return false unless putty_key_pad_validator.valid?(@putty_key_pad)
      pwr_perf_tuning_validator = EnumAttributeValidator.new('String', ["platform-default", "bios", "os", "peci"])
      return false unless pwr_perf_tuning_validator.valid?(@pwr_perf_tuning)
      qpi_link_frequency_validator = EnumAttributeValidator.new('String', ["platform-default", "6.4-gt/s", "7.2-gt/s", "8.0-gt/s", "9.6-gt/s", "auto"])
      return false unless qpi_link_frequency_validator.valid?(@qpi_link_frequency)
      qpi_link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "10.4GT/s", "11.2GT/s", "9.6GT/s", "Auto"])
      return false unless qpi_link_speed_validator.valid?(@qpi_link_speed)
      qpi_snoop_mode_validator = EnumAttributeValidator.new('String', ["platform-default", "auto", "cluster-on-die", "early-snoop", "home-directory-snoop", "home-directory-snoop-with-osb", "home-snoop"])
      return false unless qpi_snoop_mode_validator.valid?(@qpi_snoop_mode)
      rank_inter_leave_validator = EnumAttributeValidator.new('String', ["platform-default", "1-way", "2-way", "4-way", "8-way", "auto"])
      return false unless rank_inter_leave_validator.valid?(@rank_inter_leave)
      redirection_after_post_validator = EnumAttributeValidator.new('String', ["platform-default", "Always Enable", "Bootloader"])
      return false unless redirection_after_post_validator.valid?(@redirection_after_post)
      sata_mode_select_validator = EnumAttributeValidator.new('String', ["platform-default", "AHCI", "Disabled", "LSI SW RAID"])
      return false unless sata_mode_select_validator.valid?(@sata_mode_select)
      select_memory_ras_configuration_validator = EnumAttributeValidator.new('String', ["platform-default", "adddc-sparing", "lockstep", "maximum-performance", "mirror-mode-1lm", "mirroring", "partial-mirror-mode-1lm", "sparing"])
      return false unless select_memory_ras_configuration_validator.valid?(@select_memory_ras_configuration)
      select_ppr_type_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "Hard PPR", "Soft PPR"])
      return false unless select_ppr_type_validator.valid?(@select_ppr_type)
      serial_port_aenable_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless serial_port_aenable_validator.valid?(@serial_port_aenable)
      sev_validator = EnumAttributeValidator.new('String', ["platform-default", "253 ASIDs", "509 ASIDs", "Auto"])
      return false unless sev_validator.valid?(@sev)
      sgx_auto_registration_agent_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless sgx_auto_registration_agent_validator.valid?(@sgx_auto_registration_agent)
      return false if !@sgx_epoch0.nil? && @sgx_epoch0 !~ Regexp.new(/^([0-9a-fA-F]{1,16})$|^(platform-default)$/)
      return false if !@sgx_epoch1.nil? && @sgx_epoch1 !~ Regexp.new(/^([0-9a-fA-F]{1,16})$|^(platform-default)$/)
      sgx_factory_reset_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless sgx_factory_reset_validator.valid?(@sgx_factory_reset)
      return false if !@sgx_le_pub_key_hash0.nil? && @sgx_le_pub_key_hash0 !~ Regexp.new(/^([0-9a-fA-F]{1,16})$|^(platform-default)$/)
      return false if !@sgx_le_pub_key_hash1.nil? && @sgx_le_pub_key_hash1 !~ Regexp.new(/^([0-9a-fA-F]{1,16})$|^(platform-default)$/)
      return false if !@sgx_le_pub_key_hash2.nil? && @sgx_le_pub_key_hash2 !~ Regexp.new(/^([0-9a-fA-F]{1,16})$|^(platform-default)$/)
      return false if !@sgx_le_pub_key_hash3.nil? && @sgx_le_pub_key_hash3 !~ Regexp.new(/^([0-9a-fA-F]{1,16})$|^(platform-default)$/)
      sgx_le_wr_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless sgx_le_wr_validator.valid?(@sgx_le_wr)
      sgx_package_info_in_band_access_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless sgx_package_info_in_band_access_validator.valid?(@sgx_package_info_in_band_access)
      sgx_qos_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless sgx_qos_validator.valid?(@sgx_qos)
      sha1pcr_bank_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless sha1pcr_bank_validator.valid?(@sha1pcr_bank)
      sha256pcr_bank_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless sha256pcr_bank_validator.valid?(@sha256pcr_bank)
      single_pctl_enable_validator = EnumAttributeValidator.new('String', ["platform-default", "No", "Yes"])
      return false unless single_pctl_enable_validator.valid?(@single_pctl_enable)
      slot10link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless slot10link_speed_validator.valid?(@slot10link_speed)
      slot10state_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless slot10state_validator.valid?(@slot10state)
      slot11link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless slot11link_speed_validator.valid?(@slot11link_speed)
      slot11state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot11state_validator.valid?(@slot11state)
      slot12link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless slot12link_speed_validator.valid?(@slot12link_speed)
      slot12state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot12state_validator.valid?(@slot12state)
      slot13state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot13state_validator.valid?(@slot13state)
      slot14state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot14state_validator.valid?(@slot14state)
      slot1link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot1link_speed_validator.valid?(@slot1link_speed)
      slot1state_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless slot1state_validator.valid?(@slot1state)
      slot2link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot2link_speed_validator.valid?(@slot2link_speed)
      slot2state_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless slot2state_validator.valid?(@slot2state)
      slot3link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot3link_speed_validator.valid?(@slot3link_speed)
      slot3state_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless slot3state_validator.valid?(@slot3state)
      slot4link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot4link_speed_validator.valid?(@slot4link_speed)
      slot4state_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless slot4state_validator.valid?(@slot4state)
      slot5link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot5link_speed_validator.valid?(@slot5link_speed)
      slot5state_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless slot5state_validator.valid?(@slot5state)
      slot6link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot6link_speed_validator.valid?(@slot6link_speed)
      slot6state_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless slot6state_validator.valid?(@slot6state)
      slot7link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot7link_speed_validator.valid?(@slot7link_speed)
      slot7state_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless slot7state_validator.valid?(@slot7state)
      slot8link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot8link_speed_validator.valid?(@slot8link_speed)
      slot8state_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless slot8state_validator.valid?(@slot8state)
      slot9link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot9link_speed_validator.valid?(@slot9link_speed)
      slot9state_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless slot9state_validator.valid?(@slot9state)
      slot_flom_link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless slot_flom_link_speed_validator.valid?(@slot_flom_link_speed)
      slot_front_nvme10link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot_front_nvme10link_speed_validator.valid?(@slot_front_nvme10link_speed)
      slot_front_nvme10option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme10option_rom_validator.valid?(@slot_front_nvme10option_rom)
      slot_front_nvme11link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot_front_nvme11link_speed_validator.valid?(@slot_front_nvme11link_speed)
      slot_front_nvme11option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme11option_rom_validator.valid?(@slot_front_nvme11option_rom)
      slot_front_nvme12link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot_front_nvme12link_speed_validator.valid?(@slot_front_nvme12link_speed)
      slot_front_nvme12option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme12option_rom_validator.valid?(@slot_front_nvme12option_rom)
      slot_front_nvme13option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme13option_rom_validator.valid?(@slot_front_nvme13option_rom)
      slot_front_nvme14option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme14option_rom_validator.valid?(@slot_front_nvme14option_rom)
      slot_front_nvme15option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme15option_rom_validator.valid?(@slot_front_nvme15option_rom)
      slot_front_nvme16option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme16option_rom_validator.valid?(@slot_front_nvme16option_rom)
      slot_front_nvme17option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme17option_rom_validator.valid?(@slot_front_nvme17option_rom)
      slot_front_nvme18option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme18option_rom_validator.valid?(@slot_front_nvme18option_rom)
      slot_front_nvme19option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme19option_rom_validator.valid?(@slot_front_nvme19option_rom)
      slot_front_nvme1link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot_front_nvme1link_speed_validator.valid?(@slot_front_nvme1link_speed)
      slot_front_nvme1option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme1option_rom_validator.valid?(@slot_front_nvme1option_rom)
      slot_front_nvme20option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme20option_rom_validator.valid?(@slot_front_nvme20option_rom)
      slot_front_nvme21option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme21option_rom_validator.valid?(@slot_front_nvme21option_rom)
      slot_front_nvme22option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme22option_rom_validator.valid?(@slot_front_nvme22option_rom)
      slot_front_nvme23option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme23option_rom_validator.valid?(@slot_front_nvme23option_rom)
      slot_front_nvme24option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme24option_rom_validator.valid?(@slot_front_nvme24option_rom)
      slot_front_nvme2link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot_front_nvme2link_speed_validator.valid?(@slot_front_nvme2link_speed)
      slot_front_nvme2option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme2option_rom_validator.valid?(@slot_front_nvme2option_rom)
      slot_front_nvme3link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot_front_nvme3link_speed_validator.valid?(@slot_front_nvme3link_speed)
      slot_front_nvme3option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme3option_rom_validator.valid?(@slot_front_nvme3option_rom)
      slot_front_nvme4link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot_front_nvme4link_speed_validator.valid?(@slot_front_nvme4link_speed)
      slot_front_nvme4option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme4option_rom_validator.valid?(@slot_front_nvme4option_rom)
      slot_front_nvme5link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot_front_nvme5link_speed_validator.valid?(@slot_front_nvme5link_speed)
      slot_front_nvme5option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme5option_rom_validator.valid?(@slot_front_nvme5option_rom)
      slot_front_nvme6link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot_front_nvme6link_speed_validator.valid?(@slot_front_nvme6link_speed)
      slot_front_nvme6option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme6option_rom_validator.valid?(@slot_front_nvme6option_rom)
      slot_front_nvme7link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot_front_nvme7link_speed_validator.valid?(@slot_front_nvme7link_speed)
      slot_front_nvme7option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme7option_rom_validator.valid?(@slot_front_nvme7option_rom)
      slot_front_nvme8link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot_front_nvme8link_speed_validator.valid?(@slot_front_nvme8link_speed)
      slot_front_nvme8option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme8option_rom_validator.valid?(@slot_front_nvme8option_rom)
      slot_front_nvme9link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot_front_nvme9link_speed_validator.valid?(@slot_front_nvme9link_speed)
      slot_front_nvme9option_rom_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_front_nvme9option_rom_validator.valid?(@slot_front_nvme9option_rom)
      slot_front_slot5link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless slot_front_slot5link_speed_validator.valid?(@slot_front_slot5link_speed)
      slot_front_slot6link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless slot_front_slot6link_speed_validator.valid?(@slot_front_slot6link_speed)
      slot_gpu1state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_gpu1state_validator.valid?(@slot_gpu1state)
      slot_gpu2state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_gpu2state_validator.valid?(@slot_gpu2state)
      slot_gpu3state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_gpu3state_validator.valid?(@slot_gpu3state)
      slot_gpu4state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_gpu4state_validator.valid?(@slot_gpu4state)
      slot_gpu5state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_gpu5state_validator.valid?(@slot_gpu5state)
      slot_gpu6state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_gpu6state_validator.valid?(@slot_gpu6state)
      slot_gpu7state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_gpu7state_validator.valid?(@slot_gpu7state)
      slot_gpu8state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_gpu8state_validator.valid?(@slot_gpu8state)
      slot_hba_link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless slot_hba_link_speed_validator.valid?(@slot_hba_link_speed)
      slot_hba_state_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless slot_hba_state_validator.valid?(@slot_hba_state)
      slot_lom1link_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_lom1link_validator.valid?(@slot_lom1link)
      slot_lom2link_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_lom2link_validator.valid?(@slot_lom2link)
      slot_mezz_state_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless slot_mezz_state_validator.valid?(@slot_mezz_state)
      slot_mlom_link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot_mlom_link_speed_validator.valid?(@slot_mlom_link_speed)
      slot_mlom_state_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless slot_mlom_state_validator.valid?(@slot_mlom_state)
      slot_mraid_link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot_mraid_link_speed_validator.valid?(@slot_mraid_link_speed)
      slot_mraid_state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_mraid_state_validator.valid?(@slot_mraid_state)
      slot_n10state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n10state_validator.valid?(@slot_n10state)
      slot_n11state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n11state_validator.valid?(@slot_n11state)
      slot_n12state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n12state_validator.valid?(@slot_n12state)
      slot_n13state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n13state_validator.valid?(@slot_n13state)
      slot_n14state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n14state_validator.valid?(@slot_n14state)
      slot_n15state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n15state_validator.valid?(@slot_n15state)
      slot_n16state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n16state_validator.valid?(@slot_n16state)
      slot_n17state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n17state_validator.valid?(@slot_n17state)
      slot_n18state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n18state_validator.valid?(@slot_n18state)
      slot_n19state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n19state_validator.valid?(@slot_n19state)
      slot_n1state_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless slot_n1state_validator.valid?(@slot_n1state)
      slot_n20state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n20state_validator.valid?(@slot_n20state)
      slot_n21state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n21state_validator.valid?(@slot_n21state)
      slot_n22state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n22state_validator.valid?(@slot_n22state)
      slot_n23state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n23state_validator.valid?(@slot_n23state)
      slot_n24state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n24state_validator.valid?(@slot_n24state)
      slot_n2state_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless slot_n2state_validator.valid?(@slot_n2state)
      slot_n3state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n3state_validator.valid?(@slot_n3state)
      slot_n4state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n4state_validator.valid?(@slot_n4state)
      slot_n5state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n5state_validator.valid?(@slot_n5state)
      slot_n6state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n6state_validator.valid?(@slot_n6state)
      slot_n7state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n7state_validator.valid?(@slot_n7state)
      slot_n8state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n8state_validator.valid?(@slot_n8state)
      slot_n9state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_n9state_validator.valid?(@slot_n9state)
      slot_raid_link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless slot_raid_link_speed_validator.valid?(@slot_raid_link_speed)
      slot_raid_state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_raid_state_validator.valid?(@slot_raid_state)
      slot_rear_nvme1link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot_rear_nvme1link_speed_validator.valid?(@slot_rear_nvme1link_speed)
      slot_rear_nvme1state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_rear_nvme1state_validator.valid?(@slot_rear_nvme1state)
      slot_rear_nvme2link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot_rear_nvme2link_speed_validator.valid?(@slot_rear_nvme2link_speed)
      slot_rear_nvme2state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_rear_nvme2state_validator.valid?(@slot_rear_nvme2state)
      slot_rear_nvme3link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot_rear_nvme3link_speed_validator.valid?(@slot_rear_nvme3link_speed)
      slot_rear_nvme3state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_rear_nvme3state_validator.valid?(@slot_rear_nvme3state)
      slot_rear_nvme4link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      return false unless slot_rear_nvme4link_speed_validator.valid?(@slot_rear_nvme4link_speed)
      slot_rear_nvme4state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_rear_nvme4state_validator.valid?(@slot_rear_nvme4state)
      slot_rear_nvme5state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_rear_nvme5state_validator.valid?(@slot_rear_nvme5state)
      slot_rear_nvme6state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_rear_nvme6state_validator.valid?(@slot_rear_nvme6state)
      slot_rear_nvme7state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_rear_nvme7state_validator.valid?(@slot_rear_nvme7state)
      slot_rear_nvme8state_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless slot_rear_nvme8state_validator.valid?(@slot_rear_nvme8state)
      slot_riser1link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless slot_riser1link_speed_validator.valid?(@slot_riser1link_speed)
      slot_riser1slot1link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless slot_riser1slot1link_speed_validator.valid?(@slot_riser1slot1link_speed)
      slot_riser1slot2link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless slot_riser1slot2link_speed_validator.valid?(@slot_riser1slot2link_speed)
      slot_riser1slot3link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless slot_riser1slot3link_speed_validator.valid?(@slot_riser1slot3link_speed)
      slot_riser2link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless slot_riser2link_speed_validator.valid?(@slot_riser2link_speed)
      slot_riser2slot4link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless slot_riser2slot4link_speed_validator.valid?(@slot_riser2slot4link_speed)
      slot_riser2slot5link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless slot_riser2slot5link_speed_validator.valid?(@slot_riser2slot5link_speed)
      slot_riser2slot6link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless slot_riser2slot6link_speed_validator.valid?(@slot_riser2slot6link_speed)
      slot_sas_state_validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      return false unless slot_sas_state_validator.valid?(@slot_sas_state)
      slot_ssd_slot1link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless slot_ssd_slot1link_speed_validator.valid?(@slot_ssd_slot1link_speed)
      slot_ssd_slot2link_speed_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      return false unless slot_ssd_slot2link_speed_validator.valid?(@slot_ssd_slot2link_speed)
      smee_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless smee_validator.valid?(@smee)
      smt_mode_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Off"])
      return false unless smt_mode_validator.valid?(@smt_mode)
      snc_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      return false unless snc_validator.valid?(@snc)
      snoopy_mode_for2lm_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless snoopy_mode_for2lm_validator.valid?(@snoopy_mode_for2lm)
      snoopy_mode_for_ad_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless snoopy_mode_for_ad_validator.valid?(@snoopy_mode_for_ad)
      sparing_mode_validator = EnumAttributeValidator.new('String', ["platform-default", "dimm-sparing", "rank-sparing"])
      return false unless sparing_mode_validator.valid?(@sparing_mode)
      sr_iov_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless sr_iov_validator.valid?(@sr_iov)
      streamer_prefetch_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless streamer_prefetch_validator.valid?(@streamer_prefetch)
      svm_mode_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless svm_mode_validator.valid?(@svm_mode)
      terminal_type_validator = EnumAttributeValidator.new('String', ["platform-default", "pc-ansi", "vt100", "vt100-plus", "vt-utf8"])
      return false unless terminal_type_validator.valid?(@terminal_type)
      tpm_control_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless tpm_control_validator.valid?(@tpm_control)
      tpm_pending_operation_validator = EnumAttributeValidator.new('String', ["platform-default", "None", "TpmClear"])
      return false unless tpm_pending_operation_validator.valid?(@tpm_pending_operation)
      tpm_support_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless tpm_support_validator.valid?(@tpm_support)
      tsme_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      return false unless tsme_validator.valid?(@tsme)
      txt_support_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless txt_support_validator.valid?(@txt_support)
      ucsm_boot_order_rule_validator = EnumAttributeValidator.new('String', ["platform-default", "Loose", "Strict"])
      return false unless ucsm_boot_order_rule_validator.valid?(@ucsm_boot_order_rule)
      ufs_disable_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless ufs_disable_validator.valid?(@ufs_disable)
      uma_based_clustering_validator = EnumAttributeValidator.new('String', ["platform-default", "Disable (All2All)", "Hemisphere (2-clusters)"])
      return false unless uma_based_clustering_validator.valid?(@uma_based_clustering)
      upi_link_enablement_validator = EnumAttributeValidator.new('String', ["platform-default", "1", "2", "Auto"])
      return false unless upi_link_enablement_validator.valid?(@upi_link_enablement)
      upi_power_management_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless upi_power_management_validator.valid?(@upi_power_management)
      usb_emul6064_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless usb_emul6064_validator.valid?(@usb_emul6064)
      usb_port_front_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless usb_port_front_validator.valid?(@usb_port_front)
      usb_port_internal_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless usb_port_internal_validator.valid?(@usb_port_internal)
      usb_port_kvm_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless usb_port_kvm_validator.valid?(@usb_port_kvm)
      usb_port_rear_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless usb_port_rear_validator.valid?(@usb_port_rear)
      usb_port_sd_card_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless usb_port_sd_card_validator.valid?(@usb_port_sd_card)
      usb_port_vmedia_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless usb_port_vmedia_validator.valid?(@usb_port_vmedia)
      usb_xhci_support_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless usb_xhci_support_validator.valid?(@usb_xhci_support)
      vga_priority_validator = EnumAttributeValidator.new('String', ["platform-default", "Offboard", "Onboard", "Onboard VGA Disabled"])
      return false unless vga_priority_validator.valid?(@vga_priority)
      virtual_numa_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless virtual_numa_validator.valid?(@virtual_numa)
      vmd_enable_validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      return false unless vmd_enable_validator.valid?(@vmd_enable)
      vol_memory_mode_validator = EnumAttributeValidator.new('String', ["platform-default", "1LM", "2LM"])
      return false unless vol_memory_mode_validator.valid?(@vol_memory_mode)
      work_load_config_validator = EnumAttributeValidator.new('String', ["platform-default", "Balanced", "I/O Sensitive", "NUMA", "UMA"])
      return false unless work_load_config_validator.valid?(@work_load_config)
      xpt_prefetch_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      return false unless xpt_prefetch_validator.valid?(@xpt_prefetch)
      xpt_remote_prefetch_validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      return false unless xpt_remote_prefetch_validator.valid?(@xpt_remote_prefetch)
      true && super
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] class_id Object to be assigned
    def class_id=(class_id)
      validator = EnumAttributeValidator.new('String', ["bios.Policy"])
      unless validator.valid?(class_id)
        fail ArgumentError, "invalid value for \"class_id\", must be one of #{validator.allowable_values}."
      end
      @class_id = class_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object_type Object to be assigned
    def object_type=(object_type)
      validator = EnumAttributeValidator.new('String', ["bios.Policy"])
      unless validator.valid?(object_type)
        fail ArgumentError, "invalid value for \"object_type\", must be one of #{validator.allowable_values}."
      end
      @object_type = object_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acs_control_gpu1state Object to be assigned
    def acs_control_gpu1state=(acs_control_gpu1state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(acs_control_gpu1state)
        fail ArgumentError, "invalid value for \"acs_control_gpu1state\", must be one of #{validator.allowable_values}."
      end
      @acs_control_gpu1state = acs_control_gpu1state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acs_control_gpu2state Object to be assigned
    def acs_control_gpu2state=(acs_control_gpu2state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(acs_control_gpu2state)
        fail ArgumentError, "invalid value for \"acs_control_gpu2state\", must be one of #{validator.allowable_values}."
      end
      @acs_control_gpu2state = acs_control_gpu2state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acs_control_gpu3state Object to be assigned
    def acs_control_gpu3state=(acs_control_gpu3state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(acs_control_gpu3state)
        fail ArgumentError, "invalid value for \"acs_control_gpu3state\", must be one of #{validator.allowable_values}."
      end
      @acs_control_gpu3state = acs_control_gpu3state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acs_control_gpu4state Object to be assigned
    def acs_control_gpu4state=(acs_control_gpu4state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(acs_control_gpu4state)
        fail ArgumentError, "invalid value for \"acs_control_gpu4state\", must be one of #{validator.allowable_values}."
      end
      @acs_control_gpu4state = acs_control_gpu4state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acs_control_gpu5state Object to be assigned
    def acs_control_gpu5state=(acs_control_gpu5state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(acs_control_gpu5state)
        fail ArgumentError, "invalid value for \"acs_control_gpu5state\", must be one of #{validator.allowable_values}."
      end
      @acs_control_gpu5state = acs_control_gpu5state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acs_control_gpu6state Object to be assigned
    def acs_control_gpu6state=(acs_control_gpu6state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(acs_control_gpu6state)
        fail ArgumentError, "invalid value for \"acs_control_gpu6state\", must be one of #{validator.allowable_values}."
      end
      @acs_control_gpu6state = acs_control_gpu6state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acs_control_gpu7state Object to be assigned
    def acs_control_gpu7state=(acs_control_gpu7state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(acs_control_gpu7state)
        fail ArgumentError, "invalid value for \"acs_control_gpu7state\", must be one of #{validator.allowable_values}."
      end
      @acs_control_gpu7state = acs_control_gpu7state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acs_control_gpu8state Object to be assigned
    def acs_control_gpu8state=(acs_control_gpu8state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(acs_control_gpu8state)
        fail ArgumentError, "invalid value for \"acs_control_gpu8state\", must be one of #{validator.allowable_values}."
      end
      @acs_control_gpu8state = acs_control_gpu8state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acs_control_slot11state Object to be assigned
    def acs_control_slot11state=(acs_control_slot11state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(acs_control_slot11state)
        fail ArgumentError, "invalid value for \"acs_control_slot11state\", must be one of #{validator.allowable_values}."
      end
      @acs_control_slot11state = acs_control_slot11state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acs_control_slot12state Object to be assigned
    def acs_control_slot12state=(acs_control_slot12state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(acs_control_slot12state)
        fail ArgumentError, "invalid value for \"acs_control_slot12state\", must be one of #{validator.allowable_values}."
      end
      @acs_control_slot12state = acs_control_slot12state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acs_control_slot13state Object to be assigned
    def acs_control_slot13state=(acs_control_slot13state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(acs_control_slot13state)
        fail ArgumentError, "invalid value for \"acs_control_slot13state\", must be one of #{validator.allowable_values}."
      end
      @acs_control_slot13state = acs_control_slot13state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acs_control_slot14state Object to be assigned
    def acs_control_slot14state=(acs_control_slot14state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(acs_control_slot14state)
        fail ArgumentError, "invalid value for \"acs_control_slot14state\", must be one of #{validator.allowable_values}."
      end
      @acs_control_slot14state = acs_control_slot14state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] adjacent_cache_line_prefetch Object to be assigned
    def adjacent_cache_line_prefetch=(adjacent_cache_line_prefetch)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(adjacent_cache_line_prefetch)
        fail ArgumentError, "invalid value for \"adjacent_cache_line_prefetch\", must be one of #{validator.allowable_values}."
      end
      @adjacent_cache_line_prefetch = adjacent_cache_line_prefetch
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] advanced_mem_test Object to be assigned
    def advanced_mem_test=(advanced_mem_test)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      unless validator.valid?(advanced_mem_test)
        fail ArgumentError, "invalid value for \"advanced_mem_test\", must be one of #{validator.allowable_values}."
      end
      @advanced_mem_test = advanced_mem_test
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] all_usb_devices Object to be assigned
    def all_usb_devices=(all_usb_devices)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(all_usb_devices)
        fail ArgumentError, "invalid value for \"all_usb_devices\", must be one of #{validator.allowable_values}."
      end
      @all_usb_devices = all_usb_devices
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] altitude Object to be assigned
    def altitude=(altitude)
      validator = EnumAttributeValidator.new('String', ["platform-default", "300-m", "900-m", "1500-m", "3000-m", "auto"])
      unless validator.valid?(altitude)
        fail ArgumentError, "invalid value for \"altitude\", must be one of #{validator.allowable_values}."
      end
      @altitude = altitude
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] aspm_support Object to be assigned
    def aspm_support=(aspm_support)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "Force L0s", "L1 Only"])
      unless validator.valid?(aspm_support)
        fail ArgumentError, "invalid value for \"aspm_support\", must be one of #{validator.allowable_values}."
      end
      @aspm_support = aspm_support
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] assert_nmi_on_perr Object to be assigned
    def assert_nmi_on_perr=(assert_nmi_on_perr)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(assert_nmi_on_perr)
        fail ArgumentError, "invalid value for \"assert_nmi_on_perr\", must be one of #{validator.allowable_values}."
      end
      @assert_nmi_on_perr = assert_nmi_on_perr
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] assert_nmi_on_serr Object to be assigned
    def assert_nmi_on_serr=(assert_nmi_on_serr)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(assert_nmi_on_serr)
        fail ArgumentError, "invalid value for \"assert_nmi_on_serr\", must be one of #{validator.allowable_values}."
      end
      @assert_nmi_on_serr = assert_nmi_on_serr
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] auto_cc_state Object to be assigned
    def auto_cc_state=(auto_cc_state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(auto_cc_state)
        fail ArgumentError, "invalid value for \"auto_cc_state\", must be one of #{validator.allowable_values}."
      end
      @auto_cc_state = auto_cc_state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] autonumous_cstate_enable Object to be assigned
    def autonumous_cstate_enable=(autonumous_cstate_enable)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(autonumous_cstate_enable)
        fail ArgumentError, "invalid value for \"autonumous_cstate_enable\", must be one of #{validator.allowable_values}."
      end
      @autonumous_cstate_enable = autonumous_cstate_enable
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] baud_rate Object to be assigned
    def baud_rate=(baud_rate)
      validator = EnumAttributeValidator.new('String', ["platform-default", "9600", "19200", "38400", "57600", "115200"])
      unless validator.valid?(baud_rate)
        fail ArgumentError, "invalid value for \"baud_rate\", must be one of #{validator.allowable_values}."
      end
      @baud_rate = baud_rate
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bme_dma_mitigation Object to be assigned
    def bme_dma_mitigation=(bme_dma_mitigation)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(bme_dma_mitigation)
        fail ArgumentError, "invalid value for \"bme_dma_mitigation\", must be one of #{validator.allowable_values}."
      end
      @bme_dma_mitigation = bme_dma_mitigation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boot_option_num_retry Object to be assigned
    def boot_option_num_retry=(boot_option_num_retry)
      validator = EnumAttributeValidator.new('String', ["platform-default", "5", "13", "Infinite"])
      unless validator.valid?(boot_option_num_retry)
        fail ArgumentError, "invalid value for \"boot_option_num_retry\", must be one of #{validator.allowable_values}."
      end
      @boot_option_num_retry = boot_option_num_retry
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boot_option_re_cool_down Object to be assigned
    def boot_option_re_cool_down=(boot_option_re_cool_down)
      validator = EnumAttributeValidator.new('String', ["platform-default", "15", "45", "90"])
      unless validator.valid?(boot_option_re_cool_down)
        fail ArgumentError, "invalid value for \"boot_option_re_cool_down\", must be one of #{validator.allowable_values}."
      end
      @boot_option_re_cool_down = boot_option_re_cool_down
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boot_option_retry Object to be assigned
    def boot_option_retry=(boot_option_retry)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(boot_option_retry)
        fail ArgumentError, "invalid value for \"boot_option_retry\", must be one of #{validator.allowable_values}."
      end
      @boot_option_retry = boot_option_retry
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boot_performance_mode Object to be assigned
    def boot_performance_mode=(boot_performance_mode)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Max Efficient", "Max Performance", "Set by Intel NM"])
      unless validator.valid?(boot_performance_mode)
        fail ArgumentError, "invalid value for \"boot_performance_mode\", must be one of #{validator.allowable_values}."
      end
      @boot_performance_mode = boot_performance_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] burst_and_postponed_refresh Object to be assigned
    def burst_and_postponed_refresh=(burst_and_postponed_refresh)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(burst_and_postponed_refresh)
        fail ArgumentError, "invalid value for \"burst_and_postponed_refresh\", must be one of #{validator.allowable_values}."
      end
      @burst_and_postponed_refresh = burst_and_postponed_refresh
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] c1auto_demotion Object to be assigned
    def c1auto_demotion=(c1auto_demotion)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(c1auto_demotion)
        fail ArgumentError, "invalid value for \"c1auto_demotion\", must be one of #{validator.allowable_values}."
      end
      @c1auto_demotion = c1auto_demotion
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] c1auto_un_demotion Object to be assigned
    def c1auto_un_demotion=(c1auto_un_demotion)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(c1auto_un_demotion)
        fail ArgumentError, "invalid value for \"c1auto_un_demotion\", must be one of #{validator.allowable_values}."
      end
      @c1auto_un_demotion = c1auto_un_demotion
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_cmn_apbdis Object to be assigned
    def cbs_cmn_apbdis=(cbs_cmn_apbdis)
      validator = EnumAttributeValidator.new('String', ["platform-default", "0", "1", "Auto"])
      unless validator.valid?(cbs_cmn_apbdis)
        fail ArgumentError, "invalid value for \"cbs_cmn_apbdis\", must be one of #{validator.allowable_values}."
      end
      @cbs_cmn_apbdis = cbs_cmn_apbdis
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_cmn_cpu_cpb Object to be assigned
    def cbs_cmn_cpu_cpb=(cbs_cmn_cpu_cpb)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled"])
      unless validator.valid?(cbs_cmn_cpu_cpb)
        fail ArgumentError, "invalid value for \"cbs_cmn_cpu_cpb\", must be one of #{validator.allowable_values}."
      end
      @cbs_cmn_cpu_cpb = cbs_cmn_cpu_cpb
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_cmn_cpu_gen_downcore_ctrl Object to be assigned
    def cbs_cmn_cpu_gen_downcore_ctrl=(cbs_cmn_cpu_gen_downcore_ctrl)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "FOUR (2 + 2)", "FOUR (4 + 0)", "SIX (3 + 3)", "THREE (3 + 0)", "TWO (1 + 1)", "TWO (2 + 0)"])
      unless validator.valid?(cbs_cmn_cpu_gen_downcore_ctrl)
        fail ArgumentError, "invalid value for \"cbs_cmn_cpu_gen_downcore_ctrl\", must be one of #{validator.allowable_values}."
      end
      @cbs_cmn_cpu_gen_downcore_ctrl = cbs_cmn_cpu_gen_downcore_ctrl
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_cmn_cpu_global_cstate_ctrl Object to be assigned
    def cbs_cmn_cpu_global_cstate_ctrl=(cbs_cmn_cpu_global_cstate_ctrl)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      unless validator.valid?(cbs_cmn_cpu_global_cstate_ctrl)
        fail ArgumentError, "invalid value for \"cbs_cmn_cpu_global_cstate_ctrl\", must be one of #{validator.allowable_values}."
      end
      @cbs_cmn_cpu_global_cstate_ctrl = cbs_cmn_cpu_global_cstate_ctrl
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_cmn_cpu_l1stream_hw_prefetcher Object to be assigned
    def cbs_cmn_cpu_l1stream_hw_prefetcher=(cbs_cmn_cpu_l1stream_hw_prefetcher)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      unless validator.valid?(cbs_cmn_cpu_l1stream_hw_prefetcher)
        fail ArgumentError, "invalid value for \"cbs_cmn_cpu_l1stream_hw_prefetcher\", must be one of #{validator.allowable_values}."
      end
      @cbs_cmn_cpu_l1stream_hw_prefetcher = cbs_cmn_cpu_l1stream_hw_prefetcher
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_cmn_cpu_l2stream_hw_prefetcher Object to be assigned
    def cbs_cmn_cpu_l2stream_hw_prefetcher=(cbs_cmn_cpu_l2stream_hw_prefetcher)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      unless validator.valid?(cbs_cmn_cpu_l2stream_hw_prefetcher)
        fail ArgumentError, "invalid value for \"cbs_cmn_cpu_l2stream_hw_prefetcher\", must be one of #{validator.allowable_values}."
      end
      @cbs_cmn_cpu_l2stream_hw_prefetcher = cbs_cmn_cpu_l2stream_hw_prefetcher
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_cmn_cpu_smee Object to be assigned
    def cbs_cmn_cpu_smee=(cbs_cmn_cpu_smee)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      unless validator.valid?(cbs_cmn_cpu_smee)
        fail ArgumentError, "invalid value for \"cbs_cmn_cpu_smee\", must be one of #{validator.allowable_values}."
      end
      @cbs_cmn_cpu_smee = cbs_cmn_cpu_smee
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_cmn_cpu_streaming_stores_ctrl Object to be assigned
    def cbs_cmn_cpu_streaming_stores_ctrl=(cbs_cmn_cpu_streaming_stores_ctrl)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      unless validator.valid?(cbs_cmn_cpu_streaming_stores_ctrl)
        fail ArgumentError, "invalid value for \"cbs_cmn_cpu_streaming_stores_ctrl\", must be one of #{validator.allowable_values}."
      end
      @cbs_cmn_cpu_streaming_stores_ctrl = cbs_cmn_cpu_streaming_stores_ctrl
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_cmn_determinism_slider Object to be assigned
    def cbs_cmn_determinism_slider=(cbs_cmn_determinism_slider)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Performance", "Power"])
      unless validator.valid?(cbs_cmn_determinism_slider)
        fail ArgumentError, "invalid value for \"cbs_cmn_determinism_slider\", must be one of #{validator.allowable_values}."
      end
      @cbs_cmn_determinism_slider = cbs_cmn_determinism_slider
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_cmn_efficiency_mode_en Object to be assigned
    def cbs_cmn_efficiency_mode_en=(cbs_cmn_efficiency_mode_en)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Enabled"])
      unless validator.valid?(cbs_cmn_efficiency_mode_en)
        fail ArgumentError, "invalid value for \"cbs_cmn_efficiency_mode_en\", must be one of #{validator.allowable_values}."
      end
      @cbs_cmn_efficiency_mode_en = cbs_cmn_efficiency_mode_en
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_cmn_fixed_soc_pstate Object to be assigned
    def cbs_cmn_fixed_soc_pstate=(cbs_cmn_fixed_soc_pstate)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "P0", "P1", "P2", "P3"])
      unless validator.valid?(cbs_cmn_fixed_soc_pstate)
        fail ArgumentError, "invalid value for \"cbs_cmn_fixed_soc_pstate\", must be one of #{validator.allowable_values}."
      end
      @cbs_cmn_fixed_soc_pstate = cbs_cmn_fixed_soc_pstate
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_cmn_gnb_nb_iommu Object to be assigned
    def cbs_cmn_gnb_nb_iommu=(cbs_cmn_gnb_nb_iommu)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      unless validator.valid?(cbs_cmn_gnb_nb_iommu)
        fail ArgumentError, "invalid value for \"cbs_cmn_gnb_nb_iommu\", must be one of #{validator.allowable_values}."
      end
      @cbs_cmn_gnb_nb_iommu = cbs_cmn_gnb_nb_iommu
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_cmn_gnb_smu_df_cstates Object to be assigned
    def cbs_cmn_gnb_smu_df_cstates=(cbs_cmn_gnb_smu_df_cstates)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      unless validator.valid?(cbs_cmn_gnb_smu_df_cstates)
        fail ArgumentError, "invalid value for \"cbs_cmn_gnb_smu_df_cstates\", must be one of #{validator.allowable_values}."
      end
      @cbs_cmn_gnb_smu_df_cstates = cbs_cmn_gnb_smu_df_cstates
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_cmn_gnb_smucppc Object to be assigned
    def cbs_cmn_gnb_smucppc=(cbs_cmn_gnb_smucppc)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      unless validator.valid?(cbs_cmn_gnb_smucppc)
        fail ArgumentError, "invalid value for \"cbs_cmn_gnb_smucppc\", must be one of #{validator.allowable_values}."
      end
      @cbs_cmn_gnb_smucppc = cbs_cmn_gnb_smucppc
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_cmn_mem_ctrl_bank_group_swap_ddr4 Object to be assigned
    def cbs_cmn_mem_ctrl_bank_group_swap_ddr4=(cbs_cmn_mem_ctrl_bank_group_swap_ddr4)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      unless validator.valid?(cbs_cmn_mem_ctrl_bank_group_swap_ddr4)
        fail ArgumentError, "invalid value for \"cbs_cmn_mem_ctrl_bank_group_swap_ddr4\", must be one of #{validator.allowable_values}."
      end
      @cbs_cmn_mem_ctrl_bank_group_swap_ddr4 = cbs_cmn_mem_ctrl_bank_group_swap_ddr4
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_cmn_mem_map_bank_interleave_ddr4 Object to be assigned
    def cbs_cmn_mem_map_bank_interleave_ddr4=(cbs_cmn_mem_map_bank_interleave_ddr4)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled"])
      unless validator.valid?(cbs_cmn_mem_map_bank_interleave_ddr4)
        fail ArgumentError, "invalid value for \"cbs_cmn_mem_map_bank_interleave_ddr4\", must be one of #{validator.allowable_values}."
      end
      @cbs_cmn_mem_map_bank_interleave_ddr4 = cbs_cmn_mem_map_bank_interleave_ddr4
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_cmnc_tdp_ctl Object to be assigned
    def cbs_cmnc_tdp_ctl=(cbs_cmnc_tdp_ctl)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Manual"])
      unless validator.valid?(cbs_cmnc_tdp_ctl)
        fail ArgumentError, "invalid value for \"cbs_cmnc_tdp_ctl\", must be one of #{validator.allowable_values}."
      end
      @cbs_cmnc_tdp_ctl = cbs_cmnc_tdp_ctl
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_cpu_ccd_ctrl_ssp Object to be assigned
    def cbs_cpu_ccd_ctrl_ssp=(cbs_cpu_ccd_ctrl_ssp)
      validator = EnumAttributeValidator.new('String', ["platform-default", "2 CCDs", "3 CCDs", "4 CCDs", "6 CCDs", "Auto"])
      unless validator.valid?(cbs_cpu_ccd_ctrl_ssp)
        fail ArgumentError, "invalid value for \"cbs_cpu_ccd_ctrl_ssp\", must be one of #{validator.allowable_values}."
      end
      @cbs_cpu_ccd_ctrl_ssp = cbs_cpu_ccd_ctrl_ssp
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_cpu_core_ctrl Object to be assigned
    def cbs_cpu_core_ctrl=(cbs_cpu_core_ctrl)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "FIVE (5 + 0)", "FOUR (4 + 0)", "ONE (1 + 0)", "SEVEN (7 + 0)", "SIX (6 + 0)", "THREE (3 + 0)", "TWO (2 + 0)"])
      unless validator.valid?(cbs_cpu_core_ctrl)
        fail ArgumentError, "invalid value for \"cbs_cpu_core_ctrl\", must be one of #{validator.allowable_values}."
      end
      @cbs_cpu_core_ctrl = cbs_cpu_core_ctrl
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_cpu_smt_ctrl Object to be assigned
    def cbs_cpu_smt_ctrl=(cbs_cpu_smt_ctrl)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      unless validator.valid?(cbs_cpu_smt_ctrl)
        fail ArgumentError, "invalid value for \"cbs_cpu_smt_ctrl\", must be one of #{validator.allowable_values}."
      end
      @cbs_cpu_smt_ctrl = cbs_cpu_smt_ctrl
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_dbg_cpu_snp_mem_cover Object to be assigned
    def cbs_dbg_cpu_snp_mem_cover=(cbs_dbg_cpu_snp_mem_cover)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Custom", "disabled", "enabled"])
      unless validator.valid?(cbs_dbg_cpu_snp_mem_cover)
        fail ArgumentError, "invalid value for \"cbs_dbg_cpu_snp_mem_cover\", must be one of #{validator.allowable_values}."
      end
      @cbs_dbg_cpu_snp_mem_cover = cbs_dbg_cpu_snp_mem_cover
    end

    # Custom attribute writer method with validation
    # @param [Object] cbs_dbg_cpu_snp_mem_size_cover Value to be assigned
    def cbs_dbg_cpu_snp_mem_size_cover=(cbs_dbg_cpu_snp_mem_size_cover)
      pattern = Regexp.new(/^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-9]\d{4}|[1-9]\d{5}|10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6])$|^(platform-default)$/)
      if !cbs_dbg_cpu_snp_mem_size_cover.nil? && cbs_dbg_cpu_snp_mem_size_cover !~ pattern
        fail ArgumentError, "invalid value for \"cbs_dbg_cpu_snp_mem_size_cover\", must conform to the pattern #{pattern}."
      end

      @cbs_dbg_cpu_snp_mem_size_cover = cbs_dbg_cpu_snp_mem_size_cover
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_df_cmn_acpi_srat_l3numa Object to be assigned
    def cbs_df_cmn_acpi_srat_l3numa=(cbs_df_cmn_acpi_srat_l3numa)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      unless validator.valid?(cbs_df_cmn_acpi_srat_l3numa)
        fail ArgumentError, "invalid value for \"cbs_df_cmn_acpi_srat_l3numa\", must be one of #{validator.allowable_values}."
      end
      @cbs_df_cmn_acpi_srat_l3numa = cbs_df_cmn_acpi_srat_l3numa
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_df_cmn_dram_nps Object to be assigned
    def cbs_df_cmn_dram_nps=(cbs_df_cmn_dram_nps)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "NPS0", "NPS1", "NPS2", "NPS4"])
      unless validator.valid?(cbs_df_cmn_dram_nps)
        fail ArgumentError, "invalid value for \"cbs_df_cmn_dram_nps\", must be one of #{validator.allowable_values}."
      end
      @cbs_df_cmn_dram_nps = cbs_df_cmn_dram_nps
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_df_cmn_mem_intlv Object to be assigned
    def cbs_df_cmn_mem_intlv=(cbs_df_cmn_mem_intlv)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Channel", "Die", "None", "Socket"])
      unless validator.valid?(cbs_df_cmn_mem_intlv)
        fail ArgumentError, "invalid value for \"cbs_df_cmn_mem_intlv\", must be one of #{validator.allowable_values}."
      end
      @cbs_df_cmn_mem_intlv = cbs_df_cmn_mem_intlv
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_df_cmn_mem_intlv_size Object to be assigned
    def cbs_df_cmn_mem_intlv_size=(cbs_df_cmn_mem_intlv_size)
      validator = EnumAttributeValidator.new('String', ["platform-default", "256 Bytes", "512 Bytes", "1 KB", "2 KB", "4 KB", "Auto"])
      unless validator.valid?(cbs_df_cmn_mem_intlv_size)
        fail ArgumentError, "invalid value for \"cbs_df_cmn_mem_intlv_size\", must be one of #{validator.allowable_values}."
      end
      @cbs_df_cmn_mem_intlv_size = cbs_df_cmn_mem_intlv_size
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cbs_sev_snp_support Object to be assigned
    def cbs_sev_snp_support=(cbs_sev_snp_support)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(cbs_sev_snp_support)
        fail ArgumentError, "invalid value for \"cbs_sev_snp_support\", must be one of #{validator.allowable_values}."
      end
      @cbs_sev_snp_support = cbs_sev_snp_support
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cdn_enable Object to be assigned
    def cdn_enable=(cdn_enable)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(cdn_enable)
        fail ArgumentError, "invalid value for \"cdn_enable\", must be one of #{validator.allowable_values}."
      end
      @cdn_enable = cdn_enable
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cdn_support Object to be assigned
    def cdn_support=(cdn_support)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "LOMs Only"])
      unless validator.valid?(cdn_support)
        fail ArgumentError, "invalid value for \"cdn_support\", must be one of #{validator.allowable_values}."
      end
      @cdn_support = cdn_support
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] channel_inter_leave Object to be assigned
    def channel_inter_leave=(channel_inter_leave)
      validator = EnumAttributeValidator.new('String', ["platform-default", "1-way", "2-way", "3-way", "4-way", "auto"])
      unless validator.valid?(channel_inter_leave)
        fail ArgumentError, "invalid value for \"channel_inter_leave\", must be one of #{validator.allowable_values}."
      end
      @channel_inter_leave = channel_inter_leave
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cisco_adaptive_mem_training Object to be assigned
    def cisco_adaptive_mem_training=(cisco_adaptive_mem_training)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(cisco_adaptive_mem_training)
        fail ArgumentError, "invalid value for \"cisco_adaptive_mem_training\", must be one of #{validator.allowable_values}."
      end
      @cisco_adaptive_mem_training = cisco_adaptive_mem_training
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cisco_debug_level Object to be assigned
    def cisco_debug_level=(cisco_debug_level)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Maximum", "Minimum", "Normal"])
      unless validator.valid?(cisco_debug_level)
        fail ArgumentError, "invalid value for \"cisco_debug_level\", must be one of #{validator.allowable_values}."
      end
      @cisco_debug_level = cisco_debug_level
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cisco_oprom_launch_optimization Object to be assigned
    def cisco_oprom_launch_optimization=(cisco_oprom_launch_optimization)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(cisco_oprom_launch_optimization)
        fail ArgumentError, "invalid value for \"cisco_oprom_launch_optimization\", must be one of #{validator.allowable_values}."
      end
      @cisco_oprom_launch_optimization = cisco_oprom_launch_optimization
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cisco_xgmi_max_speed Object to be assigned
    def cisco_xgmi_max_speed=(cisco_xgmi_max_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(cisco_xgmi_max_speed)
        fail ArgumentError, "invalid value for \"cisco_xgmi_max_speed\", must be one of #{validator.allowable_values}."
      end
      @cisco_xgmi_max_speed = cisco_xgmi_max_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cke_low_policy Object to be assigned
    def cke_low_policy=(cke_low_policy)
      validator = EnumAttributeValidator.new('String', ["platform-default", "auto", "disabled", "fast", "slow"])
      unless validator.valid?(cke_low_policy)
        fail ArgumentError, "invalid value for \"cke_low_policy\", must be one of #{validator.allowable_values}."
      end
      @cke_low_policy = cke_low_policy
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] closed_loop_therm_throtl Object to be assigned
    def closed_loop_therm_throtl=(closed_loop_therm_throtl)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(closed_loop_therm_throtl)
        fail ArgumentError, "invalid value for \"closed_loop_therm_throtl\", must be one of #{validator.allowable_values}."
      end
      @closed_loop_therm_throtl = closed_loop_therm_throtl
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cmci_enable Object to be assigned
    def cmci_enable=(cmci_enable)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(cmci_enable)
        fail ArgumentError, "invalid value for \"cmci_enable\", must be one of #{validator.allowable_values}."
      end
      @cmci_enable = cmci_enable
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] config_tdp Object to be assigned
    def config_tdp=(config_tdp)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(config_tdp)
        fail ArgumentError, "invalid value for \"config_tdp\", must be one of #{validator.allowable_values}."
      end
      @config_tdp = config_tdp
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] config_tdp_level Object to be assigned
    def config_tdp_level=(config_tdp_level)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Level 1", "Level 2", "Normal"])
      unless validator.valid?(config_tdp_level)
        fail ArgumentError, "invalid value for \"config_tdp_level\", must be one of #{validator.allowable_values}."
      end
      @config_tdp_level = config_tdp_level
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] console_redirection Object to be assigned
    def console_redirection=(console_redirection)
      validator = EnumAttributeValidator.new('String', ["platform-default", "com-0", "com-1", "disabled", "enabled", "serial-port-a"])
      unless validator.valid?(console_redirection)
        fail ArgumentError, "invalid value for \"console_redirection\", must be one of #{validator.allowable_values}."
      end
      @console_redirection = console_redirection
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] core_multi_processing Object to be assigned
    def core_multi_processing=(core_multi_processing)
      validator = EnumAttributeValidator.new('String', ["platform-default", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "all"])
      unless validator.valid?(core_multi_processing)
        fail ArgumentError, "invalid value for \"core_multi_processing\", must be one of #{validator.allowable_values}."
      end
      @core_multi_processing = core_multi_processing
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cpu_energy_performance Object to be assigned
    def cpu_energy_performance=(cpu_energy_performance)
      validator = EnumAttributeValidator.new('String', ["platform-default", "balanced-energy", "balanced-performance", "balanced-power", "energy-efficient", "performance", "power"])
      unless validator.valid?(cpu_energy_performance)
        fail ArgumentError, "invalid value for \"cpu_energy_performance\", must be one of #{validator.allowable_values}."
      end
      @cpu_energy_performance = cpu_energy_performance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cpu_frequency_floor Object to be assigned
    def cpu_frequency_floor=(cpu_frequency_floor)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(cpu_frequency_floor)
        fail ArgumentError, "invalid value for \"cpu_frequency_floor\", must be one of #{validator.allowable_values}."
      end
      @cpu_frequency_floor = cpu_frequency_floor
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cpu_perf_enhancement Object to be assigned
    def cpu_perf_enhancement=(cpu_perf_enhancement)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled"])
      unless validator.valid?(cpu_perf_enhancement)
        fail ArgumentError, "invalid value for \"cpu_perf_enhancement\", must be one of #{validator.allowable_values}."
      end
      @cpu_perf_enhancement = cpu_perf_enhancement
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cpu_performance Object to be assigned
    def cpu_performance=(cpu_performance)
      validator = EnumAttributeValidator.new('String', ["platform-default", "custom", "enterprise", "high-throughput", "hpc"])
      unless validator.valid?(cpu_performance)
        fail ArgumentError, "invalid value for \"cpu_performance\", must be one of #{validator.allowable_values}."
      end
      @cpu_performance = cpu_performance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cpu_power_management Object to be assigned
    def cpu_power_management=(cpu_power_management)
      validator = EnumAttributeValidator.new('String', ["platform-default", "custom", "disabled", "energy-efficient", "performance"])
      unless validator.valid?(cpu_power_management)
        fail ArgumentError, "invalid value for \"cpu_power_management\", must be one of #{validator.allowable_values}."
      end
      @cpu_power_management = cpu_power_management
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cr_qos Object to be assigned
    def cr_qos=(cr_qos)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Disabled", "Mode 0 - Disable the PMem QoS Feature", "Mode 1 - M2M QoS Enable and CHA QoS Disable", "Mode 2 - M2M QoS Enable and CHA QoS Enable", "Recipe 1", "Recipe 2", "Recipe 3"])
      unless validator.valid?(cr_qos)
        fail ArgumentError, "invalid value for \"cr_qos\", must be one of #{validator.allowable_values}."
      end
      @cr_qos = cr_qos
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] crfastgo_config Object to be assigned
    def crfastgo_config=(crfastgo_config)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Default", "Disable optimization", "Enable optimization", "Option 1", "Option 2", "Option 3", "Option 4", "Option 5"])
      unless validator.valid?(crfastgo_config)
        fail ArgumentError, "invalid value for \"crfastgo_config\", must be one of #{validator.allowable_values}."
      end
      @crfastgo_config = crfastgo_config
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dcpmm_firmware_downgrade Object to be assigned
    def dcpmm_firmware_downgrade=(dcpmm_firmware_downgrade)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(dcpmm_firmware_downgrade)
        fail ArgumentError, "invalid value for \"dcpmm_firmware_downgrade\", must be one of #{validator.allowable_values}."
      end
      @dcpmm_firmware_downgrade = dcpmm_firmware_downgrade
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] demand_scrub Object to be assigned
    def demand_scrub=(demand_scrub)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(demand_scrub)
        fail ArgumentError, "invalid value for \"demand_scrub\", must be one of #{validator.allowable_values}."
      end
      @demand_scrub = demand_scrub
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] direct_cache_access Object to be assigned
    def direct_cache_access=(direct_cache_access)
      validator = EnumAttributeValidator.new('String', ["platform-default", "auto", "disabled", "enabled"])
      unless validator.valid?(direct_cache_access)
        fail ArgumentError, "invalid value for \"direct_cache_access\", must be one of #{validator.allowable_values}."
      end
      @direct_cache_access = direct_cache_access
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dram_clock_throttling Object to be assigned
    def dram_clock_throttling=(dram_clock_throttling)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Balanced", "Energy Efficient", "Performance"])
      unless validator.valid?(dram_clock_throttling)
        fail ArgumentError, "invalid value for \"dram_clock_throttling\", must be one of #{validator.allowable_values}."
      end
      @dram_clock_throttling = dram_clock_throttling
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dram_refresh_rate Object to be assigned
    def dram_refresh_rate=(dram_refresh_rate)
      validator = EnumAttributeValidator.new('String', ["platform-default", "1x", "2x", "3x", "4x", "Auto"])
      unless validator.valid?(dram_refresh_rate)
        fail ArgumentError, "invalid value for \"dram_refresh_rate\", must be one of #{validator.allowable_values}."
      end
      @dram_refresh_rate = dram_refresh_rate
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dram_sw_thermal_throttling Object to be assigned
    def dram_sw_thermal_throttling=(dram_sw_thermal_throttling)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(dram_sw_thermal_throttling)
        fail ArgumentError, "invalid value for \"dram_sw_thermal_throttling\", must be one of #{validator.allowable_values}."
      end
      @dram_sw_thermal_throttling = dram_sw_thermal_throttling
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eadr_support Object to be assigned
    def eadr_support=(eadr_support)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      unless validator.valid?(eadr_support)
        fail ArgumentError, "invalid value for \"eadr_support\", must be one of #{validator.allowable_values}."
      end
      @eadr_support = eadr_support
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] edpc_en Object to be assigned
    def edpc_en=(edpc_en)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Disabled", "On Fatal Error", "On Fatal and Non-Fatal Errors"])
      unless validator.valid?(edpc_en)
        fail ArgumentError, "invalid value for \"edpc_en\", must be one of #{validator.allowable_values}."
      end
      @edpc_en = edpc_en
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_clock_spread_spec Object to be assigned
    def enable_clock_spread_spec=(enable_clock_spread_spec)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(enable_clock_spread_spec)
        fail ArgumentError, "invalid value for \"enable_clock_spread_spec\", must be one of #{validator.allowable_values}."
      end
      @enable_clock_spread_spec = enable_clock_spread_spec
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_mktme Object to be assigned
    def enable_mktme=(enable_mktme)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(enable_mktme)
        fail ArgumentError, "invalid value for \"enable_mktme\", must be one of #{validator.allowable_values}."
      end
      @enable_mktme = enable_mktme
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_sgx Object to be assigned
    def enable_sgx=(enable_sgx)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(enable_sgx)
        fail ArgumentError, "invalid value for \"enable_sgx\", must be one of #{validator.allowable_values}."
      end
      @enable_sgx = enable_sgx
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_tme Object to be assigned
    def enable_tme=(enable_tme)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(enable_tme)
        fail ArgumentError, "invalid value for \"enable_tme\", must be one of #{validator.allowable_values}."
      end
      @enable_tme = enable_tme
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] energy_efficient_turbo Object to be assigned
    def energy_efficient_turbo=(energy_efficient_turbo)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(energy_efficient_turbo)
        fail ArgumentError, "invalid value for \"energy_efficient_turbo\", must be one of #{validator.allowable_values}."
      end
      @energy_efficient_turbo = energy_efficient_turbo
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eng_perf_tuning Object to be assigned
    def eng_perf_tuning=(eng_perf_tuning)
      validator = EnumAttributeValidator.new('String', ["platform-default", "BIOS", "OS"])
      unless validator.valid?(eng_perf_tuning)
        fail ArgumentError, "invalid value for \"eng_perf_tuning\", must be one of #{validator.allowable_values}."
      end
      @eng_perf_tuning = eng_perf_tuning
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enhanced_intel_speed_step_tech Object to be assigned
    def enhanced_intel_speed_step_tech=(enhanced_intel_speed_step_tech)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(enhanced_intel_speed_step_tech)
        fail ArgumentError, "invalid value for \"enhanced_intel_speed_step_tech\", must be one of #{validator.allowable_values}."
      end
      @enhanced_intel_speed_step_tech = enhanced_intel_speed_step_tech
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] epoch_update Object to be assigned
    def epoch_update=(epoch_update)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Change to New Random Owner EPOCHs", "Manual User Defined Owner EPOCHs", "SGX Owner EPOCH activated"])
      unless validator.valid?(epoch_update)
        fail ArgumentError, "invalid value for \"epoch_update\", must be one of #{validator.allowable_values}."
      end
      @epoch_update = epoch_update
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] epp_enable Object to be assigned
    def epp_enable=(epp_enable)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(epp_enable)
        fail ArgumentError, "invalid value for \"epp_enable\", must be one of #{validator.allowable_values}."
      end
      @epp_enable = epp_enable
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] epp_profile Object to be assigned
    def epp_profile=(epp_profile)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Balanced Performance", "Balanced Power", "Performance", "Power"])
      unless validator.valid?(epp_profile)
        fail ArgumentError, "invalid value for \"epp_profile\", must be one of #{validator.allowable_values}."
      end
      @epp_profile = epp_profile
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] execute_disable_bit Object to be assigned
    def execute_disable_bit=(execute_disable_bit)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(execute_disable_bit)
        fail ArgumentError, "invalid value for \"execute_disable_bit\", must be one of #{validator.allowable_values}."
      end
      @execute_disable_bit = execute_disable_bit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] extended_apic Object to be assigned
    def extended_apic=(extended_apic)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "X2APIC", "XAPIC"])
      unless validator.valid?(extended_apic)
        fail ArgumentError, "invalid value for \"extended_apic\", must be one of #{validator.allowable_values}."
      end
      @extended_apic = extended_apic
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] flow_control Object to be assigned
    def flow_control=(flow_control)
      validator = EnumAttributeValidator.new('String', ["platform-default", "none", "rts-cts"])
      unless validator.valid?(flow_control)
        fail ArgumentError, "invalid value for \"flow_control\", must be one of #{validator.allowable_values}."
      end
      @flow_control = flow_control
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] frb2enable Object to be assigned
    def frb2enable=(frb2enable)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(frb2enable)
        fail ArgumentError, "invalid value for \"frb2enable\", must be one of #{validator.allowable_values}."
      end
      @frb2enable = frb2enable
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hardware_prefetch Object to be assigned
    def hardware_prefetch=(hardware_prefetch)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(hardware_prefetch)
        fail ArgumentError, "invalid value for \"hardware_prefetch\", must be one of #{validator.allowable_values}."
      end
      @hardware_prefetch = hardware_prefetch
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hwpm_enable Object to be assigned
    def hwpm_enable=(hwpm_enable)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Disabled", "HWPM Native Mode", "HWPM OOB Mode", "NATIVE MODE", "Native Mode with no Legacy", "OOB MODE"])
      unless validator.valid?(hwpm_enable)
        fail ArgumentError, "invalid value for \"hwpm_enable\", must be one of #{validator.allowable_values}."
      end
      @hwpm_enable = hwpm_enable
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] imc_interleave Object to be assigned
    def imc_interleave=(imc_interleave)
      validator = EnumAttributeValidator.new('String', ["platform-default", "1-way Interleave", "2-way Interleave", "Auto"])
      unless validator.valid?(imc_interleave)
        fail ArgumentError, "invalid value for \"imc_interleave\", must be one of #{validator.allowable_values}."
      end
      @imc_interleave = imc_interleave
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] intel_dynamic_speed_select Object to be assigned
    def intel_dynamic_speed_select=(intel_dynamic_speed_select)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(intel_dynamic_speed_select)
        fail ArgumentError, "invalid value for \"intel_dynamic_speed_select\", must be one of #{validator.allowable_values}."
      end
      @intel_dynamic_speed_select = intel_dynamic_speed_select
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] intel_hyper_threading_tech Object to be assigned
    def intel_hyper_threading_tech=(intel_hyper_threading_tech)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(intel_hyper_threading_tech)
        fail ArgumentError, "invalid value for \"intel_hyper_threading_tech\", must be one of #{validator.allowable_values}."
      end
      @intel_hyper_threading_tech = intel_hyper_threading_tech
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] intel_speed_select Object to be assigned
    def intel_speed_select=(intel_speed_select)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Base", "Config 1", "Config 2", "Config 3", "Config 4"])
      unless validator.valid?(intel_speed_select)
        fail ArgumentError, "invalid value for \"intel_speed_select\", must be one of #{validator.allowable_values}."
      end
      @intel_speed_select = intel_speed_select
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] intel_turbo_boost_tech Object to be assigned
    def intel_turbo_boost_tech=(intel_turbo_boost_tech)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(intel_turbo_boost_tech)
        fail ArgumentError, "invalid value for \"intel_turbo_boost_tech\", must be one of #{validator.allowable_values}."
      end
      @intel_turbo_boost_tech = intel_turbo_boost_tech
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] intel_virtualization_technology Object to be assigned
    def intel_virtualization_technology=(intel_virtualization_technology)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(intel_virtualization_technology)
        fail ArgumentError, "invalid value for \"intel_virtualization_technology\", must be one of #{validator.allowable_values}."
      end
      @intel_virtualization_technology = intel_virtualization_technology
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] intel_vt_for_directed_io Object to be assigned
    def intel_vt_for_directed_io=(intel_vt_for_directed_io)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(intel_vt_for_directed_io)
        fail ArgumentError, "invalid value for \"intel_vt_for_directed_io\", must be one of #{validator.allowable_values}."
      end
      @intel_vt_for_directed_io = intel_vt_for_directed_io
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] intel_vtd_coherency_support Object to be assigned
    def intel_vtd_coherency_support=(intel_vtd_coherency_support)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(intel_vtd_coherency_support)
        fail ArgumentError, "invalid value for \"intel_vtd_coherency_support\", must be one of #{validator.allowable_values}."
      end
      @intel_vtd_coherency_support = intel_vtd_coherency_support
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] intel_vtd_interrupt_remapping Object to be assigned
    def intel_vtd_interrupt_remapping=(intel_vtd_interrupt_remapping)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(intel_vtd_interrupt_remapping)
        fail ArgumentError, "invalid value for \"intel_vtd_interrupt_remapping\", must be one of #{validator.allowable_values}."
      end
      @intel_vtd_interrupt_remapping = intel_vtd_interrupt_remapping
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] intel_vtd_pass_through_dma_support Object to be assigned
    def intel_vtd_pass_through_dma_support=(intel_vtd_pass_through_dma_support)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(intel_vtd_pass_through_dma_support)
        fail ArgumentError, "invalid value for \"intel_vtd_pass_through_dma_support\", must be one of #{validator.allowable_values}."
      end
      @intel_vtd_pass_through_dma_support = intel_vtd_pass_through_dma_support
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] intel_vtdats_support Object to be assigned
    def intel_vtdats_support=(intel_vtdats_support)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(intel_vtdats_support)
        fail ArgumentError, "invalid value for \"intel_vtdats_support\", must be one of #{validator.allowable_values}."
      end
      @intel_vtdats_support = intel_vtdats_support
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ioh_error_enable Object to be assigned
    def ioh_error_enable=(ioh_error_enable)
      validator = EnumAttributeValidator.new('String', ["platform-default", "No", "Yes"])
      unless validator.valid?(ioh_error_enable)
        fail ArgumentError, "invalid value for \"ioh_error_enable\", must be one of #{validator.allowable_values}."
      end
      @ioh_error_enable = ioh_error_enable
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ioh_resource Object to be assigned
    def ioh_resource=(ioh_resource)
      validator = EnumAttributeValidator.new('String', ["platform-default", "IOH0 24k IOH1 40k", "IOH0 32k IOH1 32k", "IOH0 40k IOH1 24k", "IOH0 48k IOH1 16k", "IOH0 56k IOH1 8k"])
      unless validator.valid?(ioh_resource)
        fail ArgumentError, "invalid value for \"ioh_resource\", must be one of #{validator.allowable_values}."
      end
      @ioh_resource = ioh_resource
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ip_prefetch Object to be assigned
    def ip_prefetch=(ip_prefetch)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(ip_prefetch)
        fail ArgumentError, "invalid value for \"ip_prefetch\", must be one of #{validator.allowable_values}."
      end
      @ip_prefetch = ip_prefetch
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ipv4http Object to be assigned
    def ipv4http=(ipv4http)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(ipv4http)
        fail ArgumentError, "invalid value for \"ipv4http\", must be one of #{validator.allowable_values}."
      end
      @ipv4http = ipv4http
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ipv4pxe Object to be assigned
    def ipv4pxe=(ipv4pxe)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(ipv4pxe)
        fail ArgumentError, "invalid value for \"ipv4pxe\", must be one of #{validator.allowable_values}."
      end
      @ipv4pxe = ipv4pxe
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ipv6http Object to be assigned
    def ipv6http=(ipv6http)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(ipv6http)
        fail ArgumentError, "invalid value for \"ipv6http\", must be one of #{validator.allowable_values}."
      end
      @ipv6http = ipv6http
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ipv6pxe Object to be assigned
    def ipv6pxe=(ipv6pxe)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(ipv6pxe)
        fail ArgumentError, "invalid value for \"ipv6pxe\", must be one of #{validator.allowable_values}."
      end
      @ipv6pxe = ipv6pxe
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kti_prefetch Object to be assigned
    def kti_prefetch=(kti_prefetch)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      unless validator.valid?(kti_prefetch)
        fail ArgumentError, "invalid value for \"kti_prefetch\", must be one of #{validator.allowable_values}."
      end
      @kti_prefetch = kti_prefetch
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] legacy_os_redirection Object to be assigned
    def legacy_os_redirection=(legacy_os_redirection)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(legacy_os_redirection)
        fail ArgumentError, "invalid value for \"legacy_os_redirection\", must be one of #{validator.allowable_values}."
      end
      @legacy_os_redirection = legacy_os_redirection
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] legacy_usb_support Object to be assigned
    def legacy_usb_support=(legacy_usb_support)
      validator = EnumAttributeValidator.new('String', ["platform-default", "auto", "disabled", "enabled"])
      unless validator.valid?(legacy_usb_support)
        fail ArgumentError, "invalid value for \"legacy_usb_support\", must be one of #{validator.allowable_values}."
      end
      @legacy_usb_support = legacy_usb_support
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] llc_alloc Object to be assigned
    def llc_alloc=(llc_alloc)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      unless validator.valid?(llc_alloc)
        fail ArgumentError, "invalid value for \"llc_alloc\", must be one of #{validator.allowable_values}."
      end
      @llc_alloc = llc_alloc
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] llc_prefetch Object to be assigned
    def llc_prefetch=(llc_prefetch)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(llc_prefetch)
        fail ArgumentError, "invalid value for \"llc_prefetch\", must be one of #{validator.allowable_values}."
      end
      @llc_prefetch = llc_prefetch
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lom_port0state Object to be assigned
    def lom_port0state=(lom_port0state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(lom_port0state)
        fail ArgumentError, "invalid value for \"lom_port0state\", must be one of #{validator.allowable_values}."
      end
      @lom_port0state = lom_port0state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lom_port1state Object to be assigned
    def lom_port1state=(lom_port1state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(lom_port1state)
        fail ArgumentError, "invalid value for \"lom_port1state\", must be one of #{validator.allowable_values}."
      end
      @lom_port1state = lom_port1state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lom_port2state Object to be assigned
    def lom_port2state=(lom_port2state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(lom_port2state)
        fail ArgumentError, "invalid value for \"lom_port2state\", must be one of #{validator.allowable_values}."
      end
      @lom_port2state = lom_port2state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lom_port3state Object to be assigned
    def lom_port3state=(lom_port3state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(lom_port3state)
        fail ArgumentError, "invalid value for \"lom_port3state\", must be one of #{validator.allowable_values}."
      end
      @lom_port3state = lom_port3state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lom_ports_all_state Object to be assigned
    def lom_ports_all_state=(lom_ports_all_state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(lom_ports_all_state)
        fail ArgumentError, "invalid value for \"lom_ports_all_state\", must be one of #{validator.allowable_values}."
      end
      @lom_ports_all_state = lom_ports_all_state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lv_ddr_mode Object to be assigned
    def lv_ddr_mode=(lv_ddr_mode)
      validator = EnumAttributeValidator.new('String', ["platform-default", "auto", "performance-mode", "power-saving-mode"])
      unless validator.valid?(lv_ddr_mode)
        fail ArgumentError, "invalid value for \"lv_ddr_mode\", must be one of #{validator.allowable_values}."
      end
      @lv_ddr_mode = lv_ddr_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] make_device_non_bootable Object to be assigned
    def make_device_non_bootable=(make_device_non_bootable)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(make_device_non_bootable)
        fail ArgumentError, "invalid value for \"make_device_non_bootable\", must be one of #{validator.allowable_values}."
      end
      @make_device_non_bootable = make_device_non_bootable
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] memory_bandwidth_boost Object to be assigned
    def memory_bandwidth_boost=(memory_bandwidth_boost)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(memory_bandwidth_boost)
        fail ArgumentError, "invalid value for \"memory_bandwidth_boost\", must be one of #{validator.allowable_values}."
      end
      @memory_bandwidth_boost = memory_bandwidth_boost
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] memory_inter_leave Object to be assigned
    def memory_inter_leave=(memory_inter_leave)
      validator = EnumAttributeValidator.new('String', ["platform-default", "1 Way Node Interleave", "2 Way Node Interleave", "4 Way Node Interleave", "8 Way Node Interleave", "disabled", "enabled"])
      unless validator.valid?(memory_inter_leave)
        fail ArgumentError, "invalid value for \"memory_inter_leave\", must be one of #{validator.allowable_values}."
      end
      @memory_inter_leave = memory_inter_leave
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] memory_mapped_io_above4gb Object to be assigned
    def memory_mapped_io_above4gb=(memory_mapped_io_above4gb)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(memory_mapped_io_above4gb)
        fail ArgumentError, "invalid value for \"memory_mapped_io_above4gb\", must be one of #{validator.allowable_values}."
      end
      @memory_mapped_io_above4gb = memory_mapped_io_above4gb
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] memory_refresh_rate Object to be assigned
    def memory_refresh_rate=(memory_refresh_rate)
      validator = EnumAttributeValidator.new('String', ["platform-default", "1x Refresh", "2x Refresh"])
      unless validator.valid?(memory_refresh_rate)
        fail ArgumentError, "invalid value for \"memory_refresh_rate\", must be one of #{validator.allowable_values}."
      end
      @memory_refresh_rate = memory_refresh_rate
    end

    # Custom attribute writer method with validation
    # @param [Object] memory_size_limit Value to be assigned
    def memory_size_limit=(memory_size_limit)
      pattern = Regexp.new(/^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$|^(platform-default)$/)
      if !memory_size_limit.nil? && memory_size_limit !~ pattern
        fail ArgumentError, "invalid value for \"memory_size_limit\", must conform to the pattern #{pattern}."
      end

      @memory_size_limit = memory_size_limit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] memory_thermal_throttling Object to be assigned
    def memory_thermal_throttling=(memory_thermal_throttling)
      validator = EnumAttributeValidator.new('String', ["platform-default", "CLTT with PECI", "Disabled"])
      unless validator.valid?(memory_thermal_throttling)
        fail ArgumentError, "invalid value for \"memory_thermal_throttling\", must be one of #{validator.allowable_values}."
      end
      @memory_thermal_throttling = memory_thermal_throttling
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mirroring_mode Object to be assigned
    def mirroring_mode=(mirroring_mode)
      validator = EnumAttributeValidator.new('String', ["platform-default", "inter-socket", "intra-socket"])
      unless validator.valid?(mirroring_mode)
        fail ArgumentError, "invalid value for \"mirroring_mode\", must be one of #{validator.allowable_values}."
      end
      @mirroring_mode = mirroring_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mmcfg_base Object to be assigned
    def mmcfg_base=(mmcfg_base)
      validator = EnumAttributeValidator.new('String', ["platform-default", "1 GB", "2 GB", "2.5 GB", "3 GB", "Auto"])
      unless validator.valid?(mmcfg_base)
        fail ArgumentError, "invalid value for \"mmcfg_base\", must be one of #{validator.allowable_values}."
      end
      @mmcfg_base = mmcfg_base
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network_stack Object to be assigned
    def network_stack=(network_stack)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(network_stack)
        fail ArgumentError, "invalid value for \"network_stack\", must be one of #{validator.allowable_values}."
      end
      @network_stack = network_stack
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] numa_optimized Object to be assigned
    def numa_optimized=(numa_optimized)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(numa_optimized)
        fail ArgumentError, "invalid value for \"numa_optimized\", must be one of #{validator.allowable_values}."
      end
      @numa_optimized = numa_optimized
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] nvmdimm_perform_config Object to be assigned
    def nvmdimm_perform_config=(nvmdimm_perform_config)
      validator = EnumAttributeValidator.new('String', ["platform-default", "BW Optimized", "Balanced Profile", "Latency Optimized"])
      unless validator.valid?(nvmdimm_perform_config)
        fail ArgumentError, "invalid value for \"nvmdimm_perform_config\", must be one of #{validator.allowable_values}."
      end
      @nvmdimm_perform_config = nvmdimm_perform_config
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] onboard10gbit_lom Object to be assigned
    def onboard10gbit_lom=(onboard10gbit_lom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(onboard10gbit_lom)
        fail ArgumentError, "invalid value for \"onboard10gbit_lom\", must be one of #{validator.allowable_values}."
      end
      @onboard10gbit_lom = onboard10gbit_lom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] onboard_gbit_lom Object to be assigned
    def onboard_gbit_lom=(onboard_gbit_lom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(onboard_gbit_lom)
        fail ArgumentError, "invalid value for \"onboard_gbit_lom\", must be one of #{validator.allowable_values}."
      end
      @onboard_gbit_lom = onboard_gbit_lom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] onboard_scu_storage_support Object to be assigned
    def onboard_scu_storage_support=(onboard_scu_storage_support)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(onboard_scu_storage_support)
        fail ArgumentError, "invalid value for \"onboard_scu_storage_support\", must be one of #{validator.allowable_values}."
      end
      @onboard_scu_storage_support = onboard_scu_storage_support
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] onboard_scu_storage_sw_stack Object to be assigned
    def onboard_scu_storage_sw_stack=(onboard_scu_storage_sw_stack)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Intel RSTe", "LSI SW RAID"])
      unless validator.valid?(onboard_scu_storage_sw_stack)
        fail ArgumentError, "invalid value for \"onboard_scu_storage_sw_stack\", must be one of #{validator.allowable_values}."
      end
      @onboard_scu_storage_sw_stack = onboard_scu_storage_sw_stack
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] operation_mode Object to be assigned
    def operation_mode=(operation_mode)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Test Only", "Test and Repair"])
      unless validator.valid?(operation_mode)
        fail ArgumentError, "invalid value for \"operation_mode\", must be one of #{validator.allowable_values}."
      end
      @operation_mode = operation_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] os_boot_watchdog_timer Object to be assigned
    def os_boot_watchdog_timer=(os_boot_watchdog_timer)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(os_boot_watchdog_timer)
        fail ArgumentError, "invalid value for \"os_boot_watchdog_timer\", must be one of #{validator.allowable_values}."
      end
      @os_boot_watchdog_timer = os_boot_watchdog_timer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] os_boot_watchdog_timer_policy Object to be assigned
    def os_boot_watchdog_timer_policy=(os_boot_watchdog_timer_policy)
      validator = EnumAttributeValidator.new('String', ["platform-default", "do-nothing", "power-off", "reset"])
      unless validator.valid?(os_boot_watchdog_timer_policy)
        fail ArgumentError, "invalid value for \"os_boot_watchdog_timer_policy\", must be one of #{validator.allowable_values}."
      end
      @os_boot_watchdog_timer_policy = os_boot_watchdog_timer_policy
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] os_boot_watchdog_timer_timeout Object to be assigned
    def os_boot_watchdog_timer_timeout=(os_boot_watchdog_timer_timeout)
      validator = EnumAttributeValidator.new('String', ["platform-default", "5-minutes", "10-minutes", "15-minutes", "20-minutes"])
      unless validator.valid?(os_boot_watchdog_timer_timeout)
        fail ArgumentError, "invalid value for \"os_boot_watchdog_timer_timeout\", must be one of #{validator.allowable_values}."
      end
      @os_boot_watchdog_timer_timeout = os_boot_watchdog_timer_timeout
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] out_of_band_mgmt_port Object to be assigned
    def out_of_band_mgmt_port=(out_of_band_mgmt_port)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(out_of_band_mgmt_port)
        fail ArgumentError, "invalid value for \"out_of_band_mgmt_port\", must be one of #{validator.allowable_values}."
      end
      @out_of_band_mgmt_port = out_of_band_mgmt_port
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] package_cstate_limit Object to be assigned
    def package_cstate_limit=(package_cstate_limit)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "C0 C1 State", "C0/C1", "C2", "C6 Non Retention", "C6 Retention", "No Limit"])
      unless validator.valid?(package_cstate_limit)
        fail ArgumentError, "invalid value for \"package_cstate_limit\", must be one of #{validator.allowable_values}."
      end
      @package_cstate_limit = package_cstate_limit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] panic_high_watermark Object to be assigned
    def panic_high_watermark=(panic_high_watermark)
      validator = EnumAttributeValidator.new('String', ["platform-default", "High", "Low"])
      unless validator.valid?(panic_high_watermark)
        fail ArgumentError, "invalid value for \"panic_high_watermark\", must be one of #{validator.allowable_values}."
      end
      @panic_high_watermark = panic_high_watermark
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] partial_cache_line_sparing Object to be assigned
    def partial_cache_line_sparing=(partial_cache_line_sparing)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(partial_cache_line_sparing)
        fail ArgumentError, "invalid value for \"partial_cache_line_sparing\", must be one of #{validator.allowable_values}."
      end
      @partial_cache_line_sparing = partial_cache_line_sparing
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] partial_mirror_mode_config Object to be assigned
    def partial_mirror_mode_config=(partial_mirror_mode_config)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "Percentage", "Value in GB"])
      unless validator.valid?(partial_mirror_mode_config)
        fail ArgumentError, "invalid value for \"partial_mirror_mode_config\", must be one of #{validator.allowable_values}."
      end
      @partial_mirror_mode_config = partial_mirror_mode_config
    end

    # Custom attribute writer method with validation
    # @param [Object] partial_mirror_percent Value to be assigned
    def partial_mirror_percent=(partial_mirror_percent)
      pattern = Regexp.new(/^(\d\.\d{1,2}|[1-4]\d\.\d{1,2}|50\.[0]{1,2})$|^(platform-default)$/)
      if !partial_mirror_percent.nil? && partial_mirror_percent !~ pattern
        fail ArgumentError, "invalid value for \"partial_mirror_percent\", must conform to the pattern #{pattern}."
      end

      @partial_mirror_percent = partial_mirror_percent
    end

    # Custom attribute writer method with validation
    # @param [Object] partial_mirror_value1 Value to be assigned
    def partial_mirror_value1=(partial_mirror_value1)
      pattern = Regexp.new(/^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$|^(platform-default)$/)
      if !partial_mirror_value1.nil? && partial_mirror_value1 !~ pattern
        fail ArgumentError, "invalid value for \"partial_mirror_value1\", must conform to the pattern #{pattern}."
      end

      @partial_mirror_value1 = partial_mirror_value1
    end

    # Custom attribute writer method with validation
    # @param [Object] partial_mirror_value2 Value to be assigned
    def partial_mirror_value2=(partial_mirror_value2)
      pattern = Regexp.new(/^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$|^(platform-default)$/)
      if !partial_mirror_value2.nil? && partial_mirror_value2 !~ pattern
        fail ArgumentError, "invalid value for \"partial_mirror_value2\", must conform to the pattern #{pattern}."
      end

      @partial_mirror_value2 = partial_mirror_value2
    end

    # Custom attribute writer method with validation
    # @param [Object] partial_mirror_value3 Value to be assigned
    def partial_mirror_value3=(partial_mirror_value3)
      pattern = Regexp.new(/^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$|^(platform-default)$/)
      if !partial_mirror_value3.nil? && partial_mirror_value3 !~ pattern
        fail ArgumentError, "invalid value for \"partial_mirror_value3\", must conform to the pattern #{pattern}."
      end

      @partial_mirror_value3 = partial_mirror_value3
    end

    # Custom attribute writer method with validation
    # @param [Object] partial_mirror_value4 Value to be assigned
    def partial_mirror_value4=(partial_mirror_value4)
      pattern = Regexp.new(/^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$|^(platform-default)$/)
      if !partial_mirror_value4.nil? && partial_mirror_value4 !~ pattern
        fail ArgumentError, "invalid value for \"partial_mirror_value4\", must conform to the pattern #{pattern}."
      end

      @partial_mirror_value4 = partial_mirror_value4
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] patrol_scrub Object to be assigned
    def patrol_scrub=(patrol_scrub)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "Enable at End of POST", "enabled"])
      unless validator.valid?(patrol_scrub)
        fail ArgumentError, "invalid value for \"patrol_scrub\", must be one of #{validator.allowable_values}."
      end
      @patrol_scrub = patrol_scrub
    end

    # Custom attribute writer method with validation
    # @param [Object] patrol_scrub_duration Value to be assigned
    def patrol_scrub_duration=(patrol_scrub_duration)
      pattern = Regexp.new(/^([5-9]|1\d|2[0-3])$|^(platform-default)$/)
      if !patrol_scrub_duration.nil? && patrol_scrub_duration !~ pattern
        fail ArgumentError, "invalid value for \"patrol_scrub_duration\", must conform to the pattern #{pattern}."
      end

      @patrol_scrub_duration = patrol_scrub_duration
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pc_ie_ras_support Object to be assigned
    def pc_ie_ras_support=(pc_ie_ras_support)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(pc_ie_ras_support)
        fail ArgumentError, "invalid value for \"pc_ie_ras_support\", must be one of #{validator.allowable_values}."
      end
      @pc_ie_ras_support = pc_ie_ras_support
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pc_ie_ssd_hot_plug_support Object to be assigned
    def pc_ie_ssd_hot_plug_support=(pc_ie_ssd_hot_plug_support)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(pc_ie_ssd_hot_plug_support)
        fail ArgumentError, "invalid value for \"pc_ie_ssd_hot_plug_support\", must be one of #{validator.allowable_values}."
      end
      @pc_ie_ssd_hot_plug_support = pc_ie_ssd_hot_plug_support
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pch_usb30mode Object to be assigned
    def pch_usb30mode=(pch_usb30mode)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(pch_usb30mode)
        fail ArgumentError, "invalid value for \"pch_usb30mode\", must be one of #{validator.allowable_values}."
      end
      @pch_usb30mode = pch_usb30mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pci_option_ro_ms Object to be assigned
    def pci_option_ro_ms=(pci_option_ro_ms)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(pci_option_ro_ms)
        fail ArgumentError, "invalid value for \"pci_option_ro_ms\", must be one of #{validator.allowable_values}."
      end
      @pci_option_ro_ms = pci_option_ro_ms
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pci_rom_clp Object to be assigned
    def pci_rom_clp=(pci_rom_clp)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(pci_rom_clp)
        fail ArgumentError, "invalid value for \"pci_rom_clp\", must be one of #{validator.allowable_values}."
      end
      @pci_rom_clp = pci_rom_clp
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_ari_support Object to be assigned
    def pcie_ari_support=(pcie_ari_support)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      unless validator.valid?(pcie_ari_support)
        fail ArgumentError, "invalid value for \"pcie_ari_support\", must be one of #{validator.allowable_values}."
      end
      @pcie_ari_support = pcie_ari_support
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_pll_ssc Object to be assigned
    def pcie_pll_ssc=(pcie_pll_ssc)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "ZeroPointFive"])
      unless validator.valid?(pcie_pll_ssc)
        fail ArgumentError, "invalid value for \"pcie_pll_ssc\", must be one of #{validator.allowable_values}."
      end
      @pcie_pll_ssc = pcie_pll_ssc
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_slot_mraid1link_speed Object to be assigned
    def pcie_slot_mraid1link_speed=(pcie_slot_mraid1link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(pcie_slot_mraid1link_speed)
        fail ArgumentError, "invalid value for \"pcie_slot_mraid1link_speed\", must be one of #{validator.allowable_values}."
      end
      @pcie_slot_mraid1link_speed = pcie_slot_mraid1link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_slot_mraid1option_rom Object to be assigned
    def pcie_slot_mraid1option_rom=(pcie_slot_mraid1option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(pcie_slot_mraid1option_rom)
        fail ArgumentError, "invalid value for \"pcie_slot_mraid1option_rom\", must be one of #{validator.allowable_values}."
      end
      @pcie_slot_mraid1option_rom = pcie_slot_mraid1option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_slot_mraid2link_speed Object to be assigned
    def pcie_slot_mraid2link_speed=(pcie_slot_mraid2link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(pcie_slot_mraid2link_speed)
        fail ArgumentError, "invalid value for \"pcie_slot_mraid2link_speed\", must be one of #{validator.allowable_values}."
      end
      @pcie_slot_mraid2link_speed = pcie_slot_mraid2link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_slot_mraid2option_rom Object to be assigned
    def pcie_slot_mraid2option_rom=(pcie_slot_mraid2option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(pcie_slot_mraid2option_rom)
        fail ArgumentError, "invalid value for \"pcie_slot_mraid2option_rom\", must be one of #{validator.allowable_values}."
      end
      @pcie_slot_mraid2option_rom = pcie_slot_mraid2option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_slot_mstorraid_link_speed Object to be assigned
    def pcie_slot_mstorraid_link_speed=(pcie_slot_mstorraid_link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(pcie_slot_mstorraid_link_speed)
        fail ArgumentError, "invalid value for \"pcie_slot_mstorraid_link_speed\", must be one of #{validator.allowable_values}."
      end
      @pcie_slot_mstorraid_link_speed = pcie_slot_mstorraid_link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_slot_mstorraid_option_rom Object to be assigned
    def pcie_slot_mstorraid_option_rom=(pcie_slot_mstorraid_option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(pcie_slot_mstorraid_option_rom)
        fail ArgumentError, "invalid value for \"pcie_slot_mstorraid_option_rom\", must be one of #{validator.allowable_values}."
      end
      @pcie_slot_mstorraid_option_rom = pcie_slot_mstorraid_option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_slot_nvme1link_speed Object to be assigned
    def pcie_slot_nvme1link_speed=(pcie_slot_nvme1link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(pcie_slot_nvme1link_speed)
        fail ArgumentError, "invalid value for \"pcie_slot_nvme1link_speed\", must be one of #{validator.allowable_values}."
      end
      @pcie_slot_nvme1link_speed = pcie_slot_nvme1link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_slot_nvme1option_rom Object to be assigned
    def pcie_slot_nvme1option_rom=(pcie_slot_nvme1option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(pcie_slot_nvme1option_rom)
        fail ArgumentError, "invalid value for \"pcie_slot_nvme1option_rom\", must be one of #{validator.allowable_values}."
      end
      @pcie_slot_nvme1option_rom = pcie_slot_nvme1option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_slot_nvme2link_speed Object to be assigned
    def pcie_slot_nvme2link_speed=(pcie_slot_nvme2link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(pcie_slot_nvme2link_speed)
        fail ArgumentError, "invalid value for \"pcie_slot_nvme2link_speed\", must be one of #{validator.allowable_values}."
      end
      @pcie_slot_nvme2link_speed = pcie_slot_nvme2link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_slot_nvme2option_rom Object to be assigned
    def pcie_slot_nvme2option_rom=(pcie_slot_nvme2option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(pcie_slot_nvme2option_rom)
        fail ArgumentError, "invalid value for \"pcie_slot_nvme2option_rom\", must be one of #{validator.allowable_values}."
      end
      @pcie_slot_nvme2option_rom = pcie_slot_nvme2option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_slot_nvme3link_speed Object to be assigned
    def pcie_slot_nvme3link_speed=(pcie_slot_nvme3link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(pcie_slot_nvme3link_speed)
        fail ArgumentError, "invalid value for \"pcie_slot_nvme3link_speed\", must be one of #{validator.allowable_values}."
      end
      @pcie_slot_nvme3link_speed = pcie_slot_nvme3link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_slot_nvme3option_rom Object to be assigned
    def pcie_slot_nvme3option_rom=(pcie_slot_nvme3option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(pcie_slot_nvme3option_rom)
        fail ArgumentError, "invalid value for \"pcie_slot_nvme3option_rom\", must be one of #{validator.allowable_values}."
      end
      @pcie_slot_nvme3option_rom = pcie_slot_nvme3option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_slot_nvme4link_speed Object to be assigned
    def pcie_slot_nvme4link_speed=(pcie_slot_nvme4link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(pcie_slot_nvme4link_speed)
        fail ArgumentError, "invalid value for \"pcie_slot_nvme4link_speed\", must be one of #{validator.allowable_values}."
      end
      @pcie_slot_nvme4link_speed = pcie_slot_nvme4link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_slot_nvme4option_rom Object to be assigned
    def pcie_slot_nvme4option_rom=(pcie_slot_nvme4option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(pcie_slot_nvme4option_rom)
        fail ArgumentError, "invalid value for \"pcie_slot_nvme4option_rom\", must be one of #{validator.allowable_values}."
      end
      @pcie_slot_nvme4option_rom = pcie_slot_nvme4option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_slot_nvme5link_speed Object to be assigned
    def pcie_slot_nvme5link_speed=(pcie_slot_nvme5link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(pcie_slot_nvme5link_speed)
        fail ArgumentError, "invalid value for \"pcie_slot_nvme5link_speed\", must be one of #{validator.allowable_values}."
      end
      @pcie_slot_nvme5link_speed = pcie_slot_nvme5link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_slot_nvme5option_rom Object to be assigned
    def pcie_slot_nvme5option_rom=(pcie_slot_nvme5option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(pcie_slot_nvme5option_rom)
        fail ArgumentError, "invalid value for \"pcie_slot_nvme5option_rom\", must be one of #{validator.allowable_values}."
      end
      @pcie_slot_nvme5option_rom = pcie_slot_nvme5option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_slot_nvme6link_speed Object to be assigned
    def pcie_slot_nvme6link_speed=(pcie_slot_nvme6link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(pcie_slot_nvme6link_speed)
        fail ArgumentError, "invalid value for \"pcie_slot_nvme6link_speed\", must be one of #{validator.allowable_values}."
      end
      @pcie_slot_nvme6link_speed = pcie_slot_nvme6link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_slot_nvme6option_rom Object to be assigned
    def pcie_slot_nvme6option_rom=(pcie_slot_nvme6option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(pcie_slot_nvme6option_rom)
        fail ArgumentError, "invalid value for \"pcie_slot_nvme6option_rom\", must be one of #{validator.allowable_values}."
      end
      @pcie_slot_nvme6option_rom = pcie_slot_nvme6option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pcie_slots_cdn_enable Object to be assigned
    def pcie_slots_cdn_enable=(pcie_slots_cdn_enable)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(pcie_slots_cdn_enable)
        fail ArgumentError, "invalid value for \"pcie_slots_cdn_enable\", must be one of #{validator.allowable_values}."
      end
      @pcie_slots_cdn_enable = pcie_slots_cdn_enable
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pop_support Object to be assigned
    def pop_support=(pop_support)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(pop_support)
        fail ArgumentError, "invalid value for \"pop_support\", must be one of #{validator.allowable_values}."
      end
      @pop_support = pop_support
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] post_error_pause Object to be assigned
    def post_error_pause=(post_error_pause)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(post_error_pause)
        fail ArgumentError, "invalid value for \"post_error_pause\", must be one of #{validator.allowable_values}."
      end
      @post_error_pause = post_error_pause
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] post_package_repair Object to be assigned
    def post_package_repair=(post_package_repair)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Disabled", "Hard PPR"])
      unless validator.valid?(post_package_repair)
        fail ArgumentError, "invalid value for \"post_package_repair\", must be one of #{validator.allowable_values}."
      end
      @post_package_repair = post_package_repair
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] processor_c1e Object to be assigned
    def processor_c1e=(processor_c1e)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(processor_c1e)
        fail ArgumentError, "invalid value for \"processor_c1e\", must be one of #{validator.allowable_values}."
      end
      @processor_c1e = processor_c1e
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] processor_c3report Object to be assigned
    def processor_c3report=(processor_c3report)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(processor_c3report)
        fail ArgumentError, "invalid value for \"processor_c3report\", must be one of #{validator.allowable_values}."
      end
      @processor_c3report = processor_c3report
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] processor_c6report Object to be assigned
    def processor_c6report=(processor_c6report)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(processor_c6report)
        fail ArgumentError, "invalid value for \"processor_c6report\", must be one of #{validator.allowable_values}."
      end
      @processor_c6report = processor_c6report
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] processor_cstate Object to be assigned
    def processor_cstate=(processor_cstate)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(processor_cstate)
        fail ArgumentError, "invalid value for \"processor_cstate\", must be one of #{validator.allowable_values}."
      end
      @processor_cstate = processor_cstate
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] psata Object to be assigned
    def psata=(psata)
      validator = EnumAttributeValidator.new('String', ["platform-default", "AHCI", "Disabled", "LSI SW RAID"])
      unless validator.valid?(psata)
        fail ArgumentError, "invalid value for \"psata\", must be one of #{validator.allowable_values}."
      end
      @psata = psata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pstate_coord_type Object to be assigned
    def pstate_coord_type=(pstate_coord_type)
      validator = EnumAttributeValidator.new('String', ["platform-default", "HW ALL", "SW ALL", "SW ANY"])
      unless validator.valid?(pstate_coord_type)
        fail ArgumentError, "invalid value for \"pstate_coord_type\", must be one of #{validator.allowable_values}."
      end
      @pstate_coord_type = pstate_coord_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] putty_key_pad Object to be assigned
    def putty_key_pad=(putty_key_pad)
      validator = EnumAttributeValidator.new('String', ["platform-default", "ESCN", "LINUX", "SCO", "VT100", "VT400", "XTERMR6"])
      unless validator.valid?(putty_key_pad)
        fail ArgumentError, "invalid value for \"putty_key_pad\", must be one of #{validator.allowable_values}."
      end
      @putty_key_pad = putty_key_pad
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pwr_perf_tuning Object to be assigned
    def pwr_perf_tuning=(pwr_perf_tuning)
      validator = EnumAttributeValidator.new('String', ["platform-default", "bios", "os", "peci"])
      unless validator.valid?(pwr_perf_tuning)
        fail ArgumentError, "invalid value for \"pwr_perf_tuning\", must be one of #{validator.allowable_values}."
      end
      @pwr_perf_tuning = pwr_perf_tuning
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] qpi_link_frequency Object to be assigned
    def qpi_link_frequency=(qpi_link_frequency)
      validator = EnumAttributeValidator.new('String', ["platform-default", "6.4-gt/s", "7.2-gt/s", "8.0-gt/s", "9.6-gt/s", "auto"])
      unless validator.valid?(qpi_link_frequency)
        fail ArgumentError, "invalid value for \"qpi_link_frequency\", must be one of #{validator.allowable_values}."
      end
      @qpi_link_frequency = qpi_link_frequency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] qpi_link_speed Object to be assigned
    def qpi_link_speed=(qpi_link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "10.4GT/s", "11.2GT/s", "9.6GT/s", "Auto"])
      unless validator.valid?(qpi_link_speed)
        fail ArgumentError, "invalid value for \"qpi_link_speed\", must be one of #{validator.allowable_values}."
      end
      @qpi_link_speed = qpi_link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] qpi_snoop_mode Object to be assigned
    def qpi_snoop_mode=(qpi_snoop_mode)
      validator = EnumAttributeValidator.new('String', ["platform-default", "auto", "cluster-on-die", "early-snoop", "home-directory-snoop", "home-directory-snoop-with-osb", "home-snoop"])
      unless validator.valid?(qpi_snoop_mode)
        fail ArgumentError, "invalid value for \"qpi_snoop_mode\", must be one of #{validator.allowable_values}."
      end
      @qpi_snoop_mode = qpi_snoop_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rank_inter_leave Object to be assigned
    def rank_inter_leave=(rank_inter_leave)
      validator = EnumAttributeValidator.new('String', ["platform-default", "1-way", "2-way", "4-way", "8-way", "auto"])
      unless validator.valid?(rank_inter_leave)
        fail ArgumentError, "invalid value for \"rank_inter_leave\", must be one of #{validator.allowable_values}."
      end
      @rank_inter_leave = rank_inter_leave
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] redirection_after_post Object to be assigned
    def redirection_after_post=(redirection_after_post)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Always Enable", "Bootloader"])
      unless validator.valid?(redirection_after_post)
        fail ArgumentError, "invalid value for \"redirection_after_post\", must be one of #{validator.allowable_values}."
      end
      @redirection_after_post = redirection_after_post
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sata_mode_select Object to be assigned
    def sata_mode_select=(sata_mode_select)
      validator = EnumAttributeValidator.new('String', ["platform-default", "AHCI", "Disabled", "LSI SW RAID"])
      unless validator.valid?(sata_mode_select)
        fail ArgumentError, "invalid value for \"sata_mode_select\", must be one of #{validator.allowable_values}."
      end
      @sata_mode_select = sata_mode_select
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] select_memory_ras_configuration Object to be assigned
    def select_memory_ras_configuration=(select_memory_ras_configuration)
      validator = EnumAttributeValidator.new('String', ["platform-default", "adddc-sparing", "lockstep", "maximum-performance", "mirror-mode-1lm", "mirroring", "partial-mirror-mode-1lm", "sparing"])
      unless validator.valid?(select_memory_ras_configuration)
        fail ArgumentError, "invalid value for \"select_memory_ras_configuration\", must be one of #{validator.allowable_values}."
      end
      @select_memory_ras_configuration = select_memory_ras_configuration
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] select_ppr_type Object to be assigned
    def select_ppr_type=(select_ppr_type)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "Hard PPR", "Soft PPR"])
      unless validator.valid?(select_ppr_type)
        fail ArgumentError, "invalid value for \"select_ppr_type\", must be one of #{validator.allowable_values}."
      end
      @select_ppr_type = select_ppr_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] serial_port_aenable Object to be assigned
    def serial_port_aenable=(serial_port_aenable)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(serial_port_aenable)
        fail ArgumentError, "invalid value for \"serial_port_aenable\", must be one of #{validator.allowable_values}."
      end
      @serial_port_aenable = serial_port_aenable
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sev Object to be assigned
    def sev=(sev)
      validator = EnumAttributeValidator.new('String', ["platform-default", "253 ASIDs", "509 ASIDs", "Auto"])
      unless validator.valid?(sev)
        fail ArgumentError, "invalid value for \"sev\", must be one of #{validator.allowable_values}."
      end
      @sev = sev
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sgx_auto_registration_agent Object to be assigned
    def sgx_auto_registration_agent=(sgx_auto_registration_agent)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(sgx_auto_registration_agent)
        fail ArgumentError, "invalid value for \"sgx_auto_registration_agent\", must be one of #{validator.allowable_values}."
      end
      @sgx_auto_registration_agent = sgx_auto_registration_agent
    end

    # Custom attribute writer method with validation
    # @param [Object] sgx_epoch0 Value to be assigned
    def sgx_epoch0=(sgx_epoch0)
      pattern = Regexp.new(/^([0-9a-fA-F]{1,16})$|^(platform-default)$/)
      if !sgx_epoch0.nil? && sgx_epoch0 !~ pattern
        fail ArgumentError, "invalid value for \"sgx_epoch0\", must conform to the pattern #{pattern}."
      end

      @sgx_epoch0 = sgx_epoch0
    end

    # Custom attribute writer method with validation
    # @param [Object] sgx_epoch1 Value to be assigned
    def sgx_epoch1=(sgx_epoch1)
      pattern = Regexp.new(/^([0-9a-fA-F]{1,16})$|^(platform-default)$/)
      if !sgx_epoch1.nil? && sgx_epoch1 !~ pattern
        fail ArgumentError, "invalid value for \"sgx_epoch1\", must conform to the pattern #{pattern}."
      end

      @sgx_epoch1 = sgx_epoch1
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sgx_factory_reset Object to be assigned
    def sgx_factory_reset=(sgx_factory_reset)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(sgx_factory_reset)
        fail ArgumentError, "invalid value for \"sgx_factory_reset\", must be one of #{validator.allowable_values}."
      end
      @sgx_factory_reset = sgx_factory_reset
    end

    # Custom attribute writer method with validation
    # @param [Object] sgx_le_pub_key_hash0 Value to be assigned
    def sgx_le_pub_key_hash0=(sgx_le_pub_key_hash0)
      pattern = Regexp.new(/^([0-9a-fA-F]{1,16})$|^(platform-default)$/)
      if !sgx_le_pub_key_hash0.nil? && sgx_le_pub_key_hash0 !~ pattern
        fail ArgumentError, "invalid value for \"sgx_le_pub_key_hash0\", must conform to the pattern #{pattern}."
      end

      @sgx_le_pub_key_hash0 = sgx_le_pub_key_hash0
    end

    # Custom attribute writer method with validation
    # @param [Object] sgx_le_pub_key_hash1 Value to be assigned
    def sgx_le_pub_key_hash1=(sgx_le_pub_key_hash1)
      pattern = Regexp.new(/^([0-9a-fA-F]{1,16})$|^(platform-default)$/)
      if !sgx_le_pub_key_hash1.nil? && sgx_le_pub_key_hash1 !~ pattern
        fail ArgumentError, "invalid value for \"sgx_le_pub_key_hash1\", must conform to the pattern #{pattern}."
      end

      @sgx_le_pub_key_hash1 = sgx_le_pub_key_hash1
    end

    # Custom attribute writer method with validation
    # @param [Object] sgx_le_pub_key_hash2 Value to be assigned
    def sgx_le_pub_key_hash2=(sgx_le_pub_key_hash2)
      pattern = Regexp.new(/^([0-9a-fA-F]{1,16})$|^(platform-default)$/)
      if !sgx_le_pub_key_hash2.nil? && sgx_le_pub_key_hash2 !~ pattern
        fail ArgumentError, "invalid value for \"sgx_le_pub_key_hash2\", must conform to the pattern #{pattern}."
      end

      @sgx_le_pub_key_hash2 = sgx_le_pub_key_hash2
    end

    # Custom attribute writer method with validation
    # @param [Object] sgx_le_pub_key_hash3 Value to be assigned
    def sgx_le_pub_key_hash3=(sgx_le_pub_key_hash3)
      pattern = Regexp.new(/^([0-9a-fA-F]{1,16})$|^(platform-default)$/)
      if !sgx_le_pub_key_hash3.nil? && sgx_le_pub_key_hash3 !~ pattern
        fail ArgumentError, "invalid value for \"sgx_le_pub_key_hash3\", must conform to the pattern #{pattern}."
      end

      @sgx_le_pub_key_hash3 = sgx_le_pub_key_hash3
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sgx_le_wr Object to be assigned
    def sgx_le_wr=(sgx_le_wr)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(sgx_le_wr)
        fail ArgumentError, "invalid value for \"sgx_le_wr\", must be one of #{validator.allowable_values}."
      end
      @sgx_le_wr = sgx_le_wr
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sgx_package_info_in_band_access Object to be assigned
    def sgx_package_info_in_band_access=(sgx_package_info_in_band_access)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(sgx_package_info_in_band_access)
        fail ArgumentError, "invalid value for \"sgx_package_info_in_band_access\", must be one of #{validator.allowable_values}."
      end
      @sgx_package_info_in_band_access = sgx_package_info_in_band_access
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sgx_qos Object to be assigned
    def sgx_qos=(sgx_qos)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(sgx_qos)
        fail ArgumentError, "invalid value for \"sgx_qos\", must be one of #{validator.allowable_values}."
      end
      @sgx_qos = sgx_qos
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sha1pcr_bank Object to be assigned
    def sha1pcr_bank=(sha1pcr_bank)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(sha1pcr_bank)
        fail ArgumentError, "invalid value for \"sha1pcr_bank\", must be one of #{validator.allowable_values}."
      end
      @sha1pcr_bank = sha1pcr_bank
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sha256pcr_bank Object to be assigned
    def sha256pcr_bank=(sha256pcr_bank)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(sha256pcr_bank)
        fail ArgumentError, "invalid value for \"sha256pcr_bank\", must be one of #{validator.allowable_values}."
      end
      @sha256pcr_bank = sha256pcr_bank
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] single_pctl_enable Object to be assigned
    def single_pctl_enable=(single_pctl_enable)
      validator = EnumAttributeValidator.new('String', ["platform-default", "No", "Yes"])
      unless validator.valid?(single_pctl_enable)
        fail ArgumentError, "invalid value for \"single_pctl_enable\", must be one of #{validator.allowable_values}."
      end
      @single_pctl_enable = single_pctl_enable
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot10link_speed Object to be assigned
    def slot10link_speed=(slot10link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(slot10link_speed)
        fail ArgumentError, "invalid value for \"slot10link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot10link_speed = slot10link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot10state Object to be assigned
    def slot10state=(slot10state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(slot10state)
        fail ArgumentError, "invalid value for \"slot10state\", must be one of #{validator.allowable_values}."
      end
      @slot10state = slot10state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot11link_speed Object to be assigned
    def slot11link_speed=(slot11link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(slot11link_speed)
        fail ArgumentError, "invalid value for \"slot11link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot11link_speed = slot11link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot11state Object to be assigned
    def slot11state=(slot11state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot11state)
        fail ArgumentError, "invalid value for \"slot11state\", must be one of #{validator.allowable_values}."
      end
      @slot11state = slot11state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot12link_speed Object to be assigned
    def slot12link_speed=(slot12link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(slot12link_speed)
        fail ArgumentError, "invalid value for \"slot12link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot12link_speed = slot12link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot12state Object to be assigned
    def slot12state=(slot12state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot12state)
        fail ArgumentError, "invalid value for \"slot12state\", must be one of #{validator.allowable_values}."
      end
      @slot12state = slot12state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot13state Object to be assigned
    def slot13state=(slot13state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot13state)
        fail ArgumentError, "invalid value for \"slot13state\", must be one of #{validator.allowable_values}."
      end
      @slot13state = slot13state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot14state Object to be assigned
    def slot14state=(slot14state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot14state)
        fail ArgumentError, "invalid value for \"slot14state\", must be one of #{validator.allowable_values}."
      end
      @slot14state = slot14state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot1link_speed Object to be assigned
    def slot1link_speed=(slot1link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot1link_speed)
        fail ArgumentError, "invalid value for \"slot1link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot1link_speed = slot1link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot1state Object to be assigned
    def slot1state=(slot1state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(slot1state)
        fail ArgumentError, "invalid value for \"slot1state\", must be one of #{validator.allowable_values}."
      end
      @slot1state = slot1state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot2link_speed Object to be assigned
    def slot2link_speed=(slot2link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot2link_speed)
        fail ArgumentError, "invalid value for \"slot2link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot2link_speed = slot2link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot2state Object to be assigned
    def slot2state=(slot2state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(slot2state)
        fail ArgumentError, "invalid value for \"slot2state\", must be one of #{validator.allowable_values}."
      end
      @slot2state = slot2state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot3link_speed Object to be assigned
    def slot3link_speed=(slot3link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot3link_speed)
        fail ArgumentError, "invalid value for \"slot3link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot3link_speed = slot3link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot3state Object to be assigned
    def slot3state=(slot3state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(slot3state)
        fail ArgumentError, "invalid value for \"slot3state\", must be one of #{validator.allowable_values}."
      end
      @slot3state = slot3state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot4link_speed Object to be assigned
    def slot4link_speed=(slot4link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot4link_speed)
        fail ArgumentError, "invalid value for \"slot4link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot4link_speed = slot4link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot4state Object to be assigned
    def slot4state=(slot4state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(slot4state)
        fail ArgumentError, "invalid value for \"slot4state\", must be one of #{validator.allowable_values}."
      end
      @slot4state = slot4state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot5link_speed Object to be assigned
    def slot5link_speed=(slot5link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot5link_speed)
        fail ArgumentError, "invalid value for \"slot5link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot5link_speed = slot5link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot5state Object to be assigned
    def slot5state=(slot5state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(slot5state)
        fail ArgumentError, "invalid value for \"slot5state\", must be one of #{validator.allowable_values}."
      end
      @slot5state = slot5state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot6link_speed Object to be assigned
    def slot6link_speed=(slot6link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot6link_speed)
        fail ArgumentError, "invalid value for \"slot6link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot6link_speed = slot6link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot6state Object to be assigned
    def slot6state=(slot6state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(slot6state)
        fail ArgumentError, "invalid value for \"slot6state\", must be one of #{validator.allowable_values}."
      end
      @slot6state = slot6state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot7link_speed Object to be assigned
    def slot7link_speed=(slot7link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot7link_speed)
        fail ArgumentError, "invalid value for \"slot7link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot7link_speed = slot7link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot7state Object to be assigned
    def slot7state=(slot7state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(slot7state)
        fail ArgumentError, "invalid value for \"slot7state\", must be one of #{validator.allowable_values}."
      end
      @slot7state = slot7state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot8link_speed Object to be assigned
    def slot8link_speed=(slot8link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot8link_speed)
        fail ArgumentError, "invalid value for \"slot8link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot8link_speed = slot8link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot8state Object to be assigned
    def slot8state=(slot8state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(slot8state)
        fail ArgumentError, "invalid value for \"slot8state\", must be one of #{validator.allowable_values}."
      end
      @slot8state = slot8state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot9link_speed Object to be assigned
    def slot9link_speed=(slot9link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot9link_speed)
        fail ArgumentError, "invalid value for \"slot9link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot9link_speed = slot9link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot9state Object to be assigned
    def slot9state=(slot9state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(slot9state)
        fail ArgumentError, "invalid value for \"slot9state\", must be one of #{validator.allowable_values}."
      end
      @slot9state = slot9state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_flom_link_speed Object to be assigned
    def slot_flom_link_speed=(slot_flom_link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(slot_flom_link_speed)
        fail ArgumentError, "invalid value for \"slot_flom_link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_flom_link_speed = slot_flom_link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme10link_speed Object to be assigned
    def slot_front_nvme10link_speed=(slot_front_nvme10link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot_front_nvme10link_speed)
        fail ArgumentError, "invalid value for \"slot_front_nvme10link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme10link_speed = slot_front_nvme10link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme10option_rom Object to be assigned
    def slot_front_nvme10option_rom=(slot_front_nvme10option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme10option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme10option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme10option_rom = slot_front_nvme10option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme11link_speed Object to be assigned
    def slot_front_nvme11link_speed=(slot_front_nvme11link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot_front_nvme11link_speed)
        fail ArgumentError, "invalid value for \"slot_front_nvme11link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme11link_speed = slot_front_nvme11link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme11option_rom Object to be assigned
    def slot_front_nvme11option_rom=(slot_front_nvme11option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme11option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme11option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme11option_rom = slot_front_nvme11option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme12link_speed Object to be assigned
    def slot_front_nvme12link_speed=(slot_front_nvme12link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot_front_nvme12link_speed)
        fail ArgumentError, "invalid value for \"slot_front_nvme12link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme12link_speed = slot_front_nvme12link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme12option_rom Object to be assigned
    def slot_front_nvme12option_rom=(slot_front_nvme12option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme12option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme12option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme12option_rom = slot_front_nvme12option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme13option_rom Object to be assigned
    def slot_front_nvme13option_rom=(slot_front_nvme13option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme13option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme13option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme13option_rom = slot_front_nvme13option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme14option_rom Object to be assigned
    def slot_front_nvme14option_rom=(slot_front_nvme14option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme14option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme14option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme14option_rom = slot_front_nvme14option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme15option_rom Object to be assigned
    def slot_front_nvme15option_rom=(slot_front_nvme15option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme15option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme15option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme15option_rom = slot_front_nvme15option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme16option_rom Object to be assigned
    def slot_front_nvme16option_rom=(slot_front_nvme16option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme16option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme16option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme16option_rom = slot_front_nvme16option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme17option_rom Object to be assigned
    def slot_front_nvme17option_rom=(slot_front_nvme17option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme17option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme17option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme17option_rom = slot_front_nvme17option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme18option_rom Object to be assigned
    def slot_front_nvme18option_rom=(slot_front_nvme18option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme18option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme18option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme18option_rom = slot_front_nvme18option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme19option_rom Object to be assigned
    def slot_front_nvme19option_rom=(slot_front_nvme19option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme19option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme19option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme19option_rom = slot_front_nvme19option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme1link_speed Object to be assigned
    def slot_front_nvme1link_speed=(slot_front_nvme1link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot_front_nvme1link_speed)
        fail ArgumentError, "invalid value for \"slot_front_nvme1link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme1link_speed = slot_front_nvme1link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme1option_rom Object to be assigned
    def slot_front_nvme1option_rom=(slot_front_nvme1option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme1option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme1option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme1option_rom = slot_front_nvme1option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme20option_rom Object to be assigned
    def slot_front_nvme20option_rom=(slot_front_nvme20option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme20option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme20option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme20option_rom = slot_front_nvme20option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme21option_rom Object to be assigned
    def slot_front_nvme21option_rom=(slot_front_nvme21option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme21option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme21option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme21option_rom = slot_front_nvme21option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme22option_rom Object to be assigned
    def slot_front_nvme22option_rom=(slot_front_nvme22option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme22option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme22option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme22option_rom = slot_front_nvme22option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme23option_rom Object to be assigned
    def slot_front_nvme23option_rom=(slot_front_nvme23option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme23option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme23option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme23option_rom = slot_front_nvme23option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme24option_rom Object to be assigned
    def slot_front_nvme24option_rom=(slot_front_nvme24option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme24option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme24option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme24option_rom = slot_front_nvme24option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme2link_speed Object to be assigned
    def slot_front_nvme2link_speed=(slot_front_nvme2link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot_front_nvme2link_speed)
        fail ArgumentError, "invalid value for \"slot_front_nvme2link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme2link_speed = slot_front_nvme2link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme2option_rom Object to be assigned
    def slot_front_nvme2option_rom=(slot_front_nvme2option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme2option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme2option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme2option_rom = slot_front_nvme2option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme3link_speed Object to be assigned
    def slot_front_nvme3link_speed=(slot_front_nvme3link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot_front_nvme3link_speed)
        fail ArgumentError, "invalid value for \"slot_front_nvme3link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme3link_speed = slot_front_nvme3link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme3option_rom Object to be assigned
    def slot_front_nvme3option_rom=(slot_front_nvme3option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme3option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme3option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme3option_rom = slot_front_nvme3option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme4link_speed Object to be assigned
    def slot_front_nvme4link_speed=(slot_front_nvme4link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot_front_nvme4link_speed)
        fail ArgumentError, "invalid value for \"slot_front_nvme4link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme4link_speed = slot_front_nvme4link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme4option_rom Object to be assigned
    def slot_front_nvme4option_rom=(slot_front_nvme4option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme4option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme4option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme4option_rom = slot_front_nvme4option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme5link_speed Object to be assigned
    def slot_front_nvme5link_speed=(slot_front_nvme5link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot_front_nvme5link_speed)
        fail ArgumentError, "invalid value for \"slot_front_nvme5link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme5link_speed = slot_front_nvme5link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme5option_rom Object to be assigned
    def slot_front_nvme5option_rom=(slot_front_nvme5option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme5option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme5option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme5option_rom = slot_front_nvme5option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme6link_speed Object to be assigned
    def slot_front_nvme6link_speed=(slot_front_nvme6link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot_front_nvme6link_speed)
        fail ArgumentError, "invalid value for \"slot_front_nvme6link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme6link_speed = slot_front_nvme6link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme6option_rom Object to be assigned
    def slot_front_nvme6option_rom=(slot_front_nvme6option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme6option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme6option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme6option_rom = slot_front_nvme6option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme7link_speed Object to be assigned
    def slot_front_nvme7link_speed=(slot_front_nvme7link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot_front_nvme7link_speed)
        fail ArgumentError, "invalid value for \"slot_front_nvme7link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme7link_speed = slot_front_nvme7link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme7option_rom Object to be assigned
    def slot_front_nvme7option_rom=(slot_front_nvme7option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme7option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme7option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme7option_rom = slot_front_nvme7option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme8link_speed Object to be assigned
    def slot_front_nvme8link_speed=(slot_front_nvme8link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot_front_nvme8link_speed)
        fail ArgumentError, "invalid value for \"slot_front_nvme8link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme8link_speed = slot_front_nvme8link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme8option_rom Object to be assigned
    def slot_front_nvme8option_rom=(slot_front_nvme8option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme8option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme8option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme8option_rom = slot_front_nvme8option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme9link_speed Object to be assigned
    def slot_front_nvme9link_speed=(slot_front_nvme9link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot_front_nvme9link_speed)
        fail ArgumentError, "invalid value for \"slot_front_nvme9link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme9link_speed = slot_front_nvme9link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_nvme9option_rom Object to be assigned
    def slot_front_nvme9option_rom=(slot_front_nvme9option_rom)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_front_nvme9option_rom)
        fail ArgumentError, "invalid value for \"slot_front_nvme9option_rom\", must be one of #{validator.allowable_values}."
      end
      @slot_front_nvme9option_rom = slot_front_nvme9option_rom
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_slot5link_speed Object to be assigned
    def slot_front_slot5link_speed=(slot_front_slot5link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(slot_front_slot5link_speed)
        fail ArgumentError, "invalid value for \"slot_front_slot5link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_front_slot5link_speed = slot_front_slot5link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_front_slot6link_speed Object to be assigned
    def slot_front_slot6link_speed=(slot_front_slot6link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(slot_front_slot6link_speed)
        fail ArgumentError, "invalid value for \"slot_front_slot6link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_front_slot6link_speed = slot_front_slot6link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_gpu1state Object to be assigned
    def slot_gpu1state=(slot_gpu1state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_gpu1state)
        fail ArgumentError, "invalid value for \"slot_gpu1state\", must be one of #{validator.allowable_values}."
      end
      @slot_gpu1state = slot_gpu1state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_gpu2state Object to be assigned
    def slot_gpu2state=(slot_gpu2state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_gpu2state)
        fail ArgumentError, "invalid value for \"slot_gpu2state\", must be one of #{validator.allowable_values}."
      end
      @slot_gpu2state = slot_gpu2state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_gpu3state Object to be assigned
    def slot_gpu3state=(slot_gpu3state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_gpu3state)
        fail ArgumentError, "invalid value for \"slot_gpu3state\", must be one of #{validator.allowable_values}."
      end
      @slot_gpu3state = slot_gpu3state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_gpu4state Object to be assigned
    def slot_gpu4state=(slot_gpu4state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_gpu4state)
        fail ArgumentError, "invalid value for \"slot_gpu4state\", must be one of #{validator.allowable_values}."
      end
      @slot_gpu4state = slot_gpu4state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_gpu5state Object to be assigned
    def slot_gpu5state=(slot_gpu5state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_gpu5state)
        fail ArgumentError, "invalid value for \"slot_gpu5state\", must be one of #{validator.allowable_values}."
      end
      @slot_gpu5state = slot_gpu5state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_gpu6state Object to be assigned
    def slot_gpu6state=(slot_gpu6state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_gpu6state)
        fail ArgumentError, "invalid value for \"slot_gpu6state\", must be one of #{validator.allowable_values}."
      end
      @slot_gpu6state = slot_gpu6state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_gpu7state Object to be assigned
    def slot_gpu7state=(slot_gpu7state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_gpu7state)
        fail ArgumentError, "invalid value for \"slot_gpu7state\", must be one of #{validator.allowable_values}."
      end
      @slot_gpu7state = slot_gpu7state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_gpu8state Object to be assigned
    def slot_gpu8state=(slot_gpu8state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_gpu8state)
        fail ArgumentError, "invalid value for \"slot_gpu8state\", must be one of #{validator.allowable_values}."
      end
      @slot_gpu8state = slot_gpu8state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_hba_link_speed Object to be assigned
    def slot_hba_link_speed=(slot_hba_link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(slot_hba_link_speed)
        fail ArgumentError, "invalid value for \"slot_hba_link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_hba_link_speed = slot_hba_link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_hba_state Object to be assigned
    def slot_hba_state=(slot_hba_state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(slot_hba_state)
        fail ArgumentError, "invalid value for \"slot_hba_state\", must be one of #{validator.allowable_values}."
      end
      @slot_hba_state = slot_hba_state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_lom1link Object to be assigned
    def slot_lom1link=(slot_lom1link)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_lom1link)
        fail ArgumentError, "invalid value for \"slot_lom1link\", must be one of #{validator.allowable_values}."
      end
      @slot_lom1link = slot_lom1link
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_lom2link Object to be assigned
    def slot_lom2link=(slot_lom2link)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_lom2link)
        fail ArgumentError, "invalid value for \"slot_lom2link\", must be one of #{validator.allowable_values}."
      end
      @slot_lom2link = slot_lom2link
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_mezz_state Object to be assigned
    def slot_mezz_state=(slot_mezz_state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(slot_mezz_state)
        fail ArgumentError, "invalid value for \"slot_mezz_state\", must be one of #{validator.allowable_values}."
      end
      @slot_mezz_state = slot_mezz_state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_mlom_link_speed Object to be assigned
    def slot_mlom_link_speed=(slot_mlom_link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot_mlom_link_speed)
        fail ArgumentError, "invalid value for \"slot_mlom_link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_mlom_link_speed = slot_mlom_link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_mlom_state Object to be assigned
    def slot_mlom_state=(slot_mlom_state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(slot_mlom_state)
        fail ArgumentError, "invalid value for \"slot_mlom_state\", must be one of #{validator.allowable_values}."
      end
      @slot_mlom_state = slot_mlom_state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_mraid_link_speed Object to be assigned
    def slot_mraid_link_speed=(slot_mraid_link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot_mraid_link_speed)
        fail ArgumentError, "invalid value for \"slot_mraid_link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_mraid_link_speed = slot_mraid_link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_mraid_state Object to be assigned
    def slot_mraid_state=(slot_mraid_state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_mraid_state)
        fail ArgumentError, "invalid value for \"slot_mraid_state\", must be one of #{validator.allowable_values}."
      end
      @slot_mraid_state = slot_mraid_state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n10state Object to be assigned
    def slot_n10state=(slot_n10state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n10state)
        fail ArgumentError, "invalid value for \"slot_n10state\", must be one of #{validator.allowable_values}."
      end
      @slot_n10state = slot_n10state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n11state Object to be assigned
    def slot_n11state=(slot_n11state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n11state)
        fail ArgumentError, "invalid value for \"slot_n11state\", must be one of #{validator.allowable_values}."
      end
      @slot_n11state = slot_n11state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n12state Object to be assigned
    def slot_n12state=(slot_n12state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n12state)
        fail ArgumentError, "invalid value for \"slot_n12state\", must be one of #{validator.allowable_values}."
      end
      @slot_n12state = slot_n12state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n13state Object to be assigned
    def slot_n13state=(slot_n13state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n13state)
        fail ArgumentError, "invalid value for \"slot_n13state\", must be one of #{validator.allowable_values}."
      end
      @slot_n13state = slot_n13state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n14state Object to be assigned
    def slot_n14state=(slot_n14state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n14state)
        fail ArgumentError, "invalid value for \"slot_n14state\", must be one of #{validator.allowable_values}."
      end
      @slot_n14state = slot_n14state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n15state Object to be assigned
    def slot_n15state=(slot_n15state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n15state)
        fail ArgumentError, "invalid value for \"slot_n15state\", must be one of #{validator.allowable_values}."
      end
      @slot_n15state = slot_n15state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n16state Object to be assigned
    def slot_n16state=(slot_n16state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n16state)
        fail ArgumentError, "invalid value for \"slot_n16state\", must be one of #{validator.allowable_values}."
      end
      @slot_n16state = slot_n16state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n17state Object to be assigned
    def slot_n17state=(slot_n17state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n17state)
        fail ArgumentError, "invalid value for \"slot_n17state\", must be one of #{validator.allowable_values}."
      end
      @slot_n17state = slot_n17state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n18state Object to be assigned
    def slot_n18state=(slot_n18state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n18state)
        fail ArgumentError, "invalid value for \"slot_n18state\", must be one of #{validator.allowable_values}."
      end
      @slot_n18state = slot_n18state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n19state Object to be assigned
    def slot_n19state=(slot_n19state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n19state)
        fail ArgumentError, "invalid value for \"slot_n19state\", must be one of #{validator.allowable_values}."
      end
      @slot_n19state = slot_n19state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n1state Object to be assigned
    def slot_n1state=(slot_n1state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(slot_n1state)
        fail ArgumentError, "invalid value for \"slot_n1state\", must be one of #{validator.allowable_values}."
      end
      @slot_n1state = slot_n1state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n20state Object to be assigned
    def slot_n20state=(slot_n20state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n20state)
        fail ArgumentError, "invalid value for \"slot_n20state\", must be one of #{validator.allowable_values}."
      end
      @slot_n20state = slot_n20state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n21state Object to be assigned
    def slot_n21state=(slot_n21state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n21state)
        fail ArgumentError, "invalid value for \"slot_n21state\", must be one of #{validator.allowable_values}."
      end
      @slot_n21state = slot_n21state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n22state Object to be assigned
    def slot_n22state=(slot_n22state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n22state)
        fail ArgumentError, "invalid value for \"slot_n22state\", must be one of #{validator.allowable_values}."
      end
      @slot_n22state = slot_n22state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n23state Object to be assigned
    def slot_n23state=(slot_n23state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n23state)
        fail ArgumentError, "invalid value for \"slot_n23state\", must be one of #{validator.allowable_values}."
      end
      @slot_n23state = slot_n23state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n24state Object to be assigned
    def slot_n24state=(slot_n24state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n24state)
        fail ArgumentError, "invalid value for \"slot_n24state\", must be one of #{validator.allowable_values}."
      end
      @slot_n24state = slot_n24state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n2state Object to be assigned
    def slot_n2state=(slot_n2state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(slot_n2state)
        fail ArgumentError, "invalid value for \"slot_n2state\", must be one of #{validator.allowable_values}."
      end
      @slot_n2state = slot_n2state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n3state Object to be assigned
    def slot_n3state=(slot_n3state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n3state)
        fail ArgumentError, "invalid value for \"slot_n3state\", must be one of #{validator.allowable_values}."
      end
      @slot_n3state = slot_n3state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n4state Object to be assigned
    def slot_n4state=(slot_n4state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n4state)
        fail ArgumentError, "invalid value for \"slot_n4state\", must be one of #{validator.allowable_values}."
      end
      @slot_n4state = slot_n4state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n5state Object to be assigned
    def slot_n5state=(slot_n5state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n5state)
        fail ArgumentError, "invalid value for \"slot_n5state\", must be one of #{validator.allowable_values}."
      end
      @slot_n5state = slot_n5state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n6state Object to be assigned
    def slot_n6state=(slot_n6state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n6state)
        fail ArgumentError, "invalid value for \"slot_n6state\", must be one of #{validator.allowable_values}."
      end
      @slot_n6state = slot_n6state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n7state Object to be assigned
    def slot_n7state=(slot_n7state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n7state)
        fail ArgumentError, "invalid value for \"slot_n7state\", must be one of #{validator.allowable_values}."
      end
      @slot_n7state = slot_n7state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n8state Object to be assigned
    def slot_n8state=(slot_n8state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n8state)
        fail ArgumentError, "invalid value for \"slot_n8state\", must be one of #{validator.allowable_values}."
      end
      @slot_n8state = slot_n8state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_n9state Object to be assigned
    def slot_n9state=(slot_n9state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_n9state)
        fail ArgumentError, "invalid value for \"slot_n9state\", must be one of #{validator.allowable_values}."
      end
      @slot_n9state = slot_n9state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_raid_link_speed Object to be assigned
    def slot_raid_link_speed=(slot_raid_link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(slot_raid_link_speed)
        fail ArgumentError, "invalid value for \"slot_raid_link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_raid_link_speed = slot_raid_link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_raid_state Object to be assigned
    def slot_raid_state=(slot_raid_state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_raid_state)
        fail ArgumentError, "invalid value for \"slot_raid_state\", must be one of #{validator.allowable_values}."
      end
      @slot_raid_state = slot_raid_state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_rear_nvme1link_speed Object to be assigned
    def slot_rear_nvme1link_speed=(slot_rear_nvme1link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot_rear_nvme1link_speed)
        fail ArgumentError, "invalid value for \"slot_rear_nvme1link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_rear_nvme1link_speed = slot_rear_nvme1link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_rear_nvme1state Object to be assigned
    def slot_rear_nvme1state=(slot_rear_nvme1state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_rear_nvme1state)
        fail ArgumentError, "invalid value for \"slot_rear_nvme1state\", must be one of #{validator.allowable_values}."
      end
      @slot_rear_nvme1state = slot_rear_nvme1state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_rear_nvme2link_speed Object to be assigned
    def slot_rear_nvme2link_speed=(slot_rear_nvme2link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot_rear_nvme2link_speed)
        fail ArgumentError, "invalid value for \"slot_rear_nvme2link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_rear_nvme2link_speed = slot_rear_nvme2link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_rear_nvme2state Object to be assigned
    def slot_rear_nvme2state=(slot_rear_nvme2state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_rear_nvme2state)
        fail ArgumentError, "invalid value for \"slot_rear_nvme2state\", must be one of #{validator.allowable_values}."
      end
      @slot_rear_nvme2state = slot_rear_nvme2state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_rear_nvme3link_speed Object to be assigned
    def slot_rear_nvme3link_speed=(slot_rear_nvme3link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot_rear_nvme3link_speed)
        fail ArgumentError, "invalid value for \"slot_rear_nvme3link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_rear_nvme3link_speed = slot_rear_nvme3link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_rear_nvme3state Object to be assigned
    def slot_rear_nvme3state=(slot_rear_nvme3state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_rear_nvme3state)
        fail ArgumentError, "invalid value for \"slot_rear_nvme3state\", must be one of #{validator.allowable_values}."
      end
      @slot_rear_nvme3state = slot_rear_nvme3state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_rear_nvme4link_speed Object to be assigned
    def slot_rear_nvme4link_speed=(slot_rear_nvme4link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3", "GEN4"])
      unless validator.valid?(slot_rear_nvme4link_speed)
        fail ArgumentError, "invalid value for \"slot_rear_nvme4link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_rear_nvme4link_speed = slot_rear_nvme4link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_rear_nvme4state Object to be assigned
    def slot_rear_nvme4state=(slot_rear_nvme4state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_rear_nvme4state)
        fail ArgumentError, "invalid value for \"slot_rear_nvme4state\", must be one of #{validator.allowable_values}."
      end
      @slot_rear_nvme4state = slot_rear_nvme4state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_rear_nvme5state Object to be assigned
    def slot_rear_nvme5state=(slot_rear_nvme5state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_rear_nvme5state)
        fail ArgumentError, "invalid value for \"slot_rear_nvme5state\", must be one of #{validator.allowable_values}."
      end
      @slot_rear_nvme5state = slot_rear_nvme5state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_rear_nvme6state Object to be assigned
    def slot_rear_nvme6state=(slot_rear_nvme6state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_rear_nvme6state)
        fail ArgumentError, "invalid value for \"slot_rear_nvme6state\", must be one of #{validator.allowable_values}."
      end
      @slot_rear_nvme6state = slot_rear_nvme6state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_rear_nvme7state Object to be assigned
    def slot_rear_nvme7state=(slot_rear_nvme7state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_rear_nvme7state)
        fail ArgumentError, "invalid value for \"slot_rear_nvme7state\", must be one of #{validator.allowable_values}."
      end
      @slot_rear_nvme7state = slot_rear_nvme7state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_rear_nvme8state Object to be assigned
    def slot_rear_nvme8state=(slot_rear_nvme8state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(slot_rear_nvme8state)
        fail ArgumentError, "invalid value for \"slot_rear_nvme8state\", must be one of #{validator.allowable_values}."
      end
      @slot_rear_nvme8state = slot_rear_nvme8state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_riser1link_speed Object to be assigned
    def slot_riser1link_speed=(slot_riser1link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(slot_riser1link_speed)
        fail ArgumentError, "invalid value for \"slot_riser1link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_riser1link_speed = slot_riser1link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_riser1slot1link_speed Object to be assigned
    def slot_riser1slot1link_speed=(slot_riser1slot1link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(slot_riser1slot1link_speed)
        fail ArgumentError, "invalid value for \"slot_riser1slot1link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_riser1slot1link_speed = slot_riser1slot1link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_riser1slot2link_speed Object to be assigned
    def slot_riser1slot2link_speed=(slot_riser1slot2link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(slot_riser1slot2link_speed)
        fail ArgumentError, "invalid value for \"slot_riser1slot2link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_riser1slot2link_speed = slot_riser1slot2link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_riser1slot3link_speed Object to be assigned
    def slot_riser1slot3link_speed=(slot_riser1slot3link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(slot_riser1slot3link_speed)
        fail ArgumentError, "invalid value for \"slot_riser1slot3link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_riser1slot3link_speed = slot_riser1slot3link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_riser2link_speed Object to be assigned
    def slot_riser2link_speed=(slot_riser2link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(slot_riser2link_speed)
        fail ArgumentError, "invalid value for \"slot_riser2link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_riser2link_speed = slot_riser2link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_riser2slot4link_speed Object to be assigned
    def slot_riser2slot4link_speed=(slot_riser2slot4link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(slot_riser2slot4link_speed)
        fail ArgumentError, "invalid value for \"slot_riser2slot4link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_riser2slot4link_speed = slot_riser2slot4link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_riser2slot5link_speed Object to be assigned
    def slot_riser2slot5link_speed=(slot_riser2slot5link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(slot_riser2slot5link_speed)
        fail ArgumentError, "invalid value for \"slot_riser2slot5link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_riser2slot5link_speed = slot_riser2slot5link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_riser2slot6link_speed Object to be assigned
    def slot_riser2slot6link_speed=(slot_riser2slot6link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(slot_riser2slot6link_speed)
        fail ArgumentError, "invalid value for \"slot_riser2slot6link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_riser2slot6link_speed = slot_riser2slot6link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_sas_state Object to be assigned
    def slot_sas_state=(slot_sas_state)
      validator = EnumAttributeValidator.new('String', ["platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only"])
      unless validator.valid?(slot_sas_state)
        fail ArgumentError, "invalid value for \"slot_sas_state\", must be one of #{validator.allowable_values}."
      end
      @slot_sas_state = slot_sas_state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_ssd_slot1link_speed Object to be assigned
    def slot_ssd_slot1link_speed=(slot_ssd_slot1link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(slot_ssd_slot1link_speed)
        fail ArgumentError, "invalid value for \"slot_ssd_slot1link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_ssd_slot1link_speed = slot_ssd_slot1link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] slot_ssd_slot2link_speed Object to be assigned
    def slot_ssd_slot2link_speed=(slot_ssd_slot2link_speed)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3"])
      unless validator.valid?(slot_ssd_slot2link_speed)
        fail ArgumentError, "invalid value for \"slot_ssd_slot2link_speed\", must be one of #{validator.allowable_values}."
      end
      @slot_ssd_slot2link_speed = slot_ssd_slot2link_speed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] smee Object to be assigned
    def smee=(smee)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(smee)
        fail ArgumentError, "invalid value for \"smee\", must be one of #{validator.allowable_values}."
      end
      @smee = smee
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] smt_mode Object to be assigned
    def smt_mode=(smt_mode)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "Off"])
      unless validator.valid?(smt_mode)
        fail ArgumentError, "invalid value for \"smt_mode\", must be one of #{validator.allowable_values}."
      end
      @smt_mode = smt_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] snc Object to be assigned
    def snc=(snc)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      unless validator.valid?(snc)
        fail ArgumentError, "invalid value for \"snc\", must be one of #{validator.allowable_values}."
      end
      @snc = snc
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] snoopy_mode_for2lm Object to be assigned
    def snoopy_mode_for2lm=(snoopy_mode_for2lm)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(snoopy_mode_for2lm)
        fail ArgumentError, "invalid value for \"snoopy_mode_for2lm\", must be one of #{validator.allowable_values}."
      end
      @snoopy_mode_for2lm = snoopy_mode_for2lm
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] snoopy_mode_for_ad Object to be assigned
    def snoopy_mode_for_ad=(snoopy_mode_for_ad)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(snoopy_mode_for_ad)
        fail ArgumentError, "invalid value for \"snoopy_mode_for_ad\", must be one of #{validator.allowable_values}."
      end
      @snoopy_mode_for_ad = snoopy_mode_for_ad
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sparing_mode Object to be assigned
    def sparing_mode=(sparing_mode)
      validator = EnumAttributeValidator.new('String', ["platform-default", "dimm-sparing", "rank-sparing"])
      unless validator.valid?(sparing_mode)
        fail ArgumentError, "invalid value for \"sparing_mode\", must be one of #{validator.allowable_values}."
      end
      @sparing_mode = sparing_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sr_iov Object to be assigned
    def sr_iov=(sr_iov)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(sr_iov)
        fail ArgumentError, "invalid value for \"sr_iov\", must be one of #{validator.allowable_values}."
      end
      @sr_iov = sr_iov
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] streamer_prefetch Object to be assigned
    def streamer_prefetch=(streamer_prefetch)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(streamer_prefetch)
        fail ArgumentError, "invalid value for \"streamer_prefetch\", must be one of #{validator.allowable_values}."
      end
      @streamer_prefetch = streamer_prefetch
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] svm_mode Object to be assigned
    def svm_mode=(svm_mode)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(svm_mode)
        fail ArgumentError, "invalid value for \"svm_mode\", must be one of #{validator.allowable_values}."
      end
      @svm_mode = svm_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] terminal_type Object to be assigned
    def terminal_type=(terminal_type)
      validator = EnumAttributeValidator.new('String', ["platform-default", "pc-ansi", "vt100", "vt100-plus", "vt-utf8"])
      unless validator.valid?(terminal_type)
        fail ArgumentError, "invalid value for \"terminal_type\", must be one of #{validator.allowable_values}."
      end
      @terminal_type = terminal_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tpm_control Object to be assigned
    def tpm_control=(tpm_control)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(tpm_control)
        fail ArgumentError, "invalid value for \"tpm_control\", must be one of #{validator.allowable_values}."
      end
      @tpm_control = tpm_control
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tpm_pending_operation Object to be assigned
    def tpm_pending_operation=(tpm_pending_operation)
      validator = EnumAttributeValidator.new('String', ["platform-default", "None", "TpmClear"])
      unless validator.valid?(tpm_pending_operation)
        fail ArgumentError, "invalid value for \"tpm_pending_operation\", must be one of #{validator.allowable_values}."
      end
      @tpm_pending_operation = tpm_pending_operation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tpm_support Object to be assigned
    def tpm_support=(tpm_support)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(tpm_support)
        fail ArgumentError, "invalid value for \"tpm_support\", must be one of #{validator.allowable_values}."
      end
      @tpm_support = tpm_support
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tsme Object to be assigned
    def tsme=(tsme)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      unless validator.valid?(tsme)
        fail ArgumentError, "invalid value for \"tsme\", must be one of #{validator.allowable_values}."
      end
      @tsme = tsme
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] txt_support Object to be assigned
    def txt_support=(txt_support)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(txt_support)
        fail ArgumentError, "invalid value for \"txt_support\", must be one of #{validator.allowable_values}."
      end
      @txt_support = txt_support
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ucsm_boot_order_rule Object to be assigned
    def ucsm_boot_order_rule=(ucsm_boot_order_rule)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Loose", "Strict"])
      unless validator.valid?(ucsm_boot_order_rule)
        fail ArgumentError, "invalid value for \"ucsm_boot_order_rule\", must be one of #{validator.allowable_values}."
      end
      @ucsm_boot_order_rule = ucsm_boot_order_rule
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ufs_disable Object to be assigned
    def ufs_disable=(ufs_disable)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(ufs_disable)
        fail ArgumentError, "invalid value for \"ufs_disable\", must be one of #{validator.allowable_values}."
      end
      @ufs_disable = ufs_disable
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] uma_based_clustering Object to be assigned
    def uma_based_clustering=(uma_based_clustering)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Disable (All2All)", "Hemisphere (2-clusters)"])
      unless validator.valid?(uma_based_clustering)
        fail ArgumentError, "invalid value for \"uma_based_clustering\", must be one of #{validator.allowable_values}."
      end
      @uma_based_clustering = uma_based_clustering
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] upi_link_enablement Object to be assigned
    def upi_link_enablement=(upi_link_enablement)
      validator = EnumAttributeValidator.new('String', ["platform-default", "1", "2", "Auto"])
      unless validator.valid?(upi_link_enablement)
        fail ArgumentError, "invalid value for \"upi_link_enablement\", must be one of #{validator.allowable_values}."
      end
      @upi_link_enablement = upi_link_enablement
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] upi_power_management Object to be assigned
    def upi_power_management=(upi_power_management)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(upi_power_management)
        fail ArgumentError, "invalid value for \"upi_power_management\", must be one of #{validator.allowable_values}."
      end
      @upi_power_management = upi_power_management
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usb_emul6064 Object to be assigned
    def usb_emul6064=(usb_emul6064)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(usb_emul6064)
        fail ArgumentError, "invalid value for \"usb_emul6064\", must be one of #{validator.allowable_values}."
      end
      @usb_emul6064 = usb_emul6064
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usb_port_front Object to be assigned
    def usb_port_front=(usb_port_front)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(usb_port_front)
        fail ArgumentError, "invalid value for \"usb_port_front\", must be one of #{validator.allowable_values}."
      end
      @usb_port_front = usb_port_front
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usb_port_internal Object to be assigned
    def usb_port_internal=(usb_port_internal)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(usb_port_internal)
        fail ArgumentError, "invalid value for \"usb_port_internal\", must be one of #{validator.allowable_values}."
      end
      @usb_port_internal = usb_port_internal
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usb_port_kvm Object to be assigned
    def usb_port_kvm=(usb_port_kvm)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(usb_port_kvm)
        fail ArgumentError, "invalid value for \"usb_port_kvm\", must be one of #{validator.allowable_values}."
      end
      @usb_port_kvm = usb_port_kvm
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usb_port_rear Object to be assigned
    def usb_port_rear=(usb_port_rear)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(usb_port_rear)
        fail ArgumentError, "invalid value for \"usb_port_rear\", must be one of #{validator.allowable_values}."
      end
      @usb_port_rear = usb_port_rear
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usb_port_sd_card Object to be assigned
    def usb_port_sd_card=(usb_port_sd_card)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(usb_port_sd_card)
        fail ArgumentError, "invalid value for \"usb_port_sd_card\", must be one of #{validator.allowable_values}."
      end
      @usb_port_sd_card = usb_port_sd_card
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usb_port_vmedia Object to be assigned
    def usb_port_vmedia=(usb_port_vmedia)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(usb_port_vmedia)
        fail ArgumentError, "invalid value for \"usb_port_vmedia\", must be one of #{validator.allowable_values}."
      end
      @usb_port_vmedia = usb_port_vmedia
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usb_xhci_support Object to be assigned
    def usb_xhci_support=(usb_xhci_support)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(usb_xhci_support)
        fail ArgumentError, "invalid value for \"usb_xhci_support\", must be one of #{validator.allowable_values}."
      end
      @usb_xhci_support = usb_xhci_support
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] vga_priority Object to be assigned
    def vga_priority=(vga_priority)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Offboard", "Onboard", "Onboard VGA Disabled"])
      unless validator.valid?(vga_priority)
        fail ArgumentError, "invalid value for \"vga_priority\", must be one of #{validator.allowable_values}."
      end
      @vga_priority = vga_priority
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] virtual_numa Object to be assigned
    def virtual_numa=(virtual_numa)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(virtual_numa)
        fail ArgumentError, "invalid value for \"virtual_numa\", must be one of #{validator.allowable_values}."
      end
      @virtual_numa = virtual_numa
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] vmd_enable Object to be assigned
    def vmd_enable=(vmd_enable)
      validator = EnumAttributeValidator.new('String', ["platform-default", "enabled", "disabled"])
      unless validator.valid?(vmd_enable)
        fail ArgumentError, "invalid value for \"vmd_enable\", must be one of #{validator.allowable_values}."
      end
      @vmd_enable = vmd_enable
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] vol_memory_mode Object to be assigned
    def vol_memory_mode=(vol_memory_mode)
      validator = EnumAttributeValidator.new('String', ["platform-default", "1LM", "2LM"])
      unless validator.valid?(vol_memory_mode)
        fail ArgumentError, "invalid value for \"vol_memory_mode\", must be one of #{validator.allowable_values}."
      end
      @vol_memory_mode = vol_memory_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] work_load_config Object to be assigned
    def work_load_config=(work_load_config)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Balanced", "I/O Sensitive", "NUMA", "UMA"])
      unless validator.valid?(work_load_config)
        fail ArgumentError, "invalid value for \"work_load_config\", must be one of #{validator.allowable_values}."
      end
      @work_load_config = work_load_config
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] xpt_prefetch Object to be assigned
    def xpt_prefetch=(xpt_prefetch)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      unless validator.valid?(xpt_prefetch)
        fail ArgumentError, "invalid value for \"xpt_prefetch\", must be one of #{validator.allowable_values}."
      end
      @xpt_prefetch = xpt_prefetch
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] xpt_remote_prefetch Object to be assigned
    def xpt_remote_prefetch=(xpt_remote_prefetch)
      validator = EnumAttributeValidator.new('String', ["platform-default", "Auto", "disabled", "enabled"])
      unless validator.valid?(xpt_remote_prefetch)
        fail ArgumentError, "invalid value for \"xpt_remote_prefetch\", must be one of #{validator.allowable_values}."
      end
      @xpt_remote_prefetch = xpt_remote_prefetch
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          class_id == o.class_id &&
          object_type == o.object_type &&
          acs_control_gpu1state == o.acs_control_gpu1state &&
          acs_control_gpu2state == o.acs_control_gpu2state &&
          acs_control_gpu3state == o.acs_control_gpu3state &&
          acs_control_gpu4state == o.acs_control_gpu4state &&
          acs_control_gpu5state == o.acs_control_gpu5state &&
          acs_control_gpu6state == o.acs_control_gpu6state &&
          acs_control_gpu7state == o.acs_control_gpu7state &&
          acs_control_gpu8state == o.acs_control_gpu8state &&
          acs_control_slot11state == o.acs_control_slot11state &&
          acs_control_slot12state == o.acs_control_slot12state &&
          acs_control_slot13state == o.acs_control_slot13state &&
          acs_control_slot14state == o.acs_control_slot14state &&
          adjacent_cache_line_prefetch == o.adjacent_cache_line_prefetch &&
          advanced_mem_test == o.advanced_mem_test &&
          all_usb_devices == o.all_usb_devices &&
          altitude == o.altitude &&
          aspm_support == o.aspm_support &&
          assert_nmi_on_perr == o.assert_nmi_on_perr &&
          assert_nmi_on_serr == o.assert_nmi_on_serr &&
          auto_cc_state == o.auto_cc_state &&
          autonumous_cstate_enable == o.autonumous_cstate_enable &&
          baud_rate == o.baud_rate &&
          bme_dma_mitigation == o.bme_dma_mitigation &&
          boot_option_num_retry == o.boot_option_num_retry &&
          boot_option_re_cool_down == o.boot_option_re_cool_down &&
          boot_option_retry == o.boot_option_retry &&
          boot_performance_mode == o.boot_performance_mode &&
          burst_and_postponed_refresh == o.burst_and_postponed_refresh &&
          c1auto_demotion == o.c1auto_demotion &&
          c1auto_un_demotion == o.c1auto_un_demotion &&
          cbs_cmn_apbdis == o.cbs_cmn_apbdis &&
          cbs_cmn_cpu_cpb == o.cbs_cmn_cpu_cpb &&
          cbs_cmn_cpu_gen_downcore_ctrl == o.cbs_cmn_cpu_gen_downcore_ctrl &&
          cbs_cmn_cpu_global_cstate_ctrl == o.cbs_cmn_cpu_global_cstate_ctrl &&
          cbs_cmn_cpu_l1stream_hw_prefetcher == o.cbs_cmn_cpu_l1stream_hw_prefetcher &&
          cbs_cmn_cpu_l2stream_hw_prefetcher == o.cbs_cmn_cpu_l2stream_hw_prefetcher &&
          cbs_cmn_cpu_smee == o.cbs_cmn_cpu_smee &&
          cbs_cmn_cpu_streaming_stores_ctrl == o.cbs_cmn_cpu_streaming_stores_ctrl &&
          cbs_cmn_determinism_slider == o.cbs_cmn_determinism_slider &&
          cbs_cmn_efficiency_mode_en == o.cbs_cmn_efficiency_mode_en &&
          cbs_cmn_fixed_soc_pstate == o.cbs_cmn_fixed_soc_pstate &&
          cbs_cmn_gnb_nb_iommu == o.cbs_cmn_gnb_nb_iommu &&
          cbs_cmn_gnb_smu_df_cstates == o.cbs_cmn_gnb_smu_df_cstates &&
          cbs_cmn_gnb_smucppc == o.cbs_cmn_gnb_smucppc &&
          cbs_cmn_mem_ctrl_bank_group_swap_ddr4 == o.cbs_cmn_mem_ctrl_bank_group_swap_ddr4 &&
          cbs_cmn_mem_map_bank_interleave_ddr4 == o.cbs_cmn_mem_map_bank_interleave_ddr4 &&
          cbs_cmnc_tdp_ctl == o.cbs_cmnc_tdp_ctl &&
          cbs_cpu_ccd_ctrl_ssp == o.cbs_cpu_ccd_ctrl_ssp &&
          cbs_cpu_core_ctrl == o.cbs_cpu_core_ctrl &&
          cbs_cpu_smt_ctrl == o.cbs_cpu_smt_ctrl &&
          cbs_dbg_cpu_snp_mem_cover == o.cbs_dbg_cpu_snp_mem_cover &&
          cbs_dbg_cpu_snp_mem_size_cover == o.cbs_dbg_cpu_snp_mem_size_cover &&
          cbs_df_cmn_acpi_srat_l3numa == o.cbs_df_cmn_acpi_srat_l3numa &&
          cbs_df_cmn_dram_nps == o.cbs_df_cmn_dram_nps &&
          cbs_df_cmn_mem_intlv == o.cbs_df_cmn_mem_intlv &&
          cbs_df_cmn_mem_intlv_size == o.cbs_df_cmn_mem_intlv_size &&
          cbs_sev_snp_support == o.cbs_sev_snp_support &&
          cdn_enable == o.cdn_enable &&
          cdn_support == o.cdn_support &&
          channel_inter_leave == o.channel_inter_leave &&
          cisco_adaptive_mem_training == o.cisco_adaptive_mem_training &&
          cisco_debug_level == o.cisco_debug_level &&
          cisco_oprom_launch_optimization == o.cisco_oprom_launch_optimization &&
          cisco_xgmi_max_speed == o.cisco_xgmi_max_speed &&
          cke_low_policy == o.cke_low_policy &&
          closed_loop_therm_throtl == o.closed_loop_therm_throtl &&
          cmci_enable == o.cmci_enable &&
          config_tdp == o.config_tdp &&
          config_tdp_level == o.config_tdp_level &&
          console_redirection == o.console_redirection &&
          core_multi_processing == o.core_multi_processing &&
          cpu_energy_performance == o.cpu_energy_performance &&
          cpu_frequency_floor == o.cpu_frequency_floor &&
          cpu_perf_enhancement == o.cpu_perf_enhancement &&
          cpu_performance == o.cpu_performance &&
          cpu_power_management == o.cpu_power_management &&
          cr_qos == o.cr_qos &&
          crfastgo_config == o.crfastgo_config &&
          dcpmm_firmware_downgrade == o.dcpmm_firmware_downgrade &&
          demand_scrub == o.demand_scrub &&
          direct_cache_access == o.direct_cache_access &&
          dram_clock_throttling == o.dram_clock_throttling &&
          dram_refresh_rate == o.dram_refresh_rate &&
          dram_sw_thermal_throttling == o.dram_sw_thermal_throttling &&
          eadr_support == o.eadr_support &&
          edpc_en == o.edpc_en &&
          enable_clock_spread_spec == o.enable_clock_spread_spec &&
          enable_mktme == o.enable_mktme &&
          enable_sgx == o.enable_sgx &&
          enable_tme == o.enable_tme &&
          energy_efficient_turbo == o.energy_efficient_turbo &&
          eng_perf_tuning == o.eng_perf_tuning &&
          enhanced_intel_speed_step_tech == o.enhanced_intel_speed_step_tech &&
          epoch_update == o.epoch_update &&
          epp_enable == o.epp_enable &&
          epp_profile == o.epp_profile &&
          execute_disable_bit == o.execute_disable_bit &&
          extended_apic == o.extended_apic &&
          flow_control == o.flow_control &&
          frb2enable == o.frb2enable &&
          hardware_prefetch == o.hardware_prefetch &&
          hwpm_enable == o.hwpm_enable &&
          imc_interleave == o.imc_interleave &&
          intel_dynamic_speed_select == o.intel_dynamic_speed_select &&
          intel_hyper_threading_tech == o.intel_hyper_threading_tech &&
          intel_speed_select == o.intel_speed_select &&
          intel_turbo_boost_tech == o.intel_turbo_boost_tech &&
          intel_virtualization_technology == o.intel_virtualization_technology &&
          intel_vt_for_directed_io == o.intel_vt_for_directed_io &&
          intel_vtd_coherency_support == o.intel_vtd_coherency_support &&
          intel_vtd_interrupt_remapping == o.intel_vtd_interrupt_remapping &&
          intel_vtd_pass_through_dma_support == o.intel_vtd_pass_through_dma_support &&
          intel_vtdats_support == o.intel_vtdats_support &&
          ioh_error_enable == o.ioh_error_enable &&
          ioh_resource == o.ioh_resource &&
          ip_prefetch == o.ip_prefetch &&
          ipv4http == o.ipv4http &&
          ipv4pxe == o.ipv4pxe &&
          ipv6http == o.ipv6http &&
          ipv6pxe == o.ipv6pxe &&
          kti_prefetch == o.kti_prefetch &&
          legacy_os_redirection == o.legacy_os_redirection &&
          legacy_usb_support == o.legacy_usb_support &&
          llc_alloc == o.llc_alloc &&
          llc_prefetch == o.llc_prefetch &&
          lom_port0state == o.lom_port0state &&
          lom_port1state == o.lom_port1state &&
          lom_port2state == o.lom_port2state &&
          lom_port3state == o.lom_port3state &&
          lom_ports_all_state == o.lom_ports_all_state &&
          lv_ddr_mode == o.lv_ddr_mode &&
          make_device_non_bootable == o.make_device_non_bootable &&
          memory_bandwidth_boost == o.memory_bandwidth_boost &&
          memory_inter_leave == o.memory_inter_leave &&
          memory_mapped_io_above4gb == o.memory_mapped_io_above4gb &&
          memory_refresh_rate == o.memory_refresh_rate &&
          memory_size_limit == o.memory_size_limit &&
          memory_thermal_throttling == o.memory_thermal_throttling &&
          mirroring_mode == o.mirroring_mode &&
          mmcfg_base == o.mmcfg_base &&
          network_stack == o.network_stack &&
          numa_optimized == o.numa_optimized &&
          nvmdimm_perform_config == o.nvmdimm_perform_config &&
          onboard10gbit_lom == o.onboard10gbit_lom &&
          onboard_gbit_lom == o.onboard_gbit_lom &&
          onboard_scu_storage_support == o.onboard_scu_storage_support &&
          onboard_scu_storage_sw_stack == o.onboard_scu_storage_sw_stack &&
          operation_mode == o.operation_mode &&
          os_boot_watchdog_timer == o.os_boot_watchdog_timer &&
          os_boot_watchdog_timer_policy == o.os_boot_watchdog_timer_policy &&
          os_boot_watchdog_timer_timeout == o.os_boot_watchdog_timer_timeout &&
          out_of_band_mgmt_port == o.out_of_band_mgmt_port &&
          package_cstate_limit == o.package_cstate_limit &&
          panic_high_watermark == o.panic_high_watermark &&
          partial_cache_line_sparing == o.partial_cache_line_sparing &&
          partial_mirror_mode_config == o.partial_mirror_mode_config &&
          partial_mirror_percent == o.partial_mirror_percent &&
          partial_mirror_value1 == o.partial_mirror_value1 &&
          partial_mirror_value2 == o.partial_mirror_value2 &&
          partial_mirror_value3 == o.partial_mirror_value3 &&
          partial_mirror_value4 == o.partial_mirror_value4 &&
          patrol_scrub == o.patrol_scrub &&
          patrol_scrub_duration == o.patrol_scrub_duration &&
          pc_ie_ras_support == o.pc_ie_ras_support &&
          pc_ie_ssd_hot_plug_support == o.pc_ie_ssd_hot_plug_support &&
          pch_usb30mode == o.pch_usb30mode &&
          pci_option_ro_ms == o.pci_option_ro_ms &&
          pci_rom_clp == o.pci_rom_clp &&
          pcie_ari_support == o.pcie_ari_support &&
          pcie_pll_ssc == o.pcie_pll_ssc &&
          pcie_slot_mraid1link_speed == o.pcie_slot_mraid1link_speed &&
          pcie_slot_mraid1option_rom == o.pcie_slot_mraid1option_rom &&
          pcie_slot_mraid2link_speed == o.pcie_slot_mraid2link_speed &&
          pcie_slot_mraid2option_rom == o.pcie_slot_mraid2option_rom &&
          pcie_slot_mstorraid_link_speed == o.pcie_slot_mstorraid_link_speed &&
          pcie_slot_mstorraid_option_rom == o.pcie_slot_mstorraid_option_rom &&
          pcie_slot_nvme1link_speed == o.pcie_slot_nvme1link_speed &&
          pcie_slot_nvme1option_rom == o.pcie_slot_nvme1option_rom &&
          pcie_slot_nvme2link_speed == o.pcie_slot_nvme2link_speed &&
          pcie_slot_nvme2option_rom == o.pcie_slot_nvme2option_rom &&
          pcie_slot_nvme3link_speed == o.pcie_slot_nvme3link_speed &&
          pcie_slot_nvme3option_rom == o.pcie_slot_nvme3option_rom &&
          pcie_slot_nvme4link_speed == o.pcie_slot_nvme4link_speed &&
          pcie_slot_nvme4option_rom == o.pcie_slot_nvme4option_rom &&
          pcie_slot_nvme5link_speed == o.pcie_slot_nvme5link_speed &&
          pcie_slot_nvme5option_rom == o.pcie_slot_nvme5option_rom &&
          pcie_slot_nvme6link_speed == o.pcie_slot_nvme6link_speed &&
          pcie_slot_nvme6option_rom == o.pcie_slot_nvme6option_rom &&
          pcie_slots_cdn_enable == o.pcie_slots_cdn_enable &&
          pop_support == o.pop_support &&
          post_error_pause == o.post_error_pause &&
          post_package_repair == o.post_package_repair &&
          processor_c1e == o.processor_c1e &&
          processor_c3report == o.processor_c3report &&
          processor_c6report == o.processor_c6report &&
          processor_cstate == o.processor_cstate &&
          psata == o.psata &&
          pstate_coord_type == o.pstate_coord_type &&
          putty_key_pad == o.putty_key_pad &&
          pwr_perf_tuning == o.pwr_perf_tuning &&
          qpi_link_frequency == o.qpi_link_frequency &&
          qpi_link_speed == o.qpi_link_speed &&
          qpi_snoop_mode == o.qpi_snoop_mode &&
          rank_inter_leave == o.rank_inter_leave &&
          redirection_after_post == o.redirection_after_post &&
          sata_mode_select == o.sata_mode_select &&
          select_memory_ras_configuration == o.select_memory_ras_configuration &&
          select_ppr_type == o.select_ppr_type &&
          serial_port_aenable == o.serial_port_aenable &&
          sev == o.sev &&
          sgx_auto_registration_agent == o.sgx_auto_registration_agent &&
          sgx_epoch0 == o.sgx_epoch0 &&
          sgx_epoch1 == o.sgx_epoch1 &&
          sgx_factory_reset == o.sgx_factory_reset &&
          sgx_le_pub_key_hash0 == o.sgx_le_pub_key_hash0 &&
          sgx_le_pub_key_hash1 == o.sgx_le_pub_key_hash1 &&
          sgx_le_pub_key_hash2 == o.sgx_le_pub_key_hash2 &&
          sgx_le_pub_key_hash3 == o.sgx_le_pub_key_hash3 &&
          sgx_le_wr == o.sgx_le_wr &&
          sgx_package_info_in_band_access == o.sgx_package_info_in_band_access &&
          sgx_qos == o.sgx_qos &&
          sha1pcr_bank == o.sha1pcr_bank &&
          sha256pcr_bank == o.sha256pcr_bank &&
          single_pctl_enable == o.single_pctl_enable &&
          slot10link_speed == o.slot10link_speed &&
          slot10state == o.slot10state &&
          slot11link_speed == o.slot11link_speed &&
          slot11state == o.slot11state &&
          slot12link_speed == o.slot12link_speed &&
          slot12state == o.slot12state &&
          slot13state == o.slot13state &&
          slot14state == o.slot14state &&
          slot1link_speed == o.slot1link_speed &&
          slot1state == o.slot1state &&
          slot2link_speed == o.slot2link_speed &&
          slot2state == o.slot2state &&
          slot3link_speed == o.slot3link_speed &&
          slot3state == o.slot3state &&
          slot4link_speed == o.slot4link_speed &&
          slot4state == o.slot4state &&
          slot5link_speed == o.slot5link_speed &&
          slot5state == o.slot5state &&
          slot6link_speed == o.slot6link_speed &&
          slot6state == o.slot6state &&
          slot7link_speed == o.slot7link_speed &&
          slot7state == o.slot7state &&
          slot8link_speed == o.slot8link_speed &&
          slot8state == o.slot8state &&
          slot9link_speed == o.slot9link_speed &&
          slot9state == o.slot9state &&
          slot_flom_link_speed == o.slot_flom_link_speed &&
          slot_front_nvme10link_speed == o.slot_front_nvme10link_speed &&
          slot_front_nvme10option_rom == o.slot_front_nvme10option_rom &&
          slot_front_nvme11link_speed == o.slot_front_nvme11link_speed &&
          slot_front_nvme11option_rom == o.slot_front_nvme11option_rom &&
          slot_front_nvme12link_speed == o.slot_front_nvme12link_speed &&
          slot_front_nvme12option_rom == o.slot_front_nvme12option_rom &&
          slot_front_nvme13option_rom == o.slot_front_nvme13option_rom &&
          slot_front_nvme14option_rom == o.slot_front_nvme14option_rom &&
          slot_front_nvme15option_rom == o.slot_front_nvme15option_rom &&
          slot_front_nvme16option_rom == o.slot_front_nvme16option_rom &&
          slot_front_nvme17option_rom == o.slot_front_nvme17option_rom &&
          slot_front_nvme18option_rom == o.slot_front_nvme18option_rom &&
          slot_front_nvme19option_rom == o.slot_front_nvme19option_rom &&
          slot_front_nvme1link_speed == o.slot_front_nvme1link_speed &&
          slot_front_nvme1option_rom == o.slot_front_nvme1option_rom &&
          slot_front_nvme20option_rom == o.slot_front_nvme20option_rom &&
          slot_front_nvme21option_rom == o.slot_front_nvme21option_rom &&
          slot_front_nvme22option_rom == o.slot_front_nvme22option_rom &&
          slot_front_nvme23option_rom == o.slot_front_nvme23option_rom &&
          slot_front_nvme24option_rom == o.slot_front_nvme24option_rom &&
          slot_front_nvme2link_speed == o.slot_front_nvme2link_speed &&
          slot_front_nvme2option_rom == o.slot_front_nvme2option_rom &&
          slot_front_nvme3link_speed == o.slot_front_nvme3link_speed &&
          slot_front_nvme3option_rom == o.slot_front_nvme3option_rom &&
          slot_front_nvme4link_speed == o.slot_front_nvme4link_speed &&
          slot_front_nvme4option_rom == o.slot_front_nvme4option_rom &&
          slot_front_nvme5link_speed == o.slot_front_nvme5link_speed &&
          slot_front_nvme5option_rom == o.slot_front_nvme5option_rom &&
          slot_front_nvme6link_speed == o.slot_front_nvme6link_speed &&
          slot_front_nvme6option_rom == o.slot_front_nvme6option_rom &&
          slot_front_nvme7link_speed == o.slot_front_nvme7link_speed &&
          slot_front_nvme7option_rom == o.slot_front_nvme7option_rom &&
          slot_front_nvme8link_speed == o.slot_front_nvme8link_speed &&
          slot_front_nvme8option_rom == o.slot_front_nvme8option_rom &&
          slot_front_nvme9link_speed == o.slot_front_nvme9link_speed &&
          slot_front_nvme9option_rom == o.slot_front_nvme9option_rom &&
          slot_front_slot5link_speed == o.slot_front_slot5link_speed &&
          slot_front_slot6link_speed == o.slot_front_slot6link_speed &&
          slot_gpu1state == o.slot_gpu1state &&
          slot_gpu2state == o.slot_gpu2state &&
          slot_gpu3state == o.slot_gpu3state &&
          slot_gpu4state == o.slot_gpu4state &&
          slot_gpu5state == o.slot_gpu5state &&
          slot_gpu6state == o.slot_gpu6state &&
          slot_gpu7state == o.slot_gpu7state &&
          slot_gpu8state == o.slot_gpu8state &&
          slot_hba_link_speed == o.slot_hba_link_speed &&
          slot_hba_state == o.slot_hba_state &&
          slot_lom1link == o.slot_lom1link &&
          slot_lom2link == o.slot_lom2link &&
          slot_mezz_state == o.slot_mezz_state &&
          slot_mlom_link_speed == o.slot_mlom_link_speed &&
          slot_mlom_state == o.slot_mlom_state &&
          slot_mraid_link_speed == o.slot_mraid_link_speed &&
          slot_mraid_state == o.slot_mraid_state &&
          slot_n10state == o.slot_n10state &&
          slot_n11state == o.slot_n11state &&
          slot_n12state == o.slot_n12state &&
          slot_n13state == o.slot_n13state &&
          slot_n14state == o.slot_n14state &&
          slot_n15state == o.slot_n15state &&
          slot_n16state == o.slot_n16state &&
          slot_n17state == o.slot_n17state &&
          slot_n18state == o.slot_n18state &&
          slot_n19state == o.slot_n19state &&
          slot_n1state == o.slot_n1state &&
          slot_n20state == o.slot_n20state &&
          slot_n21state == o.slot_n21state &&
          slot_n22state == o.slot_n22state &&
          slot_n23state == o.slot_n23state &&
          slot_n24state == o.slot_n24state &&
          slot_n2state == o.slot_n2state &&
          slot_n3state == o.slot_n3state &&
          slot_n4state == o.slot_n4state &&
          slot_n5state == o.slot_n5state &&
          slot_n6state == o.slot_n6state &&
          slot_n7state == o.slot_n7state &&
          slot_n8state == o.slot_n8state &&
          slot_n9state == o.slot_n9state &&
          slot_raid_link_speed == o.slot_raid_link_speed &&
          slot_raid_state == o.slot_raid_state &&
          slot_rear_nvme1link_speed == o.slot_rear_nvme1link_speed &&
          slot_rear_nvme1state == o.slot_rear_nvme1state &&
          slot_rear_nvme2link_speed == o.slot_rear_nvme2link_speed &&
          slot_rear_nvme2state == o.slot_rear_nvme2state &&
          slot_rear_nvme3link_speed == o.slot_rear_nvme3link_speed &&
          slot_rear_nvme3state == o.slot_rear_nvme3state &&
          slot_rear_nvme4link_speed == o.slot_rear_nvme4link_speed &&
          slot_rear_nvme4state == o.slot_rear_nvme4state &&
          slot_rear_nvme5state == o.slot_rear_nvme5state &&
          slot_rear_nvme6state == o.slot_rear_nvme6state &&
          slot_rear_nvme7state == o.slot_rear_nvme7state &&
          slot_rear_nvme8state == o.slot_rear_nvme8state &&
          slot_riser1link_speed == o.slot_riser1link_speed &&
          slot_riser1slot1link_speed == o.slot_riser1slot1link_speed &&
          slot_riser1slot2link_speed == o.slot_riser1slot2link_speed &&
          slot_riser1slot3link_speed == o.slot_riser1slot3link_speed &&
          slot_riser2link_speed == o.slot_riser2link_speed &&
          slot_riser2slot4link_speed == o.slot_riser2slot4link_speed &&
          slot_riser2slot5link_speed == o.slot_riser2slot5link_speed &&
          slot_riser2slot6link_speed == o.slot_riser2slot6link_speed &&
          slot_sas_state == o.slot_sas_state &&
          slot_ssd_slot1link_speed == o.slot_ssd_slot1link_speed &&
          slot_ssd_slot2link_speed == o.slot_ssd_slot2link_speed &&
          smee == o.smee &&
          smt_mode == o.smt_mode &&
          snc == o.snc &&
          snoopy_mode_for2lm == o.snoopy_mode_for2lm &&
          snoopy_mode_for_ad == o.snoopy_mode_for_ad &&
          sparing_mode == o.sparing_mode &&
          sr_iov == o.sr_iov &&
          streamer_prefetch == o.streamer_prefetch &&
          svm_mode == o.svm_mode &&
          terminal_type == o.terminal_type &&
          tpm_control == o.tpm_control &&
          tpm_pending_operation == o.tpm_pending_operation &&
          tpm_support == o.tpm_support &&
          tsme == o.tsme &&
          txt_support == o.txt_support &&
          ucsm_boot_order_rule == o.ucsm_boot_order_rule &&
          ufs_disable == o.ufs_disable &&
          uma_based_clustering == o.uma_based_clustering &&
          upi_link_enablement == o.upi_link_enablement &&
          upi_power_management == o.upi_power_management &&
          usb_emul6064 == o.usb_emul6064 &&
          usb_port_front == o.usb_port_front &&
          usb_port_internal == o.usb_port_internal &&
          usb_port_kvm == o.usb_port_kvm &&
          usb_port_rear == o.usb_port_rear &&
          usb_port_sd_card == o.usb_port_sd_card &&
          usb_port_vmedia == o.usb_port_vmedia &&
          usb_xhci_support == o.usb_xhci_support &&
          vga_priority == o.vga_priority &&
          virtual_numa == o.virtual_numa &&
          vmd_enable == o.vmd_enable &&
          vol_memory_mode == o.vol_memory_mode &&
          work_load_config == o.work_load_config &&
          xpt_prefetch == o.xpt_prefetch &&
          xpt_remote_prefetch == o.xpt_remote_prefetch &&
          organization == o.organization &&
          profiles == o.profiles && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [class_id, object_type, acs_control_gpu1state, acs_control_gpu2state, acs_control_gpu3state, acs_control_gpu4state, acs_control_gpu5state, acs_control_gpu6state, acs_control_gpu7state, acs_control_gpu8state, acs_control_slot11state, acs_control_slot12state, acs_control_slot13state, acs_control_slot14state, adjacent_cache_line_prefetch, advanced_mem_test, all_usb_devices, altitude, aspm_support, assert_nmi_on_perr, assert_nmi_on_serr, auto_cc_state, autonumous_cstate_enable, baud_rate, bme_dma_mitigation, boot_option_num_retry, boot_option_re_cool_down, boot_option_retry, boot_performance_mode, burst_and_postponed_refresh, c1auto_demotion, c1auto_un_demotion, cbs_cmn_apbdis, cbs_cmn_cpu_cpb, cbs_cmn_cpu_gen_downcore_ctrl, cbs_cmn_cpu_global_cstate_ctrl, cbs_cmn_cpu_l1stream_hw_prefetcher, cbs_cmn_cpu_l2stream_hw_prefetcher, cbs_cmn_cpu_smee, cbs_cmn_cpu_streaming_stores_ctrl, cbs_cmn_determinism_slider, cbs_cmn_efficiency_mode_en, cbs_cmn_fixed_soc_pstate, cbs_cmn_gnb_nb_iommu, cbs_cmn_gnb_smu_df_cstates, cbs_cmn_gnb_smucppc, cbs_cmn_mem_ctrl_bank_group_swap_ddr4, cbs_cmn_mem_map_bank_interleave_ddr4, cbs_cmnc_tdp_ctl, cbs_cpu_ccd_ctrl_ssp, cbs_cpu_core_ctrl, cbs_cpu_smt_ctrl, cbs_dbg_cpu_snp_mem_cover, cbs_dbg_cpu_snp_mem_size_cover, cbs_df_cmn_acpi_srat_l3numa, cbs_df_cmn_dram_nps, cbs_df_cmn_mem_intlv, cbs_df_cmn_mem_intlv_size, cbs_sev_snp_support, cdn_enable, cdn_support, channel_inter_leave, cisco_adaptive_mem_training, cisco_debug_level, cisco_oprom_launch_optimization, cisco_xgmi_max_speed, cke_low_policy, closed_loop_therm_throtl, cmci_enable, config_tdp, config_tdp_level, console_redirection, core_multi_processing, cpu_energy_performance, cpu_frequency_floor, cpu_perf_enhancement, cpu_performance, cpu_power_management, cr_qos, crfastgo_config, dcpmm_firmware_downgrade, demand_scrub, direct_cache_access, dram_clock_throttling, dram_refresh_rate, dram_sw_thermal_throttling, eadr_support, edpc_en, enable_clock_spread_spec, enable_mktme, enable_sgx, enable_tme, energy_efficient_turbo, eng_perf_tuning, enhanced_intel_speed_step_tech, epoch_update, epp_enable, epp_profile, execute_disable_bit, extended_apic, flow_control, frb2enable, hardware_prefetch, hwpm_enable, imc_interleave, intel_dynamic_speed_select, intel_hyper_threading_tech, intel_speed_select, intel_turbo_boost_tech, intel_virtualization_technology, intel_vt_for_directed_io, intel_vtd_coherency_support, intel_vtd_interrupt_remapping, intel_vtd_pass_through_dma_support, intel_vtdats_support, ioh_error_enable, ioh_resource, ip_prefetch, ipv4http, ipv4pxe, ipv6http, ipv6pxe, kti_prefetch, legacy_os_redirection, legacy_usb_support, llc_alloc, llc_prefetch, lom_port0state, lom_port1state, lom_port2state, lom_port3state, lom_ports_all_state, lv_ddr_mode, make_device_non_bootable, memory_bandwidth_boost, memory_inter_leave, memory_mapped_io_above4gb, memory_refresh_rate, memory_size_limit, memory_thermal_throttling, mirroring_mode, mmcfg_base, network_stack, numa_optimized, nvmdimm_perform_config, onboard10gbit_lom, onboard_gbit_lom, onboard_scu_storage_support, onboard_scu_storage_sw_stack, operation_mode, os_boot_watchdog_timer, os_boot_watchdog_timer_policy, os_boot_watchdog_timer_timeout, out_of_band_mgmt_port, package_cstate_limit, panic_high_watermark, partial_cache_line_sparing, partial_mirror_mode_config, partial_mirror_percent, partial_mirror_value1, partial_mirror_value2, partial_mirror_value3, partial_mirror_value4, patrol_scrub, patrol_scrub_duration, pc_ie_ras_support, pc_ie_ssd_hot_plug_support, pch_usb30mode, pci_option_ro_ms, pci_rom_clp, pcie_ari_support, pcie_pll_ssc, pcie_slot_mraid1link_speed, pcie_slot_mraid1option_rom, pcie_slot_mraid2link_speed, pcie_slot_mraid2option_rom, pcie_slot_mstorraid_link_speed, pcie_slot_mstorraid_option_rom, pcie_slot_nvme1link_speed, pcie_slot_nvme1option_rom, pcie_slot_nvme2link_speed, pcie_slot_nvme2option_rom, pcie_slot_nvme3link_speed, pcie_slot_nvme3option_rom, pcie_slot_nvme4link_speed, pcie_slot_nvme4option_rom, pcie_slot_nvme5link_speed, pcie_slot_nvme5option_rom, pcie_slot_nvme6link_speed, pcie_slot_nvme6option_rom, pcie_slots_cdn_enable, pop_support, post_error_pause, post_package_repair, processor_c1e, processor_c3report, processor_c6report, processor_cstate, psata, pstate_coord_type, putty_key_pad, pwr_perf_tuning, qpi_link_frequency, qpi_link_speed, qpi_snoop_mode, rank_inter_leave, redirection_after_post, sata_mode_select, select_memory_ras_configuration, select_ppr_type, serial_port_aenable, sev, sgx_auto_registration_agent, sgx_epoch0, sgx_epoch1, sgx_factory_reset, sgx_le_pub_key_hash0, sgx_le_pub_key_hash1, sgx_le_pub_key_hash2, sgx_le_pub_key_hash3, sgx_le_wr, sgx_package_info_in_band_access, sgx_qos, sha1pcr_bank, sha256pcr_bank, single_pctl_enable, slot10link_speed, slot10state, slot11link_speed, slot11state, slot12link_speed, slot12state, slot13state, slot14state, slot1link_speed, slot1state, slot2link_speed, slot2state, slot3link_speed, slot3state, slot4link_speed, slot4state, slot5link_speed, slot5state, slot6link_speed, slot6state, slot7link_speed, slot7state, slot8link_speed, slot8state, slot9link_speed, slot9state, slot_flom_link_speed, slot_front_nvme10link_speed, slot_front_nvme10option_rom, slot_front_nvme11link_speed, slot_front_nvme11option_rom, slot_front_nvme12link_speed, slot_front_nvme12option_rom, slot_front_nvme13option_rom, slot_front_nvme14option_rom, slot_front_nvme15option_rom, slot_front_nvme16option_rom, slot_front_nvme17option_rom, slot_front_nvme18option_rom, slot_front_nvme19option_rom, slot_front_nvme1link_speed, slot_front_nvme1option_rom, slot_front_nvme20option_rom, slot_front_nvme21option_rom, slot_front_nvme22option_rom, slot_front_nvme23option_rom, slot_front_nvme24option_rom, slot_front_nvme2link_speed, slot_front_nvme2option_rom, slot_front_nvme3link_speed, slot_front_nvme3option_rom, slot_front_nvme4link_speed, slot_front_nvme4option_rom, slot_front_nvme5link_speed, slot_front_nvme5option_rom, slot_front_nvme6link_speed, slot_front_nvme6option_rom, slot_front_nvme7link_speed, slot_front_nvme7option_rom, slot_front_nvme8link_speed, slot_front_nvme8option_rom, slot_front_nvme9link_speed, slot_front_nvme9option_rom, slot_front_slot5link_speed, slot_front_slot6link_speed, slot_gpu1state, slot_gpu2state, slot_gpu3state, slot_gpu4state, slot_gpu5state, slot_gpu6state, slot_gpu7state, slot_gpu8state, slot_hba_link_speed, slot_hba_state, slot_lom1link, slot_lom2link, slot_mezz_state, slot_mlom_link_speed, slot_mlom_state, slot_mraid_link_speed, slot_mraid_state, slot_n10state, slot_n11state, slot_n12state, slot_n13state, slot_n14state, slot_n15state, slot_n16state, slot_n17state, slot_n18state, slot_n19state, slot_n1state, slot_n20state, slot_n21state, slot_n22state, slot_n23state, slot_n24state, slot_n2state, slot_n3state, slot_n4state, slot_n5state, slot_n6state, slot_n7state, slot_n8state, slot_n9state, slot_raid_link_speed, slot_raid_state, slot_rear_nvme1link_speed, slot_rear_nvme1state, slot_rear_nvme2link_speed, slot_rear_nvme2state, slot_rear_nvme3link_speed, slot_rear_nvme3state, slot_rear_nvme4link_speed, slot_rear_nvme4state, slot_rear_nvme5state, slot_rear_nvme6state, slot_rear_nvme7state, slot_rear_nvme8state, slot_riser1link_speed, slot_riser1slot1link_speed, slot_riser1slot2link_speed, slot_riser1slot3link_speed, slot_riser2link_speed, slot_riser2slot4link_speed, slot_riser2slot5link_speed, slot_riser2slot6link_speed, slot_sas_state, slot_ssd_slot1link_speed, slot_ssd_slot2link_speed, smee, smt_mode, snc, snoopy_mode_for2lm, snoopy_mode_for_ad, sparing_mode, sr_iov, streamer_prefetch, svm_mode, terminal_type, tpm_control, tpm_pending_operation, tpm_support, tsme, txt_support, ucsm_boot_order_rule, ufs_disable, uma_based_clustering, upi_link_enablement, upi_power_management, usb_emul6064, usb_port_front, usb_port_internal, usb_port_kvm, usb_port_rear, usb_port_sd_card, usb_port_vmedia, usb_xhci_support, vga_priority, virtual_numa, vmd_enable, vol_memory_mode, work_load_config, xpt_prefetch, xpt_remote_prefetch, organization, profiles].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      BiosPolicy.openapi_types.each_pair do |key, type|
        if attributes[BiosPolicy.attribute_map[key]].nil? && BiosPolicy.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[BiosPolicy.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[BiosPolicy.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[BiosPolicy.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[BiosPolicy.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IntersightClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      BiosPolicy.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = BiosPolicy.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end

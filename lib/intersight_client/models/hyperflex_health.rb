=begin
#Cisco Intersight

#Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-10-20T11:22:53Z.

The version of the OpenAPI document: 1.0.9-4870
Contact: intersight@cisco.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'date'
require 'time'

module IntersightClient
  # The data health status and ability of the HyperFlex storage cluster to tolerate failures.
  class HyperflexHealth < MoBaseMo
    # The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
    attr_accessor :class_id

    # The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
    attr_accessor :object_type

    # The status of the HyperFlex cluster's connection to the Intersight arbitration service. The arbitration service state is only applicable to 2-node edge clusters. * `NOT_AVAILABLE` - The cluster does not require a connection to the arbitration service. * `UNKNOWN` - The cluster's connection state to the arbitration service cannot be determined. * `ONLINE` - The cluster is connected to the arbitration service. * `OFFLINE` - The cluster is disconnected from the arbitration service.
    attr_accessor :arbitration_service_state

    # The HyperFlex cluster's compliance to the configured replication factor. It indicates that the compliance has degraded if the number of copies of data is reduced. * `UNKNOWN` - The replication compliance of the HyperFlex cluster is not known. * `COMPLIANT` - The HyperFlex cluster is compliant with the replication policy. All data on the cluster is replicated according to the configured replication factor. * `NON_COMPLIANT` - The HyperFlex cluster is not compliant with the replication policy. Some data on the cluster is not replicated in accordance with the configured replication factor.
    attr_accessor :data_replication_compliance

    attr_accessor :resiliency_details

    # The operational status of the HyperFlex cluster. * `UNKNOWN` - The operational status of the cluster cannot be determined. * `ONLINE` - The HyperFlex cluster is online and is performing IO operations. * `OFFLINE` - The HyperFlex cluster is offline and is not ready to perform IO operations. * `ENOSPACE` - The HyperFlex cluster is out of available storage capacity and cannot perform write transactions. * `READONLY` - The HyperFlex cluster is not accepting write transactions, but can still display static cluster information.
    attr_accessor :state

    # The unique identifier for the cluster.
    attr_accessor :uuid

    # The health status of the HyperFlex cluster's zookeeper ensemble. * `NOT_AVAILABLE` - The operational status of the ZK ensemble is not provided by the HyperFlex cluster. * `UNKNOWN` - The operational status of the ZK ensemble cannot be determined. * `ONLINE` - The ZK ensemble is online and operational. * `OFFLINE` - The ZK ensemble is offline and not operational.
    attr_accessor :zk_health

    attr_accessor :zone_resiliency_list

    attr_accessor :cluster

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'class_id' => :'ClassId',
        :'object_type' => :'ObjectType',
        :'arbitration_service_state' => :'ArbitrationServiceState',
        :'data_replication_compliance' => :'DataReplicationCompliance',
        :'resiliency_details' => :'ResiliencyDetails',
        :'state' => :'State',
        :'uuid' => :'Uuid',
        :'zk_health' => :'ZkHealth',
        :'zone_resiliency_list' => :'ZoneResiliencyList',
        :'cluster' => :'Cluster'
      }
    end

    # Returns all the JSON keys this model knows about, including the ones defined in its parent(s)
    def self.acceptable_attributes
      attribute_map.values.concat(superclass.acceptable_attributes)
    end

    # Returns the key-value map of all the JSON attributes this model knows about, including the ones defined in its parent(s)
    def self.acceptable_attribute_map
      attribute_map.merge(superclass.acceptable_attribute_map)
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'class_id' => :'String',
        :'object_type' => :'String',
        :'arbitration_service_state' => :'String',
        :'data_replication_compliance' => :'String',
        :'resiliency_details' => :'HyperflexHxResiliencyInfoDt',
        :'state' => :'String',
        :'uuid' => :'String',
        :'zk_health' => :'String',
        :'zone_resiliency_list' => :'Array<HyperflexHxZoneResiliencyInfoDt>',
        :'cluster' => :'HyperflexClusterRelationship'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'resiliency_details',
        :'zone_resiliency_list',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'HyperflexHealthAllOf',
      :'MoBaseMo'
      ]
    end

    # discriminator's property name in OpenAPI v3
    def self.openapi_discriminator_name
      :'ClassId'
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IntersightClient::HyperflexHealth` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `#{self.class.name}`. Please check the name to make sure it's valid. List of attributes: " + self.class.acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'class_id')
        self.class_id = attributes[:'class_id']
      else
        self.class_id = 'hyperflex.Health'
      end

      if attributes.key?(:'object_type')
        self.object_type = attributes[:'object_type']
      else
        self.object_type = 'hyperflex.Health'
      end

      if attributes.key?(:'arbitration_service_state')
        self.arbitration_service_state = attributes[:'arbitration_service_state']
      else
        self.arbitration_service_state = 'NOT_AVAILABLE'
      end

      if attributes.key?(:'data_replication_compliance')
        self.data_replication_compliance = attributes[:'data_replication_compliance']
      else
        self.data_replication_compliance = 'UNKNOWN'
      end

      if attributes.key?(:'resiliency_details')
        self.resiliency_details = attributes[:'resiliency_details']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      else
        self.state = 'UNKNOWN'
      end

      if attributes.key?(:'uuid')
        self.uuid = attributes[:'uuid']
      end

      if attributes.key?(:'zk_health')
        self.zk_health = attributes[:'zk_health']
      else
        self.zk_health = 'NOT_AVAILABLE'
      end

      if attributes.key?(:'zone_resiliency_list')
        if (value = attributes[:'zone_resiliency_list']).is_a?(Array)
          self.zone_resiliency_list = value
        end
      end

      if attributes.key?(:'cluster')
        self.cluster = attributes[:'cluster']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      if @class_id.nil?
        invalid_properties.push('invalid value for "class_id", class_id cannot be nil.')
      end

      if @object_type.nil?
        invalid_properties.push('invalid value for "object_type", object_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @class_id.nil?
      class_id_validator = EnumAttributeValidator.new('String', ["hyperflex.Health"])
      return false unless class_id_validator.valid?(@class_id)
      return false if @object_type.nil?
      object_type_validator = EnumAttributeValidator.new('String', ["hyperflex.Health"])
      return false unless object_type_validator.valid?(@object_type)
      arbitration_service_state_validator = EnumAttributeValidator.new('String', ["NOT_AVAILABLE", "UNKNOWN", "ONLINE", "OFFLINE"])
      return false unless arbitration_service_state_validator.valid?(@arbitration_service_state)
      data_replication_compliance_validator = EnumAttributeValidator.new('String', ["UNKNOWN", "COMPLIANT", "NON_COMPLIANT"])
      return false unless data_replication_compliance_validator.valid?(@data_replication_compliance)
      state_validator = EnumAttributeValidator.new('String', ["UNKNOWN", "ONLINE", "OFFLINE", "ENOSPACE", "READONLY"])
      return false unless state_validator.valid?(@state)
      zk_health_validator = EnumAttributeValidator.new('String', ["NOT_AVAILABLE", "UNKNOWN", "ONLINE", "OFFLINE"])
      return false unless zk_health_validator.valid?(@zk_health)
      true && super
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] class_id Object to be assigned
    def class_id=(class_id)
      validator = EnumAttributeValidator.new('String', ["hyperflex.Health"])
      unless validator.valid?(class_id)
        fail ArgumentError, "invalid value for \"class_id\", must be one of #{validator.allowable_values}."
      end
      @class_id = class_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object_type Object to be assigned
    def object_type=(object_type)
      validator = EnumAttributeValidator.new('String', ["hyperflex.Health"])
      unless validator.valid?(object_type)
        fail ArgumentError, "invalid value for \"object_type\", must be one of #{validator.allowable_values}."
      end
      @object_type = object_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] arbitration_service_state Object to be assigned
    def arbitration_service_state=(arbitration_service_state)
      validator = EnumAttributeValidator.new('String', ["NOT_AVAILABLE", "UNKNOWN", "ONLINE", "OFFLINE"])
      unless validator.valid?(arbitration_service_state)
        fail ArgumentError, "invalid value for \"arbitration_service_state\", must be one of #{validator.allowable_values}."
      end
      @arbitration_service_state = arbitration_service_state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] data_replication_compliance Object to be assigned
    def data_replication_compliance=(data_replication_compliance)
      validator = EnumAttributeValidator.new('String', ["UNKNOWN", "COMPLIANT", "NON_COMPLIANT"])
      unless validator.valid?(data_replication_compliance)
        fail ArgumentError, "invalid value for \"data_replication_compliance\", must be one of #{validator.allowable_values}."
      end
      @data_replication_compliance = data_replication_compliance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["UNKNOWN", "ONLINE", "OFFLINE", "ENOSPACE", "READONLY"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] zk_health Object to be assigned
    def zk_health=(zk_health)
      validator = EnumAttributeValidator.new('String', ["NOT_AVAILABLE", "UNKNOWN", "ONLINE", "OFFLINE"])
      unless validator.valid?(zk_health)
        fail ArgumentError, "invalid value for \"zk_health\", must be one of #{validator.allowable_values}."
      end
      @zk_health = zk_health
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          class_id == o.class_id &&
          object_type == o.object_type &&
          arbitration_service_state == o.arbitration_service_state &&
          data_replication_compliance == o.data_replication_compliance &&
          resiliency_details == o.resiliency_details &&
          state == o.state &&
          uuid == o.uuid &&
          zk_health == o.zk_health &&
          zone_resiliency_list == o.zone_resiliency_list &&
          cluster == o.cluster && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [class_id, object_type, arbitration_service_state, data_replication_compliance, resiliency_details, state, uuid, zk_health, zone_resiliency_list, cluster].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      HyperflexHealth.openapi_types.each_pair do |key, type|
        if attributes[HyperflexHealth.attribute_map[key]].nil? && HyperflexHealth.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[HyperflexHealth.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[HyperflexHealth.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[HyperflexHealth.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[HyperflexHealth.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IntersightClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      HyperflexHealth.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = HyperflexHealth.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end

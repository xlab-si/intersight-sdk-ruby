=begin
#Cisco Intersight

#Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-10-20T11:22:53Z.

The version of the OpenAPI document: 1.0.9-4870
Contact: intersight@cisco.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'date'
require 'time'

module IntersightClient
  # Contains information for a workflow execution which is a runtime instance of workflow.
  class WorkflowWorkflowInfo < MoBaseMo
    # The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
    attr_accessor :class_id

    # The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
    attr_accessor :object_type

    # The action of the workflow such as start, cancel, retry, pause. * `None` - No action is set, this is the default value for action field. * `Create` - Create a new instance of the workflow but it does not start the execution of the workflow. Use the Start action to start execution of the workflow. * `Start` - Start a new execution of the workflow. * `Pause` - Pause the workflow, this can only be issued on workflows that are in running state. * `Resume` - Resume the workflow which was previously paused through pause action on the workflow. * `Retry` - Retry the workflow that has previously reached a final state and has the retryable property set to true. A running or waiting workflow cannot be retried. If the property retryFromTaskName is also passed along with this action, the workflow will be started from that specific task, otherwise the workflow will be restarted from the first task.  The task name in retryFromTaskName must be one of the tasks that completed or failed in the previous run. It is not possible to retry a workflow from a task which wasn't run in the previous iteration. * `RetryFailed` - Retry the workflow that has failed. A running or waiting workflow or a workflow that completed successfully cannot be retried. Only the tasks that failed in the previous run will be retried and the rest of workflow will be run. This action does not restart the workflow and also does not support retrying from a specific task. * `Cancel` - Cancel the workflow that is in running or waiting state.
    attr_accessor :action

    # The time when the workflow info will be removed from database.
    attr_accessor :cleanup_time

    # The email address of the user who started this workflow.
    attr_accessor :email

    # The time when the workflow reached a final state.
    attr_accessor :end_time

    # The duration in hours after which the workflow info for failed, terminated or timed out workflow will be removed from database.
    attr_accessor :failed_workflow_cleanup_duration

    # All the given inputs for the workflow.
    attr_accessor :input

    # A workflow instance Id which is the unique identified for the workflow execution.
    attr_accessor :inst_id

    # Denotes if this workflow is internal and should be hidden from user view of running workflows.
    attr_accessor :internal

    # The last action that was issued on the workflow is saved in this field. * `None` - No action is set, this is the default value for action field. * `Create` - Create a new instance of the workflow but it does not start the execution of the workflow. Use the Start action to start execution of the workflow. * `Start` - Start a new execution of the workflow. * `Pause` - Pause the workflow, this can only be issued on workflows that are in running state. * `Resume` - Resume the workflow which was previously paused through pause action on the workflow. * `Retry` - Retry the workflow that has previously reached a final state and has the retryable property set to true. A running or waiting workflow cannot be retried. If the property retryFromTaskName is also passed along with this action, the workflow will be started from that specific task, otherwise the workflow will be restarted from the first task.  The task name in retryFromTaskName must be one of the tasks that completed or failed in the previous run. It is not possible to retry a workflow from a task which wasn't run in the previous iteration. * `RetryFailed` - Retry the workflow that has failed. A running or waiting workflow or a workflow that completed successfully cannot be retried. Only the tasks that failed in the previous run will be retried and the rest of workflow will be run. This action does not restart the workflow and also does not support retrying from a specific task. * `Cancel` - Cancel the workflow that is in running or waiting state.
    attr_accessor :last_action

    attr_accessor :message

    # Version of the workflow metadata for which this workflow execution was started.
    attr_accessor :meta_version

    # A name of the workflow execution instance.
    attr_accessor :name

    # All the generated outputs for the workflow.
    attr_accessor :output

    # Denotes the reason workflow is in paused status. * `None` - Pause reason is none, which indicates there is no reason for the pause state. * `TaskWithWarning` - Pause reason indicates the workflow is in this state due to a task that has a status as completed with warnings. * `SystemMaintenance` - Pause reason indicates the workflow is in this state based on actions of system admin for maintenance.
    attr_accessor :pause_reason

    # This field indicates percentage of workflow task execution.
    attr_accessor :progress

    attr_accessor :properties

    # This field is applicable when Retry action is issued for a workflow which is in 'final' state. When this field is not specified, the workflow will be retried from the start i.e., the first task. When this field is specified then the workflow will be retried from the specified task. This field should specify the task name which is the unique name of the task within the workflow. The task name must be one of the tasks that completed or failed in the previous run. It is not possible to retry a workflow from a task which wasn't run in the previous iteration.
    attr_accessor :retry_from_task_name

    # The source microservice name which is the owner for this workflow.
    attr_accessor :src

    # The time when the workflow was started for execution.
    attr_accessor :start_time

    # A status of the workflow (RUNNING, WAITING, COMPLETED, TIME_OUT, FAILED).
    attr_accessor :status

    # The duration in hours after which the workflow info for successful workflow will be removed from database.
    attr_accessor :success_workflow_cleanup_duration

    # The trace id to keep track of workflow execution.
    attr_accessor :trace_id

    # A type of the workflow (serverconfig, ansible_monitoring).
    attr_accessor :type

    # Property will be set when an user action is required on the workflow. This can be because the workflow is waiting for a wait task to be updated, workflow is paused or workflow launched by a configuration object has failed and needs to be retried in order to complete successfully.
    attr_accessor :user_action_required

    # The user identifier which indicates the user that started this workflow.
    attr_accessor :user_id

    # Denotes the reason workflow is in waiting status. * `None` - Wait reason is none, which indicates there is no reason for the waiting state. * `GatherTasks` - Wait reason is gathering tasks, which indicates the workflow is in this state in order to gather tasks. * `Duplicate` - Wait reason is duplicate, which indicates the workflow is a duplicate of current running workflow. * `RateLimit` - Wait reason is rate limit, which indicates the workflow is rate limited by account/instance level throttling threshold. * `WaitTask` - Wait reason when there are one or more wait tasks in the workflow which are yet to receive a task status update. * `PendingRetryFailed` - Wait reason when the workflow is pending a RetryFailed action. * `WaitingToStart` - Workflow is waiting to start on workflow engine.
    attr_accessor :wait_reason

    attr_accessor :workflow_ctx

    # The type of workflow meta. Derived from the workflow meta that is used to launch this workflow instance. * `SystemDefined` - System defined workflow definition. * `UserDefined` - User defined workflow definition. * `Dynamic` - Dynamically defined workflow definition.
    attr_accessor :workflow_meta_type

    # Total number of workflow tasks in this workflow.
    attr_accessor :workflow_task_count

    # Total number of worker tasks in this workflow. This count doesn't include the control tasks in the workflow.
    attr_accessor :workflow_worker_task_count

    attr_accessor :account

    attr_accessor :associated_object

    attr_accessor :organization

    attr_accessor :parent_task_info

    attr_accessor :pending_dynamic_workflow_info

    attr_accessor :permission

    # An array of relationships to workflowTaskInfo resources.
    attr_accessor :task_infos

    attr_accessor :workflow_definition

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'class_id' => :'ClassId',
        :'object_type' => :'ObjectType',
        :'action' => :'Action',
        :'cleanup_time' => :'CleanupTime',
        :'email' => :'Email',
        :'end_time' => :'EndTime',
        :'failed_workflow_cleanup_duration' => :'FailedWorkflowCleanupDuration',
        :'input' => :'Input',
        :'inst_id' => :'InstId',
        :'internal' => :'Internal',
        :'last_action' => :'LastAction',
        :'message' => :'Message',
        :'meta_version' => :'MetaVersion',
        :'name' => :'Name',
        :'output' => :'Output',
        :'pause_reason' => :'PauseReason',
        :'progress' => :'Progress',
        :'properties' => :'Properties',
        :'retry_from_task_name' => :'RetryFromTaskName',
        :'src' => :'Src',
        :'start_time' => :'StartTime',
        :'status' => :'Status',
        :'success_workflow_cleanup_duration' => :'SuccessWorkflowCleanupDuration',
        :'trace_id' => :'TraceId',
        :'type' => :'Type',
        :'user_action_required' => :'UserActionRequired',
        :'user_id' => :'UserId',
        :'wait_reason' => :'WaitReason',
        :'workflow_ctx' => :'WorkflowCtx',
        :'workflow_meta_type' => :'WorkflowMetaType',
        :'workflow_task_count' => :'WorkflowTaskCount',
        :'workflow_worker_task_count' => :'WorkflowWorkerTaskCount',
        :'account' => :'Account',
        :'associated_object' => :'AssociatedObject',
        :'organization' => :'Organization',
        :'parent_task_info' => :'ParentTaskInfo',
        :'pending_dynamic_workflow_info' => :'PendingDynamicWorkflowInfo',
        :'permission' => :'Permission',
        :'task_infos' => :'TaskInfos',
        :'workflow_definition' => :'WorkflowDefinition'
      }
    end

    # Returns all the JSON keys this model knows about, including the ones defined in its parent(s)
    def self.acceptable_attributes
      attribute_map.values.concat(superclass.acceptable_attributes)
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'class_id' => :'String',
        :'object_type' => :'String',
        :'action' => :'String',
        :'cleanup_time' => :'Time',
        :'email' => :'String',
        :'end_time' => :'Time',
        :'failed_workflow_cleanup_duration' => :'Integer',
        :'input' => :'Object',
        :'inst_id' => :'String',
        :'internal' => :'Boolean',
        :'last_action' => :'String',
        :'message' => :'Array<WorkflowMessage>',
        :'meta_version' => :'Integer',
        :'name' => :'String',
        :'output' => :'Object',
        :'pause_reason' => :'String',
        :'progress' => :'Float',
        :'properties' => :'WorkflowWorkflowInfoProperties',
        :'retry_from_task_name' => :'String',
        :'src' => :'String',
        :'start_time' => :'Time',
        :'status' => :'String',
        :'success_workflow_cleanup_duration' => :'Integer',
        :'trace_id' => :'String',
        :'type' => :'String',
        :'user_action_required' => :'Boolean',
        :'user_id' => :'String',
        :'wait_reason' => :'String',
        :'workflow_ctx' => :'WorkflowWorkflowCtx',
        :'workflow_meta_type' => :'String',
        :'workflow_task_count' => :'Integer',
        :'workflow_worker_task_count' => :'Integer',
        :'account' => :'IamAccountRelationship',
        :'associated_object' => :'MoBaseMoRelationship',
        :'organization' => :'OrganizationOrganizationRelationship',
        :'parent_task_info' => :'WorkflowTaskInfoRelationship',
        :'pending_dynamic_workflow_info' => :'WorkflowPendingDynamicWorkflowInfoRelationship',
        :'permission' => :'IamPermissionRelationship',
        :'task_infos' => :'Array<WorkflowTaskInfoRelationship>',
        :'workflow_definition' => :'WorkflowWorkflowDefinitionRelationship'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'input',
        :'message',
        :'output',
        :'properties',
        :'workflow_ctx',
        :'task_infos',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'MoBaseMo',
      :'WorkflowWorkflowInfoAllOf'
      ]
    end

    # discriminator's property name in OpenAPI v3
    def self.openapi_discriminator_name
      :'ClassId'
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IntersightClient::WorkflowWorkflowInfo` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IntersightClient::WorkflowWorkflowInfo`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'class_id')
        self.class_id = attributes[:'class_id']
      else
        self.class_id = 'workflow.WorkflowInfo'
      end

      if attributes.key?(:'object_type')
        self.object_type = attributes[:'object_type']
      else
        self.object_type = 'workflow.WorkflowInfo'
      end

      if attributes.key?(:'action')
        self.action = attributes[:'action']
      else
        self.action = 'None'
      end

      if attributes.key?(:'cleanup_time')
        self.cleanup_time = attributes[:'cleanup_time']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'end_time')
        self.end_time = attributes[:'end_time']
      end

      if attributes.key?(:'failed_workflow_cleanup_duration')
        self.failed_workflow_cleanup_duration = attributes[:'failed_workflow_cleanup_duration']
      else
        self.failed_workflow_cleanup_duration = 2160
      end

      if attributes.key?(:'input')
        self.input = attributes[:'input']
      end

      if attributes.key?(:'inst_id')
        self.inst_id = attributes[:'inst_id']
      end

      if attributes.key?(:'internal')
        self.internal = attributes[:'internal']
      end

      if attributes.key?(:'last_action')
        self.last_action = attributes[:'last_action']
      else
        self.last_action = 'None'
      end

      if attributes.key?(:'message')
        if (value = attributes[:'message']).is_a?(Array)
          self.message = value
        end
      end

      if attributes.key?(:'meta_version')
        self.meta_version = attributes[:'meta_version']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'output')
        self.output = attributes[:'output']
      end

      if attributes.key?(:'pause_reason')
        self.pause_reason = attributes[:'pause_reason']
      else
        self.pause_reason = 'None'
      end

      if attributes.key?(:'progress')
        self.progress = attributes[:'progress']
      end

      if attributes.key?(:'properties')
        self.properties = attributes[:'properties']
      end

      if attributes.key?(:'retry_from_task_name')
        self.retry_from_task_name = attributes[:'retry_from_task_name']
      end

      if attributes.key?(:'src')
        self.src = attributes[:'src']
      end

      if attributes.key?(:'start_time')
        self.start_time = attributes[:'start_time']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'success_workflow_cleanup_duration')
        self.success_workflow_cleanup_duration = attributes[:'success_workflow_cleanup_duration']
      else
        self.success_workflow_cleanup_duration = 2160
      end

      if attributes.key?(:'trace_id')
        self.trace_id = attributes[:'trace_id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'user_action_required')
        self.user_action_required = attributes[:'user_action_required']
      else
        self.user_action_required = false
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'wait_reason')
        self.wait_reason = attributes[:'wait_reason']
      else
        self.wait_reason = 'None'
      end

      if attributes.key?(:'workflow_ctx')
        self.workflow_ctx = attributes[:'workflow_ctx']
      end

      if attributes.key?(:'workflow_meta_type')
        self.workflow_meta_type = attributes[:'workflow_meta_type']
      else
        self.workflow_meta_type = 'SystemDefined'
      end

      if attributes.key?(:'workflow_task_count')
        self.workflow_task_count = attributes[:'workflow_task_count']
      end

      if attributes.key?(:'workflow_worker_task_count')
        self.workflow_worker_task_count = attributes[:'workflow_worker_task_count']
      end

      if attributes.key?(:'account')
        self.account = attributes[:'account']
      end

      if attributes.key?(:'associated_object')
        self.associated_object = attributes[:'associated_object']
      end

      if attributes.key?(:'organization')
        self.organization = attributes[:'organization']
      end

      if attributes.key?(:'parent_task_info')
        self.parent_task_info = attributes[:'parent_task_info']
      end

      if attributes.key?(:'pending_dynamic_workflow_info')
        self.pending_dynamic_workflow_info = attributes[:'pending_dynamic_workflow_info']
      end

      if attributes.key?(:'permission')
        self.permission = attributes[:'permission']
      end

      if attributes.key?(:'task_infos')
        if (value = attributes[:'task_infos']).is_a?(Array)
          self.task_infos = value
        end
      end

      if attributes.key?(:'workflow_definition')
        self.workflow_definition = attributes[:'workflow_definition']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      if @class_id.nil?
        invalid_properties.push('invalid value for "class_id", class_id cannot be nil.')
      end

      if @object_type.nil?
        invalid_properties.push('invalid value for "object_type", object_type cannot be nil.')
      end

      pattern = Regexp.new(/^$|^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)*$/)
      if !@email.nil? && @email !~ pattern
        invalid_properties.push("invalid value for \"email\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[^:]{1,92}$/)
      if !@name.nil? && @name !~ pattern
        invalid_properties.push("invalid value for \"name\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @class_id.nil?
      class_id_validator = EnumAttributeValidator.new('String', ["workflow.WorkflowInfo"])
      return false unless class_id_validator.valid?(@class_id)
      return false if @object_type.nil?
      object_type_validator = EnumAttributeValidator.new('String', ["workflow.WorkflowInfo"])
      return false unless object_type_validator.valid?(@object_type)
      action_validator = EnumAttributeValidator.new('String', ["None", "Create", "Start", "Pause", "Resume", "Retry", "RetryFailed", "Cancel"])
      return false unless action_validator.valid?(@action)
      return false if !@email.nil? && @email !~ Regexp.new(/^$|^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)*$/)
      last_action_validator = EnumAttributeValidator.new('String', ["None", "Create", "Start", "Pause", "Resume", "Retry", "RetryFailed", "Cancel"])
      return false unless last_action_validator.valid?(@last_action)
      return false if !@name.nil? && @name !~ Regexp.new(/^[^:]{1,92}$/)
      pause_reason_validator = EnumAttributeValidator.new('String', ["None", "TaskWithWarning", "SystemMaintenance"])
      return false unless pause_reason_validator.valid?(@pause_reason)
      wait_reason_validator = EnumAttributeValidator.new('String', ["None", "GatherTasks", "Duplicate", "RateLimit", "WaitTask", "PendingRetryFailed", "WaitingToStart"])
      return false unless wait_reason_validator.valid?(@wait_reason)
      workflow_meta_type_validator = EnumAttributeValidator.new('String', ["SystemDefined", "UserDefined", "Dynamic"])
      return false unless workflow_meta_type_validator.valid?(@workflow_meta_type)
      true && super
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] class_id Object to be assigned
    def class_id=(class_id)
      validator = EnumAttributeValidator.new('String', ["workflow.WorkflowInfo"])
      unless validator.valid?(class_id)
        fail ArgumentError, "invalid value for \"class_id\", must be one of #{validator.allowable_values}."
      end
      @class_id = class_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object_type Object to be assigned
    def object_type=(object_type)
      validator = EnumAttributeValidator.new('String', ["workflow.WorkflowInfo"])
      unless validator.valid?(object_type)
        fail ArgumentError, "invalid value for \"object_type\", must be one of #{validator.allowable_values}."
      end
      @object_type = object_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] action Object to be assigned
    def action=(action)
      validator = EnumAttributeValidator.new('String', ["None", "Create", "Start", "Pause", "Resume", "Retry", "RetryFailed", "Cancel"])
      unless validator.valid?(action)
        fail ArgumentError, "invalid value for \"action\", must be one of #{validator.allowable_values}."
      end
      @action = action
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      pattern = Regexp.new(/^$|^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)*$/)
      if !email.nil? && email !~ pattern
        fail ArgumentError, "invalid value for \"email\", must conform to the pattern #{pattern}."
      end

      @email = email
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_action Object to be assigned
    def last_action=(last_action)
      validator = EnumAttributeValidator.new('String', ["None", "Create", "Start", "Pause", "Resume", "Retry", "RetryFailed", "Cancel"])
      unless validator.valid?(last_action)
        fail ArgumentError, "invalid value for \"last_action\", must be one of #{validator.allowable_values}."
      end
      @last_action = last_action
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      pattern = Regexp.new(/^[^:]{1,92}$/)
      if !name.nil? && name !~ pattern
        fail ArgumentError, "invalid value for \"name\", must conform to the pattern #{pattern}."
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pause_reason Object to be assigned
    def pause_reason=(pause_reason)
      validator = EnumAttributeValidator.new('String', ["None", "TaskWithWarning", "SystemMaintenance"])
      unless validator.valid?(pause_reason)
        fail ArgumentError, "invalid value for \"pause_reason\", must be one of #{validator.allowable_values}."
      end
      @pause_reason = pause_reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wait_reason Object to be assigned
    def wait_reason=(wait_reason)
      validator = EnumAttributeValidator.new('String', ["None", "GatherTasks", "Duplicate", "RateLimit", "WaitTask", "PendingRetryFailed", "WaitingToStart"])
      unless validator.valid?(wait_reason)
        fail ArgumentError, "invalid value for \"wait_reason\", must be one of #{validator.allowable_values}."
      end
      @wait_reason = wait_reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] workflow_meta_type Object to be assigned
    def workflow_meta_type=(workflow_meta_type)
      validator = EnumAttributeValidator.new('String', ["SystemDefined", "UserDefined", "Dynamic"])
      unless validator.valid?(workflow_meta_type)
        fail ArgumentError, "invalid value for \"workflow_meta_type\", must be one of #{validator.allowable_values}."
      end
      @workflow_meta_type = workflow_meta_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          class_id == o.class_id &&
          object_type == o.object_type &&
          action == o.action &&
          cleanup_time == o.cleanup_time &&
          email == o.email &&
          end_time == o.end_time &&
          failed_workflow_cleanup_duration == o.failed_workflow_cleanup_duration &&
          input == o.input &&
          inst_id == o.inst_id &&
          internal == o.internal &&
          last_action == o.last_action &&
          message == o.message &&
          meta_version == o.meta_version &&
          name == o.name &&
          output == o.output &&
          pause_reason == o.pause_reason &&
          progress == o.progress &&
          properties == o.properties &&
          retry_from_task_name == o.retry_from_task_name &&
          src == o.src &&
          start_time == o.start_time &&
          status == o.status &&
          success_workflow_cleanup_duration == o.success_workflow_cleanup_duration &&
          trace_id == o.trace_id &&
          type == o.type &&
          user_action_required == o.user_action_required &&
          user_id == o.user_id &&
          wait_reason == o.wait_reason &&
          workflow_ctx == o.workflow_ctx &&
          workflow_meta_type == o.workflow_meta_type &&
          workflow_task_count == o.workflow_task_count &&
          workflow_worker_task_count == o.workflow_worker_task_count &&
          account == o.account &&
          associated_object == o.associated_object &&
          organization == o.organization &&
          parent_task_info == o.parent_task_info &&
          pending_dynamic_workflow_info == o.pending_dynamic_workflow_info &&
          permission == o.permission &&
          task_infos == o.task_infos &&
          workflow_definition == o.workflow_definition && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [class_id, object_type, action, cleanup_time, email, end_time, failed_workflow_cleanup_duration, input, inst_id, internal, last_action, message, meta_version, name, output, pause_reason, progress, properties, retry_from_task_name, src, start_time, status, success_workflow_cleanup_duration, trace_id, type, user_action_required, user_id, wait_reason, workflow_ctx, workflow_meta_type, workflow_task_count, workflow_worker_task_count, account, associated_object, organization, parent_task_info, pending_dynamic_workflow_info, permission, task_infos, workflow_definition].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      WorkflowWorkflowInfo.openapi_types.each_pair do |key, type|
        if attributes[WorkflowWorkflowInfo.attribute_map[key]].nil? && WorkflowWorkflowInfo.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[WorkflowWorkflowInfo.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[WorkflowWorkflowInfo.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[WorkflowWorkflowInfo.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[WorkflowWorkflowInfo.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IntersightClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      WorkflowWorkflowInfo.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = WorkflowWorkflowInfo.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end

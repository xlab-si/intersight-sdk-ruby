=begin
#Cisco Intersight

#Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-10-20T11:22:53Z.

The version of the OpenAPI document: 1.0.9-4870
Contact: intersight@cisco.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'date'
require 'time'

module IntersightClient
  # Definition of the list of properties defined in 'niatelemetry.NiaFeatureUsage', excluding properties defined in parent classes.
  class NiatelemetryNiaFeatureUsageAllOf
    # The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
    attr_accessor :class_id

    # The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
    attr_accessor :object_type

    # Returns the total number of AAA Ldap Providers.
    attr_accessor :aaa_ldap_provider_count

    # Returns the total number of AAA Radius Providers.
    attr_accessor :aaa_radius_provider_count

    # Returns the total number of AAA Tacacs Providers.
    attr_accessor :aaa_tacacs_provider_count

    # Number of APIC controllers. This determines the value of controllers for the fabric.
    attr_accessor :apic_count

    # Returns if telnet is enabled on APIC.
    attr_accessor :apic_is_telnet_enabled

    # Count of NTP servers configured on APIC.
    attr_accessor :apic_ntp_count

    # Number of SNMP communities configured on APIC.
    attr_accessor :apic_snmp_community_count

    # Number of logging groups configured on APIC.
    attr_accessor :apic_sys_log_grp_count

    # Number of logging sources configured on APIC.
    attr_accessor :apic_sys_log_src_count

    # ACI APPs feature usage scale.
    attr_accessor :app_center_count

    # AVE feature usage. This determines if ACI virtual edge feature is enabled or disabled.
    attr_accessor :ave

    # Number of BDs. This determines the total number of Broadcast Domains across the fabric.
    attr_accessor :bd_count

    # Number of call home smart monitoring policies on the fabric.
    attr_accessor :callhome_smart_group_count

    # Number of Cloudsec SA peers.
    attr_accessor :cloud_sec_peer_count

    # Number of compute hypervisors on the fabric.
    attr_accessor :comp_hv_count

    # Number of system backup configure export policies on the fabric.
    attr_accessor :config_exportp_count

    # Number of system backup configure jobs on the fabric.
    attr_accessor :config_job_count

    # Consistency checker application usage. This determines if the fabric has Consistency checker application installed.
    attr_accessor :consistency_checker_app

    # Number of contracts. This determines the total number of Contracts configured across the fabric.
    attr_accessor :contract_count

    # DNS feature usage. This determines the total number of DNS configurations across the fabric.
    attr_accessor :dns_count

    # Eigrp feature usage. This determines the total number of EIGRP sessions across the fabric.
    attr_accessor :eigrp_count

    # Number of End Point Groups. This determines the total number of End Point Groups across the fabric.
    attr_accessor :epg_count

    # Returns the total number of fabric module slots.
    attr_accessor :fabric_module_count

    # Number of Multi-Pods per fabric.
    attr_accessor :fabric_setupp_count

    # Total number of FCoE N-Port for DOM, VSAn, and VLAN.
    attr_accessor :fcoe_nport_count

    # Number of FCoE N-Port DOM.
    attr_accessor :fcoe_nport_dom_count

    # Number of FCoE N-Port VLAN.
    attr_accessor :fcoe_nport_vlan_count

    # Number of FCoE N-Port VSAN.
    attr_accessor :fcoe_nport_vsan_count

    # Number of Internet Protocol Service Level Agreements Monitoring policy objects for object tracking.
    attr_accessor :fv_sla_def_count

    # Hsrp feature usage. This determines the total number of HSRP sessions across the fabric.
    attr_accessor :hsrp_count

    # Ibgp feature usage. This determines the total number of BGP sessions across the fabric.
    attr_accessor :ibgp_count

    # IGMP Access List feature usage. This determines the total number of IGMP access lists configured across the fabric.
    attr_accessor :igmp_access_list_count

    # IGMP Snooping feature usage. This determines if this feature is enabled or disabled.
    attr_accessor :igmp_snoop

    # Number of IP based End Point Groups. This determines the total number of IP End Point Groups across the fabric.
    attr_accessor :ip_epg_count

    # BGP route reflector usage on APIC.
    attr_accessor :is_bgp_route_reflectors_feature_used

    # Brodge domains feature usage on APIC controller.
    attr_accessor :is_bridge_domains_feature_used

    # Returns value of isCommonLocalUserName field.
    attr_accessor :is_common_local_user_name

    # Contracts feature usage on APIC controller.
    attr_accessor :is_contracts_feature_used

    # EPG feature usage on APIC controller.
    attr_accessor :is_epg_feature_used

    # Filters feature usage on APIC.
    attr_accessor :is_filters_feature_used

    # Returns if HTTP is configured.
    attr_accessor :is_http_configured

    # Returns if HTTPS is configured.
    attr_accessor :is_https_configured

    # NTP feature usage on APIC controller.
    attr_accessor :is_ntp_feature_used

    # Ptp feature usage on APIC.
    attr_accessor :is_ptp_feature_used

    # Synce feature usage on APIC.
    attr_accessor :is_synce_feature_used

    # Status of techsupport collection.
    attr_accessor :is_tech_support_collected

    # Tenants feature usage on APIC.
    attr_accessor :is_tenants_feature_used

    # VRF feature usage on APIC controller.
    attr_accessor :is_vrfs_feature_used

    # Isis feature usage. This determines the total number of ISIS sessions across the fabric.
    attr_accessor :isis_count

    # L2Multicast feature usage. This determines if this Layer 2 Multicast feature is being enabled / disabled on the fabric.
    attr_accessor :l2_multicast

    # Number of Leafs. This determines the total number of Leaf switches in the fabric.
    attr_accessor :leaf_count

    # Returns count of local users.
    attr_accessor :local_username_count

    # Returns login block duration value.
    attr_accessor :login_block_duration

    # Returns the maximum failed attempts on login.
    attr_accessor :login_max_failed_attempts

    # Returns the maximum failed attempt windows on login.
    attr_accessor :login_max_failed_attempts_window

    # Maintenance Mode feature usage. This determines the number of switches that are currently in maintenance mode.
    attr_accessor :maintenance_mode_count

    # Management over IPv6 feature usage. This determines the total number of IPv6 configurtaions in the fabric.
    attr_accessor :management_over_v6_count

    # Number of Microsoft microsegmentation VmmEpPD objects. Ensures that Microsoft was configured.
    attr_accessor :microsoft_useg_vmm_ep_pd_count

    # Number of Netflow monitor policies.
    attr_accessor :net_flow_count

    # NIR application usage. This determines if the fabric has NIR application installed.
    attr_accessor :nir

    # Open stack feature usage.
    attr_accessor :open_stack

    # Opflex for Kubernetes feature usage. This determines the total number of VMM sessions of type kubernetes.
    attr_accessor :opflex_kubernetes_count

    # Ospf feature usage. This determines the total number of OSPF sessions across the fabric.
    attr_accessor :ospf_count

    # Returns count of passwords.
    attr_accessor :password_history_count

    # Returns if the password is strong or not.
    attr_accessor :password_strength_check

    # Returns the number of password strength profile.
    attr_accessor :password_strength_profile_count

    # POE feature usage. This determines the total number of POE configurations across the fabric.
    attr_accessor :poe_count

    # Number of objects with Port Security enabled. Non-Zero value indicates the object as enabled.
    attr_accessor :port_security_count

    # QinVniTunnel feature usage. This determines if the qinVniTunnel feature is being used on the fabric and the scale of it.
    attr_accessor :qin_vni_tunnel_count

    # Number of Quality Of Service congestion class.
    attr_accessor :qos_cong_count

    # Number of Quality Of Service class.
    attr_accessor :qos_pfc_pol_count

    # Returns the value of count of realms.
    attr_accessor :realm_count

    # Type of record DCNM / APIC / SE. This determines the type of platform where inventory was collected.
    attr_accessor :record_type

    # Version of record being pushed. This determines what was the API version for data available from the device.
    attr_accessor :record_version

    # Number of remote Leafs. This determines the total number of remote leaf switches in the fabric.
    attr_accessor :remote_leaf_count

    # SCVMM feature usage. This determines the total number of SCVMM configurations in the fabric.
    attr_accessor :scvmm_count

    # SharedL3Out feature usage. This determines the total number of Shared L3 out configured across the fabric.
    attr_accessor :shared_l3_out_count

    # The Site name represents an APIC cluster. Service Engine can onboard multiple APIC clusters / sites. There will be a feature usage object per site in Multi site scenario. In multi-site scenario the site name is available in all the requests being made.
    attr_accessor :site_name

    # Smart callhome feature usage. This determines if this feature is being enabled or disabled.
    attr_accessor :smart_call_home

    attr_accessor :smart_license

    # Returns count of snapshots.
    attr_accessor :snapshot_count

    # SNMP feature usage. This determines if this feature is enabled or disabled.
    attr_accessor :snmp

    # Returns count of SNMP Community Access.
    attr_accessor :snmp_community_access_count

    # Number of SNMP monitoring policies on the fabric.
    attr_accessor :snmp_group_count

    # Returns count of SNMP trap.
    attr_accessor :snmp_trap_count

    # Returns count of SNMP V3 on the fabric.
    attr_accessor :snmp_v3_count

    # Number of Span Sources and Destinations.
    attr_accessor :span_count

    # Number of Span Destinations with valid state.
    attr_accessor :span_dst_count

    # Number of Span Sources with valid state.
    attr_accessor :span_src_count

    # Number of Spines. This determines the total number of spine switches in the fabric.
    attr_accessor :spine_count

    # Ssh over IPv6 feature usage. This determines the total number of IPv6 configurtaions in the fabric.
    attr_accessor :ssh_over_v6_count

    # Returns count of ssh V2 on the fabric.
    attr_accessor :ssh_v2_count

    # Returns the total number of supervisor module slots.
    attr_accessor :supervisor_module_count

    # Number of syslog monitoring policies on the fabric.
    attr_accessor :syslog_group_count

    # Syslog over IPv6 feature usage. This determines the total number of IPv6 configurtaions in the fabric.
    attr_accessor :syslog_over_v6_count

    # Returns the total number of system controller slots.
    attr_accessor :system_controller_count

    # Number of tacacs monitoring policies on the fabric.
    attr_accessor :tacacs_group_count

    # Number of tenants. This determines the total number of tenants configured across the fabric.
    attr_accessor :tenant_count

    # Number of tier 2 Leafs. This determines the total number of tier 2 Leaf switches in the fabric.
    attr_accessor :tier_two_leaf_count

    # Returns the total number of critical faults.
    attr_accessor :total_critical_faults

    # TWAMP feature usage. This determines if this feature is enabled or disabled.
    attr_accessor :twamp

    # VMM uSegmentation feature usage. This determines if microsegmentation feature is enabled or disabled.
    attr_accessor :useg

    # Number of objects with VmWare vCenter 6.5 support. Checks the controller revision value.
    attr_accessor :vm_ware_vds_count

    # Number of Virtual Machine Monitor controller policy objects for VMware vCenter.
    attr_accessor :vmm_ctrlrp_count

    # Number of Virtual Machine Monitor domain policy model objects for VMware vCenter.
    attr_accessor :vmm_domp_count

    # Microsegmentation Distributed Virtual Switch feature usage. Gets the number of objects associated to VMware vCenter.
    attr_accessor :vmm_ep_pd_count

    # Number of objects with L4-L7 Device Package Import enabled. Checks for the vendor and the model.
    attr_accessor :vnsm_dev_count

    # Virtual pod feature usage. This determines the total number of virtual POD configurations in the fabrics.
    attr_accessor :vpod_count

    # Timeout for web token in seconds.
    attr_accessor :webtoken_timeout_seconds

    attr_accessor :registered_device

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'class_id' => :'ClassId',
        :'object_type' => :'ObjectType',
        :'aaa_ldap_provider_count' => :'AaaLdapProviderCount',
        :'aaa_radius_provider_count' => :'AaaRadiusProviderCount',
        :'aaa_tacacs_provider_count' => :'AaaTacacsProviderCount',
        :'apic_count' => :'ApicCount',
        :'apic_is_telnet_enabled' => :'ApicIsTelnetEnabled',
        :'apic_ntp_count' => :'ApicNtpCount',
        :'apic_snmp_community_count' => :'ApicSnmpCommunityCount',
        :'apic_sys_log_grp_count' => :'ApicSysLogGrpCount',
        :'apic_sys_log_src_count' => :'ApicSysLogSrcCount',
        :'app_center_count' => :'AppCenterCount',
        :'ave' => :'Ave',
        :'bd_count' => :'BdCount',
        :'callhome_smart_group_count' => :'CallhomeSmartGroupCount',
        :'cloud_sec_peer_count' => :'CloudSecPeerCount',
        :'comp_hv_count' => :'CompHvCount',
        :'config_exportp_count' => :'ConfigExportpCount',
        :'config_job_count' => :'ConfigJobCount',
        :'consistency_checker_app' => :'ConsistencyCheckerApp',
        :'contract_count' => :'ContractCount',
        :'dns_count' => :'DnsCount',
        :'eigrp_count' => :'EigrpCount',
        :'epg_count' => :'EpgCount',
        :'fabric_module_count' => :'FabricModuleCount',
        :'fabric_setupp_count' => :'FabricSetuppCount',
        :'fcoe_nport_count' => :'FcoeNportCount',
        :'fcoe_nport_dom_count' => :'FcoeNportDomCount',
        :'fcoe_nport_vlan_count' => :'FcoeNportVlanCount',
        :'fcoe_nport_vsan_count' => :'FcoeNportVsanCount',
        :'fv_sla_def_count' => :'FvSlaDefCount',
        :'hsrp_count' => :'HsrpCount',
        :'ibgp_count' => :'IbgpCount',
        :'igmp_access_list_count' => :'IgmpAccessListCount',
        :'igmp_snoop' => :'IgmpSnoop',
        :'ip_epg_count' => :'IpEpgCount',
        :'is_bgp_route_reflectors_feature_used' => :'IsBgpRouteReflectorsFeatureUsed',
        :'is_bridge_domains_feature_used' => :'IsBridgeDomainsFeatureUsed',
        :'is_common_local_user_name' => :'IsCommonLocalUserName',
        :'is_contracts_feature_used' => :'IsContractsFeatureUsed',
        :'is_epg_feature_used' => :'IsEpgFeatureUsed',
        :'is_filters_feature_used' => :'IsFiltersFeatureUsed',
        :'is_http_configured' => :'IsHttpConfigured',
        :'is_https_configured' => :'IsHttpsConfigured',
        :'is_ntp_feature_used' => :'IsNtpFeatureUsed',
        :'is_ptp_feature_used' => :'IsPtpFeatureUsed',
        :'is_synce_feature_used' => :'IsSynceFeatureUsed',
        :'is_tech_support_collected' => :'IsTechSupportCollected',
        :'is_tenants_feature_used' => :'IsTenantsFeatureUsed',
        :'is_vrfs_feature_used' => :'IsVrfsFeatureUsed',
        :'isis_count' => :'IsisCount',
        :'l2_multicast' => :'L2Multicast',
        :'leaf_count' => :'LeafCount',
        :'local_username_count' => :'LocalUsernameCount',
        :'login_block_duration' => :'LoginBlockDuration',
        :'login_max_failed_attempts' => :'LoginMaxFailedAttempts',
        :'login_max_failed_attempts_window' => :'LoginMaxFailedAttemptsWindow',
        :'maintenance_mode_count' => :'MaintenanceModeCount',
        :'management_over_v6_count' => :'ManagementOverV6Count',
        :'microsoft_useg_vmm_ep_pd_count' => :'MicrosoftUsegVmmEpPdCount',
        :'net_flow_count' => :'NetFlowCount',
        :'nir' => :'Nir',
        :'open_stack' => :'OpenStack',
        :'opflex_kubernetes_count' => :'OpflexKubernetesCount',
        :'ospf_count' => :'OspfCount',
        :'password_history_count' => :'PasswordHistoryCount',
        :'password_strength_check' => :'PasswordStrengthCheck',
        :'password_strength_profile_count' => :'PasswordStrengthProfileCount',
        :'poe_count' => :'PoeCount',
        :'port_security_count' => :'PortSecurityCount',
        :'qin_vni_tunnel_count' => :'QinVniTunnelCount',
        :'qos_cong_count' => :'QosCongCount',
        :'qos_pfc_pol_count' => :'QosPfcPolCount',
        :'realm_count' => :'RealmCount',
        :'record_type' => :'RecordType',
        :'record_version' => :'RecordVersion',
        :'remote_leaf_count' => :'RemoteLeafCount',
        :'scvmm_count' => :'ScvmmCount',
        :'shared_l3_out_count' => :'SharedL3OutCount',
        :'site_name' => :'SiteName',
        :'smart_call_home' => :'SmartCallHome',
        :'smart_license' => :'SmartLicense',
        :'snapshot_count' => :'SnapshotCount',
        :'snmp' => :'Snmp',
        :'snmp_community_access_count' => :'SnmpCommunityAccessCount',
        :'snmp_group_count' => :'SnmpGroupCount',
        :'snmp_trap_count' => :'SnmpTrapCount',
        :'snmp_v3_count' => :'SnmpV3Count',
        :'span_count' => :'SpanCount',
        :'span_dst_count' => :'SpanDstCount',
        :'span_src_count' => :'SpanSrcCount',
        :'spine_count' => :'SpineCount',
        :'ssh_over_v6_count' => :'SshOverV6Count',
        :'ssh_v2_count' => :'SshV2Count',
        :'supervisor_module_count' => :'SupervisorModuleCount',
        :'syslog_group_count' => :'SyslogGroupCount',
        :'syslog_over_v6_count' => :'SyslogOverV6Count',
        :'system_controller_count' => :'SystemControllerCount',
        :'tacacs_group_count' => :'TacacsGroupCount',
        :'tenant_count' => :'TenantCount',
        :'tier_two_leaf_count' => :'TierTwoLeafCount',
        :'total_critical_faults' => :'TotalCriticalFaults',
        :'twamp' => :'Twamp',
        :'useg' => :'Useg',
        :'vm_ware_vds_count' => :'VmWareVdsCount',
        :'vmm_ctrlrp_count' => :'VmmCtrlrpCount',
        :'vmm_domp_count' => :'VmmDompCount',
        :'vmm_ep_pd_count' => :'VmmEpPdCount',
        :'vnsm_dev_count' => :'VnsmDevCount',
        :'vpod_count' => :'VpodCount',
        :'webtoken_timeout_seconds' => :'WebtokenTimeoutSeconds',
        :'registered_device' => :'RegisteredDevice'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'class_id' => :'String',
        :'object_type' => :'String',
        :'aaa_ldap_provider_count' => :'Integer',
        :'aaa_radius_provider_count' => :'Integer',
        :'aaa_tacacs_provider_count' => :'Integer',
        :'apic_count' => :'Integer',
        :'apic_is_telnet_enabled' => :'Boolean',
        :'apic_ntp_count' => :'Integer',
        :'apic_snmp_community_count' => :'Integer',
        :'apic_sys_log_grp_count' => :'Integer',
        :'apic_sys_log_src_count' => :'Integer',
        :'app_center_count' => :'Integer',
        :'ave' => :'String',
        :'bd_count' => :'Integer',
        :'callhome_smart_group_count' => :'Integer',
        :'cloud_sec_peer_count' => :'Integer',
        :'comp_hv_count' => :'Integer',
        :'config_exportp_count' => :'Integer',
        :'config_job_count' => :'Integer',
        :'consistency_checker_app' => :'String',
        :'contract_count' => :'Integer',
        :'dns_count' => :'Integer',
        :'eigrp_count' => :'Integer',
        :'epg_count' => :'Integer',
        :'fabric_module_count' => :'Integer',
        :'fabric_setupp_count' => :'Integer',
        :'fcoe_nport_count' => :'Integer',
        :'fcoe_nport_dom_count' => :'Integer',
        :'fcoe_nport_vlan_count' => :'Integer',
        :'fcoe_nport_vsan_count' => :'Integer',
        :'fv_sla_def_count' => :'Integer',
        :'hsrp_count' => :'Integer',
        :'ibgp_count' => :'Integer',
        :'igmp_access_list_count' => :'Integer',
        :'igmp_snoop' => :'String',
        :'ip_epg_count' => :'Integer',
        :'is_bgp_route_reflectors_feature_used' => :'Boolean',
        :'is_bridge_domains_feature_used' => :'Boolean',
        :'is_common_local_user_name' => :'Boolean',
        :'is_contracts_feature_used' => :'Boolean',
        :'is_epg_feature_used' => :'Boolean',
        :'is_filters_feature_used' => :'Boolean',
        :'is_http_configured' => :'Boolean',
        :'is_https_configured' => :'Boolean',
        :'is_ntp_feature_used' => :'Boolean',
        :'is_ptp_feature_used' => :'Boolean',
        :'is_synce_feature_used' => :'Boolean',
        :'is_tech_support_collected' => :'String',
        :'is_tenants_feature_used' => :'Boolean',
        :'is_vrfs_feature_used' => :'Boolean',
        :'isis_count' => :'Integer',
        :'l2_multicast' => :'String',
        :'leaf_count' => :'Integer',
        :'local_username_count' => :'Integer',
        :'login_block_duration' => :'Integer',
        :'login_max_failed_attempts' => :'Integer',
        :'login_max_failed_attempts_window' => :'Integer',
        :'maintenance_mode_count' => :'Integer',
        :'management_over_v6_count' => :'Integer',
        :'microsoft_useg_vmm_ep_pd_count' => :'Integer',
        :'net_flow_count' => :'Integer',
        :'nir' => :'String',
        :'open_stack' => :'String',
        :'opflex_kubernetes_count' => :'Integer',
        :'ospf_count' => :'Integer',
        :'password_history_count' => :'Integer',
        :'password_strength_check' => :'String',
        :'password_strength_profile_count' => :'Integer',
        :'poe_count' => :'Integer',
        :'port_security_count' => :'Integer',
        :'qin_vni_tunnel_count' => :'Integer',
        :'qos_cong_count' => :'Integer',
        :'qos_pfc_pol_count' => :'Integer',
        :'realm_count' => :'Integer',
        :'record_type' => :'String',
        :'record_version' => :'String',
        :'remote_leaf_count' => :'Integer',
        :'scvmm_count' => :'Integer',
        :'shared_l3_out_count' => :'Integer',
        :'site_name' => :'String',
        :'smart_call_home' => :'String',
        :'smart_license' => :'NiatelemetrySmartLicense',
        :'snapshot_count' => :'Integer',
        :'snmp' => :'String',
        :'snmp_community_access_count' => :'Integer',
        :'snmp_group_count' => :'Integer',
        :'snmp_trap_count' => :'Integer',
        :'snmp_v3_count' => :'Integer',
        :'span_count' => :'Integer',
        :'span_dst_count' => :'Integer',
        :'span_src_count' => :'Integer',
        :'spine_count' => :'Integer',
        :'ssh_over_v6_count' => :'Integer',
        :'ssh_v2_count' => :'Integer',
        :'supervisor_module_count' => :'Integer',
        :'syslog_group_count' => :'Integer',
        :'syslog_over_v6_count' => :'Integer',
        :'system_controller_count' => :'Integer',
        :'tacacs_group_count' => :'Integer',
        :'tenant_count' => :'Integer',
        :'tier_two_leaf_count' => :'Integer',
        :'total_critical_faults' => :'Integer',
        :'twamp' => :'String',
        :'useg' => :'String',
        :'vm_ware_vds_count' => :'Integer',
        :'vmm_ctrlrp_count' => :'Integer',
        :'vmm_domp_count' => :'Integer',
        :'vmm_ep_pd_count' => :'Integer',
        :'vnsm_dev_count' => :'Integer',
        :'vpod_count' => :'Integer',
        :'webtoken_timeout_seconds' => :'Integer',
        :'registered_device' => :'AssetDeviceRegistrationRelationship'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'smart_license',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IntersightClient::NiatelemetryNiaFeatureUsageAllOf` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IntersightClient::NiatelemetryNiaFeatureUsageAllOf`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'class_id')
        self.class_id = attributes[:'class_id']
      else
        self.class_id = 'niatelemetry.NiaFeatureUsage'
      end

      if attributes.key?(:'object_type')
        self.object_type = attributes[:'object_type']
      else
        self.object_type = 'niatelemetry.NiaFeatureUsage'
      end

      if attributes.key?(:'aaa_ldap_provider_count')
        self.aaa_ldap_provider_count = attributes[:'aaa_ldap_provider_count']
      end

      if attributes.key?(:'aaa_radius_provider_count')
        self.aaa_radius_provider_count = attributes[:'aaa_radius_provider_count']
      end

      if attributes.key?(:'aaa_tacacs_provider_count')
        self.aaa_tacacs_provider_count = attributes[:'aaa_tacacs_provider_count']
      end

      if attributes.key?(:'apic_count')
        self.apic_count = attributes[:'apic_count']
      end

      if attributes.key?(:'apic_is_telnet_enabled')
        self.apic_is_telnet_enabled = attributes[:'apic_is_telnet_enabled']
      end

      if attributes.key?(:'apic_ntp_count')
        self.apic_ntp_count = attributes[:'apic_ntp_count']
      end

      if attributes.key?(:'apic_snmp_community_count')
        self.apic_snmp_community_count = attributes[:'apic_snmp_community_count']
      end

      if attributes.key?(:'apic_sys_log_grp_count')
        self.apic_sys_log_grp_count = attributes[:'apic_sys_log_grp_count']
      end

      if attributes.key?(:'apic_sys_log_src_count')
        self.apic_sys_log_src_count = attributes[:'apic_sys_log_src_count']
      end

      if attributes.key?(:'app_center_count')
        self.app_center_count = attributes[:'app_center_count']
      end

      if attributes.key?(:'ave')
        self.ave = attributes[:'ave']
      end

      if attributes.key?(:'bd_count')
        self.bd_count = attributes[:'bd_count']
      end

      if attributes.key?(:'callhome_smart_group_count')
        self.callhome_smart_group_count = attributes[:'callhome_smart_group_count']
      end

      if attributes.key?(:'cloud_sec_peer_count')
        self.cloud_sec_peer_count = attributes[:'cloud_sec_peer_count']
      end

      if attributes.key?(:'comp_hv_count')
        self.comp_hv_count = attributes[:'comp_hv_count']
      end

      if attributes.key?(:'config_exportp_count')
        self.config_exportp_count = attributes[:'config_exportp_count']
      end

      if attributes.key?(:'config_job_count')
        self.config_job_count = attributes[:'config_job_count']
      end

      if attributes.key?(:'consistency_checker_app')
        self.consistency_checker_app = attributes[:'consistency_checker_app']
      end

      if attributes.key?(:'contract_count')
        self.contract_count = attributes[:'contract_count']
      end

      if attributes.key?(:'dns_count')
        self.dns_count = attributes[:'dns_count']
      end

      if attributes.key?(:'eigrp_count')
        self.eigrp_count = attributes[:'eigrp_count']
      end

      if attributes.key?(:'epg_count')
        self.epg_count = attributes[:'epg_count']
      end

      if attributes.key?(:'fabric_module_count')
        self.fabric_module_count = attributes[:'fabric_module_count']
      end

      if attributes.key?(:'fabric_setupp_count')
        self.fabric_setupp_count = attributes[:'fabric_setupp_count']
      end

      if attributes.key?(:'fcoe_nport_count')
        self.fcoe_nport_count = attributes[:'fcoe_nport_count']
      end

      if attributes.key?(:'fcoe_nport_dom_count')
        self.fcoe_nport_dom_count = attributes[:'fcoe_nport_dom_count']
      end

      if attributes.key?(:'fcoe_nport_vlan_count')
        self.fcoe_nport_vlan_count = attributes[:'fcoe_nport_vlan_count']
      end

      if attributes.key?(:'fcoe_nport_vsan_count')
        self.fcoe_nport_vsan_count = attributes[:'fcoe_nport_vsan_count']
      end

      if attributes.key?(:'fv_sla_def_count')
        self.fv_sla_def_count = attributes[:'fv_sla_def_count']
      end

      if attributes.key?(:'hsrp_count')
        self.hsrp_count = attributes[:'hsrp_count']
      end

      if attributes.key?(:'ibgp_count')
        self.ibgp_count = attributes[:'ibgp_count']
      end

      if attributes.key?(:'igmp_access_list_count')
        self.igmp_access_list_count = attributes[:'igmp_access_list_count']
      end

      if attributes.key?(:'igmp_snoop')
        self.igmp_snoop = attributes[:'igmp_snoop']
      end

      if attributes.key?(:'ip_epg_count')
        self.ip_epg_count = attributes[:'ip_epg_count']
      end

      if attributes.key?(:'is_bgp_route_reflectors_feature_used')
        self.is_bgp_route_reflectors_feature_used = attributes[:'is_bgp_route_reflectors_feature_used']
      end

      if attributes.key?(:'is_bridge_domains_feature_used')
        self.is_bridge_domains_feature_used = attributes[:'is_bridge_domains_feature_used']
      end

      if attributes.key?(:'is_common_local_user_name')
        self.is_common_local_user_name = attributes[:'is_common_local_user_name']
      end

      if attributes.key?(:'is_contracts_feature_used')
        self.is_contracts_feature_used = attributes[:'is_contracts_feature_used']
      end

      if attributes.key?(:'is_epg_feature_used')
        self.is_epg_feature_used = attributes[:'is_epg_feature_used']
      end

      if attributes.key?(:'is_filters_feature_used')
        self.is_filters_feature_used = attributes[:'is_filters_feature_used']
      end

      if attributes.key?(:'is_http_configured')
        self.is_http_configured = attributes[:'is_http_configured']
      end

      if attributes.key?(:'is_https_configured')
        self.is_https_configured = attributes[:'is_https_configured']
      end

      if attributes.key?(:'is_ntp_feature_used')
        self.is_ntp_feature_used = attributes[:'is_ntp_feature_used']
      end

      if attributes.key?(:'is_ptp_feature_used')
        self.is_ptp_feature_used = attributes[:'is_ptp_feature_used']
      end

      if attributes.key?(:'is_synce_feature_used')
        self.is_synce_feature_used = attributes[:'is_synce_feature_used']
      end

      if attributes.key?(:'is_tech_support_collected')
        self.is_tech_support_collected = attributes[:'is_tech_support_collected']
      end

      if attributes.key?(:'is_tenants_feature_used')
        self.is_tenants_feature_used = attributes[:'is_tenants_feature_used']
      end

      if attributes.key?(:'is_vrfs_feature_used')
        self.is_vrfs_feature_used = attributes[:'is_vrfs_feature_used']
      end

      if attributes.key?(:'isis_count')
        self.isis_count = attributes[:'isis_count']
      end

      if attributes.key?(:'l2_multicast')
        self.l2_multicast = attributes[:'l2_multicast']
      end

      if attributes.key?(:'leaf_count')
        self.leaf_count = attributes[:'leaf_count']
      end

      if attributes.key?(:'local_username_count')
        self.local_username_count = attributes[:'local_username_count']
      end

      if attributes.key?(:'login_block_duration')
        self.login_block_duration = attributes[:'login_block_duration']
      end

      if attributes.key?(:'login_max_failed_attempts')
        self.login_max_failed_attempts = attributes[:'login_max_failed_attempts']
      end

      if attributes.key?(:'login_max_failed_attempts_window')
        self.login_max_failed_attempts_window = attributes[:'login_max_failed_attempts_window']
      end

      if attributes.key?(:'maintenance_mode_count')
        self.maintenance_mode_count = attributes[:'maintenance_mode_count']
      end

      if attributes.key?(:'management_over_v6_count')
        self.management_over_v6_count = attributes[:'management_over_v6_count']
      end

      if attributes.key?(:'microsoft_useg_vmm_ep_pd_count')
        self.microsoft_useg_vmm_ep_pd_count = attributes[:'microsoft_useg_vmm_ep_pd_count']
      end

      if attributes.key?(:'net_flow_count')
        self.net_flow_count = attributes[:'net_flow_count']
      end

      if attributes.key?(:'nir')
        self.nir = attributes[:'nir']
      end

      if attributes.key?(:'open_stack')
        self.open_stack = attributes[:'open_stack']
      end

      if attributes.key?(:'opflex_kubernetes_count')
        self.opflex_kubernetes_count = attributes[:'opflex_kubernetes_count']
      end

      if attributes.key?(:'ospf_count')
        self.ospf_count = attributes[:'ospf_count']
      end

      if attributes.key?(:'password_history_count')
        self.password_history_count = attributes[:'password_history_count']
      end

      if attributes.key?(:'password_strength_check')
        self.password_strength_check = attributes[:'password_strength_check']
      end

      if attributes.key?(:'password_strength_profile_count')
        self.password_strength_profile_count = attributes[:'password_strength_profile_count']
      end

      if attributes.key?(:'poe_count')
        self.poe_count = attributes[:'poe_count']
      end

      if attributes.key?(:'port_security_count')
        self.port_security_count = attributes[:'port_security_count']
      end

      if attributes.key?(:'qin_vni_tunnel_count')
        self.qin_vni_tunnel_count = attributes[:'qin_vni_tunnel_count']
      end

      if attributes.key?(:'qos_cong_count')
        self.qos_cong_count = attributes[:'qos_cong_count']
      end

      if attributes.key?(:'qos_pfc_pol_count')
        self.qos_pfc_pol_count = attributes[:'qos_pfc_pol_count']
      end

      if attributes.key?(:'realm_count')
        self.realm_count = attributes[:'realm_count']
      end

      if attributes.key?(:'record_type')
        self.record_type = attributes[:'record_type']
      end

      if attributes.key?(:'record_version')
        self.record_version = attributes[:'record_version']
      end

      if attributes.key?(:'remote_leaf_count')
        self.remote_leaf_count = attributes[:'remote_leaf_count']
      end

      if attributes.key?(:'scvmm_count')
        self.scvmm_count = attributes[:'scvmm_count']
      end

      if attributes.key?(:'shared_l3_out_count')
        self.shared_l3_out_count = attributes[:'shared_l3_out_count']
      end

      if attributes.key?(:'site_name')
        self.site_name = attributes[:'site_name']
      end

      if attributes.key?(:'smart_call_home')
        self.smart_call_home = attributes[:'smart_call_home']
      end

      if attributes.key?(:'smart_license')
        self.smart_license = attributes[:'smart_license']
      end

      if attributes.key?(:'snapshot_count')
        self.snapshot_count = attributes[:'snapshot_count']
      end

      if attributes.key?(:'snmp')
        self.snmp = attributes[:'snmp']
      end

      if attributes.key?(:'snmp_community_access_count')
        self.snmp_community_access_count = attributes[:'snmp_community_access_count']
      end

      if attributes.key?(:'snmp_group_count')
        self.snmp_group_count = attributes[:'snmp_group_count']
      end

      if attributes.key?(:'snmp_trap_count')
        self.snmp_trap_count = attributes[:'snmp_trap_count']
      end

      if attributes.key?(:'snmp_v3_count')
        self.snmp_v3_count = attributes[:'snmp_v3_count']
      end

      if attributes.key?(:'span_count')
        self.span_count = attributes[:'span_count']
      end

      if attributes.key?(:'span_dst_count')
        self.span_dst_count = attributes[:'span_dst_count']
      end

      if attributes.key?(:'span_src_count')
        self.span_src_count = attributes[:'span_src_count']
      end

      if attributes.key?(:'spine_count')
        self.spine_count = attributes[:'spine_count']
      end

      if attributes.key?(:'ssh_over_v6_count')
        self.ssh_over_v6_count = attributes[:'ssh_over_v6_count']
      end

      if attributes.key?(:'ssh_v2_count')
        self.ssh_v2_count = attributes[:'ssh_v2_count']
      end

      if attributes.key?(:'supervisor_module_count')
        self.supervisor_module_count = attributes[:'supervisor_module_count']
      end

      if attributes.key?(:'syslog_group_count')
        self.syslog_group_count = attributes[:'syslog_group_count']
      end

      if attributes.key?(:'syslog_over_v6_count')
        self.syslog_over_v6_count = attributes[:'syslog_over_v6_count']
      end

      if attributes.key?(:'system_controller_count')
        self.system_controller_count = attributes[:'system_controller_count']
      end

      if attributes.key?(:'tacacs_group_count')
        self.tacacs_group_count = attributes[:'tacacs_group_count']
      end

      if attributes.key?(:'tenant_count')
        self.tenant_count = attributes[:'tenant_count']
      end

      if attributes.key?(:'tier_two_leaf_count')
        self.tier_two_leaf_count = attributes[:'tier_two_leaf_count']
      end

      if attributes.key?(:'total_critical_faults')
        self.total_critical_faults = attributes[:'total_critical_faults']
      end

      if attributes.key?(:'twamp')
        self.twamp = attributes[:'twamp']
      end

      if attributes.key?(:'useg')
        self.useg = attributes[:'useg']
      end

      if attributes.key?(:'vm_ware_vds_count')
        self.vm_ware_vds_count = attributes[:'vm_ware_vds_count']
      end

      if attributes.key?(:'vmm_ctrlrp_count')
        self.vmm_ctrlrp_count = attributes[:'vmm_ctrlrp_count']
      end

      if attributes.key?(:'vmm_domp_count')
        self.vmm_domp_count = attributes[:'vmm_domp_count']
      end

      if attributes.key?(:'vmm_ep_pd_count')
        self.vmm_ep_pd_count = attributes[:'vmm_ep_pd_count']
      end

      if attributes.key?(:'vnsm_dev_count')
        self.vnsm_dev_count = attributes[:'vnsm_dev_count']
      end

      if attributes.key?(:'vpod_count')
        self.vpod_count = attributes[:'vpod_count']
      end

      if attributes.key?(:'webtoken_timeout_seconds')
        self.webtoken_timeout_seconds = attributes[:'webtoken_timeout_seconds']
      end

      if attributes.key?(:'registered_device')
        self.registered_device = attributes[:'registered_device']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @class_id.nil?
        invalid_properties.push('invalid value for "class_id", class_id cannot be nil.')
      end

      if @object_type.nil?
        invalid_properties.push('invalid value for "object_type", object_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @class_id.nil?
      class_id_validator = EnumAttributeValidator.new('String', ["niatelemetry.NiaFeatureUsage"])
      return false unless class_id_validator.valid?(@class_id)
      return false if @object_type.nil?
      object_type_validator = EnumAttributeValidator.new('String', ["niatelemetry.NiaFeatureUsage"])
      return false unless object_type_validator.valid?(@object_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] class_id Object to be assigned
    def class_id=(class_id)
      validator = EnumAttributeValidator.new('String', ["niatelemetry.NiaFeatureUsage"])
      unless validator.valid?(class_id)
        fail ArgumentError, "invalid value for \"class_id\", must be one of #{validator.allowable_values}."
      end
      @class_id = class_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object_type Object to be assigned
    def object_type=(object_type)
      validator = EnumAttributeValidator.new('String', ["niatelemetry.NiaFeatureUsage"])
      unless validator.valid?(object_type)
        fail ArgumentError, "invalid value for \"object_type\", must be one of #{validator.allowable_values}."
      end
      @object_type = object_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          class_id == o.class_id &&
          object_type == o.object_type &&
          aaa_ldap_provider_count == o.aaa_ldap_provider_count &&
          aaa_radius_provider_count == o.aaa_radius_provider_count &&
          aaa_tacacs_provider_count == o.aaa_tacacs_provider_count &&
          apic_count == o.apic_count &&
          apic_is_telnet_enabled == o.apic_is_telnet_enabled &&
          apic_ntp_count == o.apic_ntp_count &&
          apic_snmp_community_count == o.apic_snmp_community_count &&
          apic_sys_log_grp_count == o.apic_sys_log_grp_count &&
          apic_sys_log_src_count == o.apic_sys_log_src_count &&
          app_center_count == o.app_center_count &&
          ave == o.ave &&
          bd_count == o.bd_count &&
          callhome_smart_group_count == o.callhome_smart_group_count &&
          cloud_sec_peer_count == o.cloud_sec_peer_count &&
          comp_hv_count == o.comp_hv_count &&
          config_exportp_count == o.config_exportp_count &&
          config_job_count == o.config_job_count &&
          consistency_checker_app == o.consistency_checker_app &&
          contract_count == o.contract_count &&
          dns_count == o.dns_count &&
          eigrp_count == o.eigrp_count &&
          epg_count == o.epg_count &&
          fabric_module_count == o.fabric_module_count &&
          fabric_setupp_count == o.fabric_setupp_count &&
          fcoe_nport_count == o.fcoe_nport_count &&
          fcoe_nport_dom_count == o.fcoe_nport_dom_count &&
          fcoe_nport_vlan_count == o.fcoe_nport_vlan_count &&
          fcoe_nport_vsan_count == o.fcoe_nport_vsan_count &&
          fv_sla_def_count == o.fv_sla_def_count &&
          hsrp_count == o.hsrp_count &&
          ibgp_count == o.ibgp_count &&
          igmp_access_list_count == o.igmp_access_list_count &&
          igmp_snoop == o.igmp_snoop &&
          ip_epg_count == o.ip_epg_count &&
          is_bgp_route_reflectors_feature_used == o.is_bgp_route_reflectors_feature_used &&
          is_bridge_domains_feature_used == o.is_bridge_domains_feature_used &&
          is_common_local_user_name == o.is_common_local_user_name &&
          is_contracts_feature_used == o.is_contracts_feature_used &&
          is_epg_feature_used == o.is_epg_feature_used &&
          is_filters_feature_used == o.is_filters_feature_used &&
          is_http_configured == o.is_http_configured &&
          is_https_configured == o.is_https_configured &&
          is_ntp_feature_used == o.is_ntp_feature_used &&
          is_ptp_feature_used == o.is_ptp_feature_used &&
          is_synce_feature_used == o.is_synce_feature_used &&
          is_tech_support_collected == o.is_tech_support_collected &&
          is_tenants_feature_used == o.is_tenants_feature_used &&
          is_vrfs_feature_used == o.is_vrfs_feature_used &&
          isis_count == o.isis_count &&
          l2_multicast == o.l2_multicast &&
          leaf_count == o.leaf_count &&
          local_username_count == o.local_username_count &&
          login_block_duration == o.login_block_duration &&
          login_max_failed_attempts == o.login_max_failed_attempts &&
          login_max_failed_attempts_window == o.login_max_failed_attempts_window &&
          maintenance_mode_count == o.maintenance_mode_count &&
          management_over_v6_count == o.management_over_v6_count &&
          microsoft_useg_vmm_ep_pd_count == o.microsoft_useg_vmm_ep_pd_count &&
          net_flow_count == o.net_flow_count &&
          nir == o.nir &&
          open_stack == o.open_stack &&
          opflex_kubernetes_count == o.opflex_kubernetes_count &&
          ospf_count == o.ospf_count &&
          password_history_count == o.password_history_count &&
          password_strength_check == o.password_strength_check &&
          password_strength_profile_count == o.password_strength_profile_count &&
          poe_count == o.poe_count &&
          port_security_count == o.port_security_count &&
          qin_vni_tunnel_count == o.qin_vni_tunnel_count &&
          qos_cong_count == o.qos_cong_count &&
          qos_pfc_pol_count == o.qos_pfc_pol_count &&
          realm_count == o.realm_count &&
          record_type == o.record_type &&
          record_version == o.record_version &&
          remote_leaf_count == o.remote_leaf_count &&
          scvmm_count == o.scvmm_count &&
          shared_l3_out_count == o.shared_l3_out_count &&
          site_name == o.site_name &&
          smart_call_home == o.smart_call_home &&
          smart_license == o.smart_license &&
          snapshot_count == o.snapshot_count &&
          snmp == o.snmp &&
          snmp_community_access_count == o.snmp_community_access_count &&
          snmp_group_count == o.snmp_group_count &&
          snmp_trap_count == o.snmp_trap_count &&
          snmp_v3_count == o.snmp_v3_count &&
          span_count == o.span_count &&
          span_dst_count == o.span_dst_count &&
          span_src_count == o.span_src_count &&
          spine_count == o.spine_count &&
          ssh_over_v6_count == o.ssh_over_v6_count &&
          ssh_v2_count == o.ssh_v2_count &&
          supervisor_module_count == o.supervisor_module_count &&
          syslog_group_count == o.syslog_group_count &&
          syslog_over_v6_count == o.syslog_over_v6_count &&
          system_controller_count == o.system_controller_count &&
          tacacs_group_count == o.tacacs_group_count &&
          tenant_count == o.tenant_count &&
          tier_two_leaf_count == o.tier_two_leaf_count &&
          total_critical_faults == o.total_critical_faults &&
          twamp == o.twamp &&
          useg == o.useg &&
          vm_ware_vds_count == o.vm_ware_vds_count &&
          vmm_ctrlrp_count == o.vmm_ctrlrp_count &&
          vmm_domp_count == o.vmm_domp_count &&
          vmm_ep_pd_count == o.vmm_ep_pd_count &&
          vnsm_dev_count == o.vnsm_dev_count &&
          vpod_count == o.vpod_count &&
          webtoken_timeout_seconds == o.webtoken_timeout_seconds &&
          registered_device == o.registered_device
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [class_id, object_type, aaa_ldap_provider_count, aaa_radius_provider_count, aaa_tacacs_provider_count, apic_count, apic_is_telnet_enabled, apic_ntp_count, apic_snmp_community_count, apic_sys_log_grp_count, apic_sys_log_src_count, app_center_count, ave, bd_count, callhome_smart_group_count, cloud_sec_peer_count, comp_hv_count, config_exportp_count, config_job_count, consistency_checker_app, contract_count, dns_count, eigrp_count, epg_count, fabric_module_count, fabric_setupp_count, fcoe_nport_count, fcoe_nport_dom_count, fcoe_nport_vlan_count, fcoe_nport_vsan_count, fv_sla_def_count, hsrp_count, ibgp_count, igmp_access_list_count, igmp_snoop, ip_epg_count, is_bgp_route_reflectors_feature_used, is_bridge_domains_feature_used, is_common_local_user_name, is_contracts_feature_used, is_epg_feature_used, is_filters_feature_used, is_http_configured, is_https_configured, is_ntp_feature_used, is_ptp_feature_used, is_synce_feature_used, is_tech_support_collected, is_tenants_feature_used, is_vrfs_feature_used, isis_count, l2_multicast, leaf_count, local_username_count, login_block_duration, login_max_failed_attempts, login_max_failed_attempts_window, maintenance_mode_count, management_over_v6_count, microsoft_useg_vmm_ep_pd_count, net_flow_count, nir, open_stack, opflex_kubernetes_count, ospf_count, password_history_count, password_strength_check, password_strength_profile_count, poe_count, port_security_count, qin_vni_tunnel_count, qos_cong_count, qos_pfc_pol_count, realm_count, record_type, record_version, remote_leaf_count, scvmm_count, shared_l3_out_count, site_name, smart_call_home, smart_license, snapshot_count, snmp, snmp_community_access_count, snmp_group_count, snmp_trap_count, snmp_v3_count, span_count, span_dst_count, span_src_count, spine_count, ssh_over_v6_count, ssh_v2_count, supervisor_module_count, syslog_group_count, syslog_over_v6_count, system_controller_count, tacacs_group_count, tenant_count, tier_two_leaf_count, total_critical_faults, twamp, useg, vm_ware_vds_count, vmm_ctrlrp_count, vmm_domp_count, vmm_ep_pd_count, vnsm_dev_count, vpod_count, webtoken_timeout_seconds, registered_device].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      NiatelemetryNiaFeatureUsageAllOf.openapi_types.each_pair do |key, type|
        if attributes[NiatelemetryNiaFeatureUsageAllOf.attribute_map[key]].nil? && NiatelemetryNiaFeatureUsageAllOf.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[NiatelemetryNiaFeatureUsageAllOf.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[NiatelemetryNiaFeatureUsageAllOf.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[NiatelemetryNiaFeatureUsageAllOf.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[NiatelemetryNiaFeatureUsageAllOf.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IntersightClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      NiatelemetryNiaFeatureUsageAllOf.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = NiatelemetryNiaFeatureUsageAllOf.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end

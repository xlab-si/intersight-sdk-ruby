=begin
#Cisco Intersight

#Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-10-20T11:22:53Z.

The version of the OpenAPI document: 1.0.9-4870
Contact: intersight@cisco.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'date'
require 'time'

module IntersightClient
  # Definition of the list of properties defined in 'vmedia.Mapping', excluding properties defined in parent classes.
  class VmediaMappingAllOf
    # The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
    attr_accessor :class_id

    # The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
    attr_accessor :object_type

    # Type of Authentication protocol when CIFS is used for communication with the remote server. * `none` - No authentication is used. * `ntlm` - NT LAN Manager (NTLM) security protocol. Use this option only with Windows 2008 R2 and Windows 2012 R2. * `ntlmi` - NTLMi security protocol. Use this option only when you enable Digital Signing in the CIFS Windows server. * `ntlmv2` - NTLMv2 security protocol. Use this option only with Samba Linux. * `ntlmv2i` - NTLMv2i security protocol. Use this option only with Samba Linux. * `ntlmssp` - NT LAN Manager Security Support Provider (NTLMSSP) protocol. Use this option only with Windows 2008 R2 and Windows 2012 R2. * `ntlmsspi` - NTLMSSPi protocol. Use this option only when you enable Digital Signing in the CIFS Windows server.
    attr_accessor :authentication_protocol

    # Type of remote Virtual Media device. * `cdd` - Uses compact disc drive as the virtual media mount device. * `hdd` - Uses hard disk drive as the virtual media mount device.
    attr_accessor :device_type

    # Remote location of image. Preferred format is 'hostname/filePath/fileName'.
    attr_accessor :file_location

    # IP address or hostname of the remote server.
    attr_accessor :host_name

    # Indicates whether the value of the 'password' property has been set.
    attr_accessor :is_password_set

    # Mount options for the Virtual Media mapping. The field can be left blank or filled in a comma separated list with the following options.\\n For NFS, supported options are ro, rw, nolock, noexec, soft, port=VALUE, timeo=VALUE, retry=VALUE.\\n For CIFS, supported options are soft, nounix, noserverino, guest.\\n For CIFS version < 3.0, vers=VALUE is mandatory. e.g. vers=2.0\\n For HTTP/HTTPS, the only supported option is noauto.
    attr_accessor :mount_options

    # Protocol to use to communicate with the remote server. * `nfs` - NFS protocol for vmedia mount. * `cifs` - CIFS protocol for vmedia mount. * `http` - HTTP protocol for vmedia mount. * `https` - HTTPS protocol for vmedia mount.
    attr_accessor :mount_protocol

    # Password associated with the username.
    attr_accessor :password

    # The remote file location path for the virtual media mapping. Accepted formats are: HDD for CIFS/NFS: hostname-or-IP/filePath/fileName.img. CDD for CIFS/NFS: hostname-or-IP/filePath/fileName.iso. HDD for HTTP/S: http[s]://hostname-or-IP/filePath/fileName.img. CDD for HTTP/S: http[s]://hostname-or-IP/filePath/fileName.iso.
    attr_accessor :remote_file

    # URL path to the location of the image on the remote server. The preferred format is '/path'.
    attr_accessor :remote_path

    # File Location in standard format 'hostname/filePath/fileName'. This field should be used to calculate config drift. User input format may vary while inventory will return data in format in compliance with mount option for the mount. Both will be converged to this standard format for comparison.
    attr_accessor :sanitized_file_location

    # Username to log in to the remote server.
    attr_accessor :username

    # Identity of the image for Virtual Media mapping.
    attr_accessor :volume_name

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'class_id' => :'ClassId',
        :'object_type' => :'ObjectType',
        :'authentication_protocol' => :'AuthenticationProtocol',
        :'device_type' => :'DeviceType',
        :'file_location' => :'FileLocation',
        :'host_name' => :'HostName',
        :'is_password_set' => :'IsPasswordSet',
        :'mount_options' => :'MountOptions',
        :'mount_protocol' => :'MountProtocol',
        :'password' => :'Password',
        :'remote_file' => :'RemoteFile',
        :'remote_path' => :'RemotePath',
        :'sanitized_file_location' => :'SanitizedFileLocation',
        :'username' => :'Username',
        :'volume_name' => :'VolumeName'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'class_id' => :'String',
        :'object_type' => :'String',
        :'authentication_protocol' => :'String',
        :'device_type' => :'String',
        :'file_location' => :'String',
        :'host_name' => :'String',
        :'is_password_set' => :'Boolean',
        :'mount_options' => :'String',
        :'mount_protocol' => :'String',
        :'password' => :'String',
        :'remote_file' => :'String',
        :'remote_path' => :'String',
        :'sanitized_file_location' => :'String',
        :'username' => :'String',
        :'volume_name' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IntersightClient::VmediaMappingAllOf` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IntersightClient::VmediaMappingAllOf`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'class_id')
        self.class_id = attributes[:'class_id']
      else
        self.class_id = 'vmedia.Mapping'
      end

      if attributes.key?(:'object_type')
        self.object_type = attributes[:'object_type']
      else
        self.object_type = 'vmedia.Mapping'
      end

      if attributes.key?(:'authentication_protocol')
        self.authentication_protocol = attributes[:'authentication_protocol']
      else
        self.authentication_protocol = 'none'
      end

      if attributes.key?(:'device_type')
        self.device_type = attributes[:'device_type']
      else
        self.device_type = 'cdd'
      end

      if attributes.key?(:'file_location')
        self.file_location = attributes[:'file_location']
      end

      if attributes.key?(:'host_name')
        self.host_name = attributes[:'host_name']
      end

      if attributes.key?(:'is_password_set')
        self.is_password_set = attributes[:'is_password_set']
      else
        self.is_password_set = false
      end

      if attributes.key?(:'mount_options')
        self.mount_options = attributes[:'mount_options']
      end

      if attributes.key?(:'mount_protocol')
        self.mount_protocol = attributes[:'mount_protocol']
      else
        self.mount_protocol = 'nfs'
      end

      if attributes.key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.key?(:'remote_file')
        self.remote_file = attributes[:'remote_file']
      end

      if attributes.key?(:'remote_path')
        self.remote_path = attributes[:'remote_path']
      end

      if attributes.key?(:'sanitized_file_location')
        self.sanitized_file_location = attributes[:'sanitized_file_location']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.key?(:'volume_name')
        self.volume_name = attributes[:'volume_name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @class_id.nil?
        invalid_properties.push('invalid value for "class_id", class_id cannot be nil.')
      end

      if @object_type.nil?
        invalid_properties.push('invalid value for "object_type", object_type cannot be nil.')
      end

      if !@mount_options.nil? && @mount_options.to_s.length > 248
        invalid_properties.push('invalid value for "mount_options", the character length must be smaller than or equal to 248.')
      end

      if !@mount_options.nil? && @mount_options.to_s.length < 0
        invalid_properties.push('invalid value for "mount_options", the character length must be great than or equal to 0.')
      end

      if !@password.nil? && @password.to_s.length > 255
        invalid_properties.push('invalid value for "password", the character length must be smaller than or equal to 255.')
      end

      if !@password.nil? && @password.to_s.length < 0
        invalid_properties.push('invalid value for "password", the character length must be great than or equal to 0.')
      end

      if !@remote_file.nil? && @remote_file.to_s.length > 235
        invalid_properties.push('invalid value for "remote_file", the character length must be smaller than or equal to 235.')
      end

      if !@remote_file.nil? && @remote_file.to_s.length < 0
        invalid_properties.push('invalid value for "remote_file", the character length must be great than or equal to 0.')
      end

      pattern = Regexp.new(/^$|^[ !#$%\(\)\+,\-\.:\?@\[\]_\{\}=~a-zA-Z0-9]+$/)
      if !@remote_file.nil? && @remote_file !~ pattern
        invalid_properties.push("invalid value for \"remote_file\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^$|^[ !#$%\(\)\+,\-\.\/:\?@\[\]_\{\}=~a-zA-Z0-9]+$/)
      if !@remote_path.nil? && @remote_path !~ pattern
        invalid_properties.push("invalid value for \"remote_path\", must conform to the pattern #{pattern}.")
      end

      if !@username.nil? && @username.to_s.length > 255
        invalid_properties.push('invalid value for "username", the character length must be smaller than or equal to 255.')
      end

      if !@username.nil? && @username.to_s.length < 0
        invalid_properties.push('invalid value for "username", the character length must be great than or equal to 0.')
      end

      if !@volume_name.nil? && @volume_name.to_s.length > 47
        invalid_properties.push('invalid value for "volume_name", the character length must be smaller than or equal to 47.')
      end

      if !@volume_name.nil? && @volume_name.to_s.length < 1
        invalid_properties.push('invalid value for "volume_name", the character length must be great than or equal to 1.')
      end

      pattern = Regexp.new(/^[\-\.:_a-zA-Z0-9]+$/)
      if !@volume_name.nil? && @volume_name !~ pattern
        invalid_properties.push("invalid value for \"volume_name\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @class_id.nil?
      class_id_validator = EnumAttributeValidator.new('String', ["vmedia.Mapping"])
      return false unless class_id_validator.valid?(@class_id)
      return false if @object_type.nil?
      object_type_validator = EnumAttributeValidator.new('String', ["vmedia.Mapping"])
      return false unless object_type_validator.valid?(@object_type)
      authentication_protocol_validator = EnumAttributeValidator.new('String', ["none", "ntlm", "ntlmi", "ntlmv2", "ntlmv2i", "ntlmssp", "ntlmsspi"])
      return false unless authentication_protocol_validator.valid?(@authentication_protocol)
      device_type_validator = EnumAttributeValidator.new('String', ["cdd", "hdd"])
      return false unless device_type_validator.valid?(@device_type)
      return false if !@mount_options.nil? && @mount_options.to_s.length > 248
      return false if !@mount_options.nil? && @mount_options.to_s.length < 0
      mount_protocol_validator = EnumAttributeValidator.new('String', ["nfs", "cifs", "http", "https"])
      return false unless mount_protocol_validator.valid?(@mount_protocol)
      return false if !@password.nil? && @password.to_s.length > 255
      return false if !@password.nil? && @password.to_s.length < 0
      return false if !@remote_file.nil? && @remote_file.to_s.length > 235
      return false if !@remote_file.nil? && @remote_file.to_s.length < 0
      return false if !@remote_file.nil? && @remote_file !~ Regexp.new(/^$|^[ !#$%\(\)\+,\-\.:\?@\[\]_\{\}=~a-zA-Z0-9]+$/)
      return false if !@remote_path.nil? && @remote_path !~ Regexp.new(/^$|^[ !#$%\(\)\+,\-\.\/:\?@\[\]_\{\}=~a-zA-Z0-9]+$/)
      return false if !@username.nil? && @username.to_s.length > 255
      return false if !@username.nil? && @username.to_s.length < 0
      return false if !@volume_name.nil? && @volume_name.to_s.length > 47
      return false if !@volume_name.nil? && @volume_name.to_s.length < 1
      return false if !@volume_name.nil? && @volume_name !~ Regexp.new(/^[\-\.:_a-zA-Z0-9]+$/)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] class_id Object to be assigned
    def class_id=(class_id)
      validator = EnumAttributeValidator.new('String', ["vmedia.Mapping"])
      unless validator.valid?(class_id)
        fail ArgumentError, "invalid value for \"class_id\", must be one of #{validator.allowable_values}."
      end
      @class_id = class_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object_type Object to be assigned
    def object_type=(object_type)
      validator = EnumAttributeValidator.new('String', ["vmedia.Mapping"])
      unless validator.valid?(object_type)
        fail ArgumentError, "invalid value for \"object_type\", must be one of #{validator.allowable_values}."
      end
      @object_type = object_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authentication_protocol Object to be assigned
    def authentication_protocol=(authentication_protocol)
      validator = EnumAttributeValidator.new('String', ["none", "ntlm", "ntlmi", "ntlmv2", "ntlmv2i", "ntlmssp", "ntlmsspi"])
      unless validator.valid?(authentication_protocol)
        fail ArgumentError, "invalid value for \"authentication_protocol\", must be one of #{validator.allowable_values}."
      end
      @authentication_protocol = authentication_protocol
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] device_type Object to be assigned
    def device_type=(device_type)
      validator = EnumAttributeValidator.new('String', ["cdd", "hdd"])
      unless validator.valid?(device_type)
        fail ArgumentError, "invalid value for \"device_type\", must be one of #{validator.allowable_values}."
      end
      @device_type = device_type
    end

    # Custom attribute writer method with validation
    # @param [Object] mount_options Value to be assigned
    def mount_options=(mount_options)
      if !mount_options.nil? && mount_options.to_s.length > 248
        fail ArgumentError, 'invalid value for "mount_options", the character length must be smaller than or equal to 248.'
      end

      if !mount_options.nil? && mount_options.to_s.length < 0
        fail ArgumentError, 'invalid value for "mount_options", the character length must be great than or equal to 0.'
      end

      @mount_options = mount_options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mount_protocol Object to be assigned
    def mount_protocol=(mount_protocol)
      validator = EnumAttributeValidator.new('String', ["nfs", "cifs", "http", "https"])
      unless validator.valid?(mount_protocol)
        fail ArgumentError, "invalid value for \"mount_protocol\", must be one of #{validator.allowable_values}."
      end
      @mount_protocol = mount_protocol
    end

    # Custom attribute writer method with validation
    # @param [Object] password Value to be assigned
    def password=(password)
      if !password.nil? && password.to_s.length > 255
        fail ArgumentError, 'invalid value for "password", the character length must be smaller than or equal to 255.'
      end

      if !password.nil? && password.to_s.length < 0
        fail ArgumentError, 'invalid value for "password", the character length must be great than or equal to 0.'
      end

      @password = password
    end

    # Custom attribute writer method with validation
    # @param [Object] remote_file Value to be assigned
    def remote_file=(remote_file)
      if !remote_file.nil? && remote_file.to_s.length > 235
        fail ArgumentError, 'invalid value for "remote_file", the character length must be smaller than or equal to 235.'
      end

      if !remote_file.nil? && remote_file.to_s.length < 0
        fail ArgumentError, 'invalid value for "remote_file", the character length must be great than or equal to 0.'
      end

      pattern = Regexp.new(/^$|^[ !#$%\(\)\+,\-\.:\?@\[\]_\{\}=~a-zA-Z0-9]+$/)
      if !remote_file.nil? && remote_file !~ pattern
        fail ArgumentError, "invalid value for \"remote_file\", must conform to the pattern #{pattern}."
      end

      @remote_file = remote_file
    end

    # Custom attribute writer method with validation
    # @param [Object] remote_path Value to be assigned
    def remote_path=(remote_path)
      pattern = Regexp.new(/^$|^[ !#$%\(\)\+,\-\.\/:\?@\[\]_\{\}=~a-zA-Z0-9]+$/)
      if !remote_path.nil? && remote_path !~ pattern
        fail ArgumentError, "invalid value for \"remote_path\", must conform to the pattern #{pattern}."
      end

      @remote_path = remote_path
    end

    # Custom attribute writer method with validation
    # @param [Object] username Value to be assigned
    def username=(username)
      if !username.nil? && username.to_s.length > 255
        fail ArgumentError, 'invalid value for "username", the character length must be smaller than or equal to 255.'
      end

      if !username.nil? && username.to_s.length < 0
        fail ArgumentError, 'invalid value for "username", the character length must be great than or equal to 0.'
      end

      @username = username
    end

    # Custom attribute writer method with validation
    # @param [Object] volume_name Value to be assigned
    def volume_name=(volume_name)
      if !volume_name.nil? && volume_name.to_s.length > 47
        fail ArgumentError, 'invalid value for "volume_name", the character length must be smaller than or equal to 47.'
      end

      if !volume_name.nil? && volume_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "volume_name", the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[\-\.:_a-zA-Z0-9]+$/)
      if !volume_name.nil? && volume_name !~ pattern
        fail ArgumentError, "invalid value for \"volume_name\", must conform to the pattern #{pattern}."
      end

      @volume_name = volume_name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          class_id == o.class_id &&
          object_type == o.object_type &&
          authentication_protocol == o.authentication_protocol &&
          device_type == o.device_type &&
          file_location == o.file_location &&
          host_name == o.host_name &&
          is_password_set == o.is_password_set &&
          mount_options == o.mount_options &&
          mount_protocol == o.mount_protocol &&
          password == o.password &&
          remote_file == o.remote_file &&
          remote_path == o.remote_path &&
          sanitized_file_location == o.sanitized_file_location &&
          username == o.username &&
          volume_name == o.volume_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [class_id, object_type, authentication_protocol, device_type, file_location, host_name, is_password_set, mount_options, mount_protocol, password, remote_file, remote_path, sanitized_file_location, username, volume_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      VmediaMappingAllOf.openapi_types.each_pair do |key, type|
        if attributes[VmediaMappingAllOf.attribute_map[key]].nil? && VmediaMappingAllOf.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[VmediaMappingAllOf.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[VmediaMappingAllOf.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[VmediaMappingAllOf.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[VmediaMappingAllOf.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IntersightClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      VmediaMappingAllOf.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = VmediaMappingAllOf.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end

=begin
#Cisco Intersight

#Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-10-20T11:22:53Z.

The version of the OpenAPI document: 1.0.9-4870
Contact: intersight@cisco.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'date'
require 'time'

module IntersightClient
  # The query context is used for various query configuration parameters. Can be used to modify query behavior, including grand totals and zero-filling.
  class TelemetryDruidQueryContext
    # Druid can include an extra \"grand totals\" row as the last row of a timeseries result set. To enable this, set \"grandTotal\" to true. The grand totals row will appear as the last row in the result array, and will have no timestamp. It will be the last row even if the query is run in \"descending\" mode. Post-aggregations in the grand totals row will be computed based upon the grand total aggregations.
    attr_accessor :grand_total

    # Timeseries queries normally fill empty interior time buckets with zeroes. Time buckets that lie completely outside the data interval are not zero-filled. You can disable all zero-filling with this flag. In this mode, the data point for empty buckets are omitted from the results.
    attr_accessor :skip_empty_buckets

    # Query timeout in milliseconds, beyond which unfinished queries will be cancelled. 0 timeout means no timeout.
    attr_accessor :timeout

    # Query Priority. Queries with higher priority get precedence for computational resources.
    attr_accessor :priority

    # Unique identifier given to this query. If a query ID is set or known, this can be used to cancel the query.
    attr_accessor :query_id

    # Flag indicating whether to leverage the query cache for this query. When set to false, it disables reading from the query cache for this query. When set to true, Apache Druid uses druid.broker.cache.useCache or druid.historical.cache.useCache to determine whether or not to read from the query cache.
    attr_accessor :use_cache

    # Flag indicating whether to save the results of the query to the query cache. Primarily used for debugging. When set to false, it disables saving the results of this query to the query cache. When set to true, Druid uses druid.broker.cache.populateCache or druid.historical.cache.populateCache to determine whether or not to save the results of this query to the query cache.
    attr_accessor :populate_cache

    # Flag indicating whether to leverage the result level cache for this query. When set to false, it disables reading from the query cache for this query. When set to true, Druid uses druid.broker.cache.useResultLevelCache to determine whether or not to read from the result-level query cache.
    attr_accessor :use_result_level_cache

    # Flag indicating whether to save the results of the query to the result level cache. Primarily used for debugging. When set to false, it disables saving the results of this query to the query cache. When set to true, Druid uses druid.broker.cache.populateResultLevelCache to determine whether or not to save the results of this query to the result-level query cache.
    attr_accessor :populate_result_level_cache

    # Return \"by segment\" results. Primarily used for debugging, setting it to true returns results associated with the data segment they came from.
    attr_accessor :by_segment

    # Flag indicating whether to \"finalize\" aggregation results. Primarily used for debugging. For instance, the hyperUnique aggregator will return the full HyperLogLog sketch instead of the estimated cardinality when this flag is set to false.
    attr_accessor :finalize

    # At the Broker process level, long interval queries (of any type) may be broken into shorter interval queries to parallelize merging more than normal. Broken up queries will use a larger share of cluster resources, but, if you use groupBy \"v1, it may be able to complete faster as a result. Use ISO 8601 periods. For example, if this property is set to P1M (one month), then a query covering a year would be broken into 12 smaller queries. The broker uses its query processing executor service to initiate processing for query chunks, so make sure druid.processing.numThreads is configured appropriately on the broker. groupBy queries do not support chunkPeriod by default, although they do if using the legacy \"v1\" engine. This context is deprecated since it's only useful for groupBy \"v1\", and will be removed in the future releases.
    attr_accessor :chunk_period

    # Maximum number of bytes gathered from data processes such as Historicals and realtime processes to execute a query. This parameter can be used to further reduce maxScatterGatherBytes limit at query time.
    attr_accessor :max_scatter_gather_bytes

    # Maximum number of bytes queued per query before exerting backpressure on the channel to the data server. Similar to maxScatterGatherBytes, except unlike that configuration, this one will trigger backpressure rather than query failure. Zero means disabled.
    attr_accessor :max_queued_bytes

    # If true, DateTime is serialized as long in the result returned by Broker and the data transportation between Broker and compute process.
    attr_accessor :serialize_date_time_as_long

    # If true, DateTime is serialized as long in the data transportation between Broker and compute process.
    attr_accessor :serialize_date_time_as_long_inner

    # Enable parallel result merging on the Broker. Note that druid.processing.merge.useParallelMergePool must be enabled for this setting to be set to true.
    attr_accessor :enable_parallel_merge

    # Maximum number of parallel threads to use for parallel result merging on the Broker.
    attr_accessor :parallel_merge_parallelism

    # Number of rows to yield per ForkJoinPool merge task for parallel result merging on the Broker, before forking off a new task to continue merging sequences.
    attr_accessor :parallel_merge_initial_yield_rows

    # Size of result batches to operate on in ForkJoinPool merge tasks for parallel result merging on the Broker.
    attr_accessor :parallel_merge_small_batch_rows

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'grand_total' => :'grandTotal',
        :'skip_empty_buckets' => :'skipEmptyBuckets',
        :'timeout' => :'timeout',
        :'priority' => :'priority',
        :'query_id' => :'queryId',
        :'use_cache' => :'useCache',
        :'populate_cache' => :'populateCache',
        :'use_result_level_cache' => :'useResultLevelCache',
        :'populate_result_level_cache' => :'populateResultLevelCache',
        :'by_segment' => :'bySegment',
        :'finalize' => :'finalize',
        :'chunk_period' => :'chunkPeriod',
        :'max_scatter_gather_bytes' => :'maxScatterGatherBytes',
        :'max_queued_bytes' => :'maxQueuedBytes',
        :'serialize_date_time_as_long' => :'serializeDateTimeAsLong',
        :'serialize_date_time_as_long_inner' => :'serializeDateTimeAsLongInner',
        :'enable_parallel_merge' => :'enableParallelMerge',
        :'parallel_merge_parallelism' => :'parallelMergeParallelism',
        :'parallel_merge_initial_yield_rows' => :'parallelMergeInitialYieldRows',
        :'parallel_merge_small_batch_rows' => :'parallelMergeSmallBatchRows'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'grand_total' => :'Boolean',
        :'skip_empty_buckets' => :'Boolean',
        :'timeout' => :'Integer',
        :'priority' => :'Integer',
        :'query_id' => :'String',
        :'use_cache' => :'Boolean',
        :'populate_cache' => :'Boolean',
        :'use_result_level_cache' => :'Boolean',
        :'populate_result_level_cache' => :'Boolean',
        :'by_segment' => :'Boolean',
        :'finalize' => :'Boolean',
        :'chunk_period' => :'String',
        :'max_scatter_gather_bytes' => :'Integer',
        :'max_queued_bytes' => :'Integer',
        :'serialize_date_time_as_long' => :'Boolean',
        :'serialize_date_time_as_long_inner' => :'Boolean',
        :'enable_parallel_merge' => :'Boolean',
        :'parallel_merge_parallelism' => :'Integer',
        :'parallel_merge_initial_yield_rows' => :'Integer',
        :'parallel_merge_small_batch_rows' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IntersightClient::TelemetryDruidQueryContext` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IntersightClient::TelemetryDruidQueryContext`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'grand_total')
        self.grand_total = attributes[:'grand_total']
      end

      if attributes.key?(:'skip_empty_buckets')
        self.skip_empty_buckets = attributes[:'skip_empty_buckets']
      end

      if attributes.key?(:'timeout')
        self.timeout = attributes[:'timeout']
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.key?(:'query_id')
        self.query_id = attributes[:'query_id']
      end

      if attributes.key?(:'use_cache')
        self.use_cache = attributes[:'use_cache']
      end

      if attributes.key?(:'populate_cache')
        self.populate_cache = attributes[:'populate_cache']
      end

      if attributes.key?(:'use_result_level_cache')
        self.use_result_level_cache = attributes[:'use_result_level_cache']
      end

      if attributes.key?(:'populate_result_level_cache')
        self.populate_result_level_cache = attributes[:'populate_result_level_cache']
      end

      if attributes.key?(:'by_segment')
        self.by_segment = attributes[:'by_segment']
      end

      if attributes.key?(:'finalize')
        self.finalize = attributes[:'finalize']
      end

      if attributes.key?(:'chunk_period')
        self.chunk_period = attributes[:'chunk_period']
      end

      if attributes.key?(:'max_scatter_gather_bytes')
        self.max_scatter_gather_bytes = attributes[:'max_scatter_gather_bytes']
      end

      if attributes.key?(:'max_queued_bytes')
        self.max_queued_bytes = attributes[:'max_queued_bytes']
      end

      if attributes.key?(:'serialize_date_time_as_long')
        self.serialize_date_time_as_long = attributes[:'serialize_date_time_as_long']
      end

      if attributes.key?(:'serialize_date_time_as_long_inner')
        self.serialize_date_time_as_long_inner = attributes[:'serialize_date_time_as_long_inner']
      end

      if attributes.key?(:'enable_parallel_merge')
        self.enable_parallel_merge = attributes[:'enable_parallel_merge']
      end

      if attributes.key?(:'parallel_merge_parallelism')
        self.parallel_merge_parallelism = attributes[:'parallel_merge_parallelism']
      end

      if attributes.key?(:'parallel_merge_initial_yield_rows')
        self.parallel_merge_initial_yield_rows = attributes[:'parallel_merge_initial_yield_rows']
      end

      if attributes.key?(:'parallel_merge_small_batch_rows')
        self.parallel_merge_small_batch_rows = attributes[:'parallel_merge_small_batch_rows']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          grand_total == o.grand_total &&
          skip_empty_buckets == o.skip_empty_buckets &&
          timeout == o.timeout &&
          priority == o.priority &&
          query_id == o.query_id &&
          use_cache == o.use_cache &&
          populate_cache == o.populate_cache &&
          use_result_level_cache == o.use_result_level_cache &&
          populate_result_level_cache == o.populate_result_level_cache &&
          by_segment == o.by_segment &&
          finalize == o.finalize &&
          chunk_period == o.chunk_period &&
          max_scatter_gather_bytes == o.max_scatter_gather_bytes &&
          max_queued_bytes == o.max_queued_bytes &&
          serialize_date_time_as_long == o.serialize_date_time_as_long &&
          serialize_date_time_as_long_inner == o.serialize_date_time_as_long_inner &&
          enable_parallel_merge == o.enable_parallel_merge &&
          parallel_merge_parallelism == o.parallel_merge_parallelism &&
          parallel_merge_initial_yield_rows == o.parallel_merge_initial_yield_rows &&
          parallel_merge_small_batch_rows == o.parallel_merge_small_batch_rows
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [grand_total, skip_empty_buckets, timeout, priority, query_id, use_cache, populate_cache, use_result_level_cache, populate_result_level_cache, by_segment, finalize, chunk_period, max_scatter_gather_bytes, max_queued_bytes, serialize_date_time_as_long, serialize_date_time_as_long_inner, enable_parallel_merge, parallel_merge_parallelism, parallel_merge_initial_yield_rows, parallel_merge_small_batch_rows].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      TelemetryDruidQueryContext.openapi_types.each_pair do |key, type|
        if attributes[TelemetryDruidQueryContext.attribute_map[key]].nil? && TelemetryDruidQueryContext.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[TelemetryDruidQueryContext.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[TelemetryDruidQueryContext.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[TelemetryDruidQueryContext.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[TelemetryDruidQueryContext.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IntersightClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      TelemetryDruidQueryContext.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = TelemetryDruidQueryContext.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end

=begin
#Cisco Intersight

#Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-10-20T11:22:53Z.

The version of the OpenAPI document: 1.0.9-4870
Contact: intersight@cisco.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'cgi'

module IntersightClient
  class TelemetryApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Perform a Druid DatasourceMetadata request.
    # Endpoint that exposes Druid DatasourceMetadata requests for time series data.
    # @param telemetry_druid_data_source_metadata_request [TelemetryDruidDataSourceMetadataRequest] The Druid request schema for time series queries.
    # @param [Hash] opts the optional parameters
    # @return [Array<TelemetryDruidDataSourceMetadataResult>]
    def query_telemetry_datasource_metadata(telemetry_druid_data_source_metadata_request, opts = {})
      data, _status_code, _headers = query_telemetry_datasource_metadata_with_http_info(telemetry_druid_data_source_metadata_request, opts)
      data
    end

    # Perform a Druid DatasourceMetadata request.
    # Endpoint that exposes Druid DatasourceMetadata requests for time series data.
    # @param telemetry_druid_data_source_metadata_request [TelemetryDruidDataSourceMetadataRequest] The Druid request schema for time series queries.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TelemetryDruidDataSourceMetadataResult>, Integer, Hash)>] Array<TelemetryDruidDataSourceMetadataResult> data, response status code and response headers
    def query_telemetry_datasource_metadata_with_http_info(telemetry_druid_data_source_metadata_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TelemetryApi.query_telemetry_datasource_metadata ...'
      end
      # verify the required parameter 'telemetry_druid_data_source_metadata_request' is set
      if @api_client.config.client_side_validation && telemetry_druid_data_source_metadata_request.nil?
        fail ArgumentError, "Missing the required parameter 'telemetry_druid_data_source_metadata_request' when calling TelemetryApi.query_telemetry_datasource_metadata"
      end
      # resource path
      local_var_path = '/api/v1/telemetry/DataSourceMetadata'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(telemetry_druid_data_source_metadata_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TelemetryDruidDataSourceMetadataResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"TelemetryApi.query_telemetry_datasource_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TelemetryApi#query_telemetry_datasource_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform a Druid GroupBy request.
    # Endpoint that exposes Druid GroupBy requests for time series data.
    # @param telemetry_druid_group_by_request [TelemetryDruidGroupByRequest] The Druid request schema for time series queries.
    # @param [Hash] opts the optional parameters
    # @return [Array<TelemetryDruidGroupByResult>]
    def query_telemetry_group_by(telemetry_druid_group_by_request, opts = {})
      data, _status_code, _headers = query_telemetry_group_by_with_http_info(telemetry_druid_group_by_request, opts)
      data
    end

    # Perform a Druid GroupBy request.
    # Endpoint that exposes Druid GroupBy requests for time series data.
    # @param telemetry_druid_group_by_request [TelemetryDruidGroupByRequest] The Druid request schema for time series queries.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TelemetryDruidGroupByResult>, Integer, Hash)>] Array<TelemetryDruidGroupByResult> data, response status code and response headers
    def query_telemetry_group_by_with_http_info(telemetry_druid_group_by_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TelemetryApi.query_telemetry_group_by ...'
      end
      # verify the required parameter 'telemetry_druid_group_by_request' is set
      if @api_client.config.client_side_validation && telemetry_druid_group_by_request.nil?
        fail ArgumentError, "Missing the required parameter 'telemetry_druid_group_by_request' when calling TelemetryApi.query_telemetry_group_by"
      end
      # resource path
      local_var_path = '/api/v1/telemetry/GroupBys'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(telemetry_druid_group_by_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TelemetryDruidGroupByResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"TelemetryApi.query_telemetry_group_by",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TelemetryApi#query_telemetry_group_by\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform a Druid Scan request.
    # Endpoint that exposes Druid Scan requests for time series data.
    # @param telemetry_druid_scan_request [TelemetryDruidScanRequest] The Druid request schema for time series queries.
    # @param [Hash] opts the optional parameters
    # @return [Array<TelemetryDruidScanResult>]
    def query_telemetry_scan(telemetry_druid_scan_request, opts = {})
      data, _status_code, _headers = query_telemetry_scan_with_http_info(telemetry_druid_scan_request, opts)
      data
    end

    # Perform a Druid Scan request.
    # Endpoint that exposes Druid Scan requests for time series data.
    # @param telemetry_druid_scan_request [TelemetryDruidScanRequest] The Druid request schema for time series queries.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TelemetryDruidScanResult>, Integer, Hash)>] Array<TelemetryDruidScanResult> data, response status code and response headers
    def query_telemetry_scan_with_http_info(telemetry_druid_scan_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TelemetryApi.query_telemetry_scan ...'
      end
      # verify the required parameter 'telemetry_druid_scan_request' is set
      if @api_client.config.client_side_validation && telemetry_druid_scan_request.nil?
        fail ArgumentError, "Missing the required parameter 'telemetry_druid_scan_request' when calling TelemetryApi.query_telemetry_scan"
      end
      # resource path
      local_var_path = '/api/v1/telemetry/Scans'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(telemetry_druid_scan_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TelemetryDruidScanResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"TelemetryApi.query_telemetry_scan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TelemetryApi#query_telemetry_scan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform a Druid Search request.
    # Endpoint that exposes Druid Search requests for time series data.
    # @param telemetry_druid_search_request [TelemetryDruidSearchRequest] The Druid request schema for time series queries.
    # @param [Hash] opts the optional parameters
    # @return [Array<TelemetryDruidSearchResult>]
    def query_telemetry_search(telemetry_druid_search_request, opts = {})
      data, _status_code, _headers = query_telemetry_search_with_http_info(telemetry_druid_search_request, opts)
      data
    end

    # Perform a Druid Search request.
    # Endpoint that exposes Druid Search requests for time series data.
    # @param telemetry_druid_search_request [TelemetryDruidSearchRequest] The Druid request schema for time series queries.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TelemetryDruidSearchResult>, Integer, Hash)>] Array<TelemetryDruidSearchResult> data, response status code and response headers
    def query_telemetry_search_with_http_info(telemetry_druid_search_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TelemetryApi.query_telemetry_search ...'
      end
      # verify the required parameter 'telemetry_druid_search_request' is set
      if @api_client.config.client_side_validation && telemetry_druid_search_request.nil?
        fail ArgumentError, "Missing the required parameter 'telemetry_druid_search_request' when calling TelemetryApi.query_telemetry_search"
      end
      # resource path
      local_var_path = '/api/v1/telemetry/Searches'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(telemetry_druid_search_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TelemetryDruidSearchResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"TelemetryApi.query_telemetry_search",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TelemetryApi#query_telemetry_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform a Druid SegmentMetadata request.
    # Endpoint that exposes Druid SegmentMetadata requests for time series data.
    # @param telemetry_druid_segment_metadata_request [TelemetryDruidSegmentMetadataRequest] The Druid request schema for time series queries.
    # @param [Hash] opts the optional parameters
    # @return [Array<TelemetryDruidSegmentMetadataResult>]
    def query_telemetry_segment_metadata(telemetry_druid_segment_metadata_request, opts = {})
      data, _status_code, _headers = query_telemetry_segment_metadata_with_http_info(telemetry_druid_segment_metadata_request, opts)
      data
    end

    # Perform a Druid SegmentMetadata request.
    # Endpoint that exposes Druid SegmentMetadata requests for time series data.
    # @param telemetry_druid_segment_metadata_request [TelemetryDruidSegmentMetadataRequest] The Druid request schema for time series queries.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TelemetryDruidSegmentMetadataResult>, Integer, Hash)>] Array<TelemetryDruidSegmentMetadataResult> data, response status code and response headers
    def query_telemetry_segment_metadata_with_http_info(telemetry_druid_segment_metadata_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TelemetryApi.query_telemetry_segment_metadata ...'
      end
      # verify the required parameter 'telemetry_druid_segment_metadata_request' is set
      if @api_client.config.client_side_validation && telemetry_druid_segment_metadata_request.nil?
        fail ArgumentError, "Missing the required parameter 'telemetry_druid_segment_metadata_request' when calling TelemetryApi.query_telemetry_segment_metadata"
      end
      # resource path
      local_var_path = '/api/v1/telemetry/SegmentMetadata'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(telemetry_druid_segment_metadata_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TelemetryDruidSegmentMetadataResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"TelemetryApi.query_telemetry_segment_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TelemetryApi#query_telemetry_segment_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform a Druid TimeBoundary request.
    # Endpoint that exposes Druid TimeBoundary requests for time series data.
    # @param telemetry_druid_time_boundary_request [TelemetryDruidTimeBoundaryRequest] The Druid request schema for time series queries.
    # @param [Hash] opts the optional parameters
    # @return [Array<TelemetryDruidTimeBoundaryResult>]
    def query_telemetry_time_boundary(telemetry_druid_time_boundary_request, opts = {})
      data, _status_code, _headers = query_telemetry_time_boundary_with_http_info(telemetry_druid_time_boundary_request, opts)
      data
    end

    # Perform a Druid TimeBoundary request.
    # Endpoint that exposes Druid TimeBoundary requests for time series data.
    # @param telemetry_druid_time_boundary_request [TelemetryDruidTimeBoundaryRequest] The Druid request schema for time series queries.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TelemetryDruidTimeBoundaryResult>, Integer, Hash)>] Array<TelemetryDruidTimeBoundaryResult> data, response status code and response headers
    def query_telemetry_time_boundary_with_http_info(telemetry_druid_time_boundary_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TelemetryApi.query_telemetry_time_boundary ...'
      end
      # verify the required parameter 'telemetry_druid_time_boundary_request' is set
      if @api_client.config.client_side_validation && telemetry_druid_time_boundary_request.nil?
        fail ArgumentError, "Missing the required parameter 'telemetry_druid_time_boundary_request' when calling TelemetryApi.query_telemetry_time_boundary"
      end
      # resource path
      local_var_path = '/api/v1/telemetry/TimeBoundaries'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(telemetry_druid_time_boundary_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TelemetryDruidTimeBoundaryResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"TelemetryApi.query_telemetry_time_boundary",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TelemetryApi#query_telemetry_time_boundary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform a Druid TimeSeries request.
    # Endpoint that exposes Druid requests for time series data. This endpoint exposes specifically TimeSeries requests and broker information.
    # @param telemetry_druid_time_series_request [TelemetryDruidTimeSeriesRequest] The Druid request schema for time series queries.
    # @param [Hash] opts the optional parameters
    # @return [Array<TelemetryDruidIntervalResult>]
    def query_telemetry_time_series(telemetry_druid_time_series_request, opts = {})
      data, _status_code, _headers = query_telemetry_time_series_with_http_info(telemetry_druid_time_series_request, opts)
      data
    end

    # Perform a Druid TimeSeries request.
    # Endpoint that exposes Druid requests for time series data. This endpoint exposes specifically TimeSeries requests and broker information.
    # @param telemetry_druid_time_series_request [TelemetryDruidTimeSeriesRequest] The Druid request schema for time series queries.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TelemetryDruidIntervalResult>, Integer, Hash)>] Array<TelemetryDruidIntervalResult> data, response status code and response headers
    def query_telemetry_time_series_with_http_info(telemetry_druid_time_series_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TelemetryApi.query_telemetry_time_series ...'
      end
      # verify the required parameter 'telemetry_druid_time_series_request' is set
      if @api_client.config.client_side_validation && telemetry_druid_time_series_request.nil?
        fail ArgumentError, "Missing the required parameter 'telemetry_druid_time_series_request' when calling TelemetryApi.query_telemetry_time_series"
      end
      # resource path
      local_var_path = '/api/v1/telemetry/TimeSeries'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(telemetry_druid_time_series_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TelemetryDruidIntervalResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"TelemetryApi.query_telemetry_time_series",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TelemetryApi#query_telemetry_time_series\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform a Druid TopN request.
    # Endpoint that exposes Druid TopN requests for time series data.
    # @param telemetry_druid_top_n_request [TelemetryDruidTopNRequest] The Druid request schema for time series queries.
    # @param [Hash] opts the optional parameters
    # @return [Array<TelemetryDruidTopNResult>]
    def query_telemetry_top_n(telemetry_druid_top_n_request, opts = {})
      data, _status_code, _headers = query_telemetry_top_n_with_http_info(telemetry_druid_top_n_request, opts)
      data
    end

    # Perform a Druid TopN request.
    # Endpoint that exposes Druid TopN requests for time series data.
    # @param telemetry_druid_top_n_request [TelemetryDruidTopNRequest] The Druid request schema for time series queries.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TelemetryDruidTopNResult>, Integer, Hash)>] Array<TelemetryDruidTopNResult> data, response status code and response headers
    def query_telemetry_top_n_with_http_info(telemetry_druid_top_n_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TelemetryApi.query_telemetry_top_n ...'
      end
      # verify the required parameter 'telemetry_druid_top_n_request' is set
      if @api_client.config.client_side_validation && telemetry_druid_top_n_request.nil?
        fail ArgumentError, "Missing the required parameter 'telemetry_druid_top_n_request' when calling TelemetryApi.query_telemetry_top_n"
      end
      # resource path
      local_var_path = '/api/v1/telemetry/Topns'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(telemetry_druid_top_n_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TelemetryDruidTopNResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"TelemetryApi.query_telemetry_top_n",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TelemetryApi#query_telemetry_top_n\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#Cisco Intersight

#Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-10-20T11:22:53Z.

The version of the OpenAPI document: 1.0.9-4870
Contact: intersight@cisco.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'cgi'

module IntersightClient
  class ApplianceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a 'appliance.AutoRmaPolicy' resource.
    # @param appliance_auto_rma_policy [ApplianceAutoRmaPolicy] The &#39;appliance.AutoRmaPolicy&#39; resource to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
    # @return [ApplianceAutoRmaPolicy]
    def create_appliance_auto_rma_policy(appliance_auto_rma_policy, opts = {})
      data, _status_code, _headers = create_appliance_auto_rma_policy_with_http_info(appliance_auto_rma_policy, opts)
      data
    end

    # Create a &#39;appliance.AutoRmaPolicy&#39; resource.
    # @param appliance_auto_rma_policy [ApplianceAutoRmaPolicy] The &#39;appliance.AutoRmaPolicy&#39; resource to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
    # @return [Array<(ApplianceAutoRmaPolicy, Integer, Hash)>] ApplianceAutoRmaPolicy data, response status code and response headers
    def create_appliance_auto_rma_policy_with_http_info(appliance_auto_rma_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.create_appliance_auto_rma_policy ...'
      end
      # verify the required parameter 'appliance_auto_rma_policy' is set
      if @api_client.config.client_side_validation && appliance_auto_rma_policy.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_auto_rma_policy' when calling ApplianceApi.create_appliance_auto_rma_policy"
      end
      # resource path
      local_var_path = '/api/v1/appliance/AutoRmaPolicies'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_auto_rma_policy)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceAutoRmaPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.create_appliance_auto_rma_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#create_appliance_auto_rma_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a 'appliance.Backup' resource.
    # @param appliance_backup [ApplianceBackup] The &#39;appliance.Backup&#39; resource to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
    # @return [ApplianceBackup]
    def create_appliance_backup(appliance_backup, opts = {})
      data, _status_code, _headers = create_appliance_backup_with_http_info(appliance_backup, opts)
      data
    end

    # Create a &#39;appliance.Backup&#39; resource.
    # @param appliance_backup [ApplianceBackup] The &#39;appliance.Backup&#39; resource to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
    # @return [Array<(ApplianceBackup, Integer, Hash)>] ApplianceBackup data, response status code and response headers
    def create_appliance_backup_with_http_info(appliance_backup, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.create_appliance_backup ...'
      end
      # verify the required parameter 'appliance_backup' is set
      if @api_client.config.client_side_validation && appliance_backup.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_backup' when calling ApplianceApi.create_appliance_backup"
      end
      # resource path
      local_var_path = '/api/v1/appliance/Backups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_backup)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceBackup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.create_appliance_backup",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#create_appliance_backup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a 'appliance.BackupPolicy' resource.
    # @param appliance_backup_policy [ApplianceBackupPolicy] The &#39;appliance.BackupPolicy&#39; resource to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
    # @return [ApplianceBackupPolicy]
    def create_appliance_backup_policy(appliance_backup_policy, opts = {})
      data, _status_code, _headers = create_appliance_backup_policy_with_http_info(appliance_backup_policy, opts)
      data
    end

    # Create a &#39;appliance.BackupPolicy&#39; resource.
    # @param appliance_backup_policy [ApplianceBackupPolicy] The &#39;appliance.BackupPolicy&#39; resource to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
    # @return [Array<(ApplianceBackupPolicy, Integer, Hash)>] ApplianceBackupPolicy data, response status code and response headers
    def create_appliance_backup_policy_with_http_info(appliance_backup_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.create_appliance_backup_policy ...'
      end
      # verify the required parameter 'appliance_backup_policy' is set
      if @api_client.config.client_side_validation && appliance_backup_policy.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_backup_policy' when calling ApplianceApi.create_appliance_backup_policy"
      end
      # resource path
      local_var_path = '/api/v1/appliance/BackupPolicies'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_backup_policy)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceBackupPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.create_appliance_backup_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#create_appliance_backup_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a 'appliance.DataExportPolicy' resource.
    # @param appliance_data_export_policy [ApplianceDataExportPolicy] The &#39;appliance.DataExportPolicy&#39; resource to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
    # @return [ApplianceDataExportPolicy]
    def create_appliance_data_export_policy(appliance_data_export_policy, opts = {})
      data, _status_code, _headers = create_appliance_data_export_policy_with_http_info(appliance_data_export_policy, opts)
      data
    end

    # Create a &#39;appliance.DataExportPolicy&#39; resource.
    # @param appliance_data_export_policy [ApplianceDataExportPolicy] The &#39;appliance.DataExportPolicy&#39; resource to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
    # @return [Array<(ApplianceDataExportPolicy, Integer, Hash)>] ApplianceDataExportPolicy data, response status code and response headers
    def create_appliance_data_export_policy_with_http_info(appliance_data_export_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.create_appliance_data_export_policy ...'
      end
      # verify the required parameter 'appliance_data_export_policy' is set
      if @api_client.config.client_side_validation && appliance_data_export_policy.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_data_export_policy' when calling ApplianceApi.create_appliance_data_export_policy"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DataExportPolicies'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_data_export_policy)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDataExportPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.create_appliance_data_export_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#create_appliance_data_export_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a 'appliance.DeviceClaim' resource.
    # @param appliance_device_claim [ApplianceDeviceClaim] The &#39;appliance.DeviceClaim&#39; resource to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
    # @return [ApplianceDeviceClaim]
    def create_appliance_device_claim(appliance_device_claim, opts = {})
      data, _status_code, _headers = create_appliance_device_claim_with_http_info(appliance_device_claim, opts)
      data
    end

    # Create a &#39;appliance.DeviceClaim&#39; resource.
    # @param appliance_device_claim [ApplianceDeviceClaim] The &#39;appliance.DeviceClaim&#39; resource to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
    # @return [Array<(ApplianceDeviceClaim, Integer, Hash)>] ApplianceDeviceClaim data, response status code and response headers
    def create_appliance_device_claim_with_http_info(appliance_device_claim, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.create_appliance_device_claim ...'
      end
      # verify the required parameter 'appliance_device_claim' is set
      if @api_client.config.client_side_validation && appliance_device_claim.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_device_claim' when calling ApplianceApi.create_appliance_device_claim"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DeviceClaims'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_device_claim)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDeviceClaim'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.create_appliance_device_claim",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#create_appliance_device_claim\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a 'appliance.DiagSetting' resource.
    # @param appliance_diag_setting [ApplianceDiagSetting] The &#39;appliance.DiagSetting&#39; resource to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
    # @return [ApplianceDiagSetting]
    def create_appliance_diag_setting(appliance_diag_setting, opts = {})
      data, _status_code, _headers = create_appliance_diag_setting_with_http_info(appliance_diag_setting, opts)
      data
    end

    # Create a &#39;appliance.DiagSetting&#39; resource.
    # @param appliance_diag_setting [ApplianceDiagSetting] The &#39;appliance.DiagSetting&#39; resource to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
    # @return [Array<(ApplianceDiagSetting, Integer, Hash)>] ApplianceDiagSetting data, response status code and response headers
    def create_appliance_diag_setting_with_http_info(appliance_diag_setting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.create_appliance_diag_setting ...'
      end
      # verify the required parameter 'appliance_diag_setting' is set
      if @api_client.config.client_side_validation && appliance_diag_setting.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_diag_setting' when calling ApplianceApi.create_appliance_diag_setting"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DiagSettings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_diag_setting)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDiagSetting'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.create_appliance_diag_setting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#create_appliance_diag_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a 'appliance.RemoteFileImport' resource.
    # @param appliance_remote_file_import [ApplianceRemoteFileImport] The &#39;appliance.RemoteFileImport&#39; resource to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
    # @return [ApplianceRemoteFileImport]
    def create_appliance_remote_file_import(appliance_remote_file_import, opts = {})
      data, _status_code, _headers = create_appliance_remote_file_import_with_http_info(appliance_remote_file_import, opts)
      data
    end

    # Create a &#39;appliance.RemoteFileImport&#39; resource.
    # @param appliance_remote_file_import [ApplianceRemoteFileImport] The &#39;appliance.RemoteFileImport&#39; resource to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
    # @return [Array<(ApplianceRemoteFileImport, Integer, Hash)>] ApplianceRemoteFileImport data, response status code and response headers
    def create_appliance_remote_file_import_with_http_info(appliance_remote_file_import, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.create_appliance_remote_file_import ...'
      end
      # verify the required parameter 'appliance_remote_file_import' is set
      if @api_client.config.client_side_validation && appliance_remote_file_import.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_remote_file_import' when calling ApplianceApi.create_appliance_remote_file_import"
      end
      # resource path
      local_var_path = '/api/v1/appliance/RemoteFileImports'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_remote_file_import)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceRemoteFileImport'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.create_appliance_remote_file_import",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#create_appliance_remote_file_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a 'appliance.Restore' resource.
    # @param appliance_restore [ApplianceRestore] The &#39;appliance.Restore&#39; resource to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
    # @return [ApplianceRestore]
    def create_appliance_restore(appliance_restore, opts = {})
      data, _status_code, _headers = create_appliance_restore_with_http_info(appliance_restore, opts)
      data
    end

    # Create a &#39;appliance.Restore&#39; resource.
    # @param appliance_restore [ApplianceRestore] The &#39;appliance.Restore&#39; resource to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @option opts [String] :if_none_match For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
    # @return [Array<(ApplianceRestore, Integer, Hash)>] ApplianceRestore data, response status code and response headers
    def create_appliance_restore_with_http_info(appliance_restore, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.create_appliance_restore ...'
      end
      # verify the required parameter 'appliance_restore' is set
      if @api_client.config.client_side_validation && appliance_restore.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_restore' when calling ApplianceApi.create_appliance_restore"
      end
      # resource path
      local_var_path = '/api/v1/appliance/Restores'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_restore)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceRestore'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.create_appliance_restore",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#create_appliance_restore\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a 'appliance.Backup' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_appliance_backup(moid, opts = {})
      delete_appliance_backup_with_http_info(moid, opts)
      nil
    end

    # Delete a &#39;appliance.Backup&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_appliance_backup_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.delete_appliance_backup ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.delete_appliance_backup"
      end
      # resource path
      local_var_path = '/api/v1/appliance/Backups/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.delete_appliance_backup",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#delete_appliance_backup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a 'appliance.Restore' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_appliance_restore(moid, opts = {})
      delete_appliance_restore_with_http_info(moid, opts)
      nil
    end

    # Delete a &#39;appliance.Restore&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_appliance_restore_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.delete_appliance_restore ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.delete_appliance_restore"
      end
      # resource path
      local_var_path = '/api/v1/appliance/Restores/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.delete_appliance_restore",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#delete_appliance_restore\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a 'appliance.Upgrade' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_appliance_upgrade(moid, opts = {})
      delete_appliance_upgrade_with_http_info(moid, opts)
      nil
    end

    # Delete a &#39;appliance.Upgrade&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_appliance_upgrade_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.delete_appliance_upgrade ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.delete_appliance_upgrade"
      end
      # resource path
      local_var_path = '/api/v1/appliance/Upgrades/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.delete_appliance_upgrade",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#delete_appliance_upgrade\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.AppStatus' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceAppStatus]
    def get_appliance_app_status_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_app_status_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.AppStatus&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceAppStatus, Integer, Hash)>] ApplianceAppStatus data, response status code and response headers
    def get_appliance_app_status_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_app_status_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_app_status_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/AppStatuses/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceAppStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_app_status_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_app_status_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.AppStatus' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceAppStatusResponse]
    def get_appliance_app_status_list(opts = {})
      data, _status_code, _headers = get_appliance_app_status_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.AppStatus&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceAppStatusResponse, Integer, Hash)>] ApplianceAppStatusResponse data, response status code and response headers
    def get_appliance_app_status_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_app_status_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/AppStatuses'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceAppStatusResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_app_status_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_app_status_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.AutoRmaPolicy' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceAutoRmaPolicy]
    def get_appliance_auto_rma_policy_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_auto_rma_policy_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.AutoRmaPolicy&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceAutoRmaPolicy, Integer, Hash)>] ApplianceAutoRmaPolicy data, response status code and response headers
    def get_appliance_auto_rma_policy_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_auto_rma_policy_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_auto_rma_policy_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/AutoRmaPolicies/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceAutoRmaPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_auto_rma_policy_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_auto_rma_policy_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.AutoRmaPolicy' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceAutoRmaPolicyResponse]
    def get_appliance_auto_rma_policy_list(opts = {})
      data, _status_code, _headers = get_appliance_auto_rma_policy_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.AutoRmaPolicy&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceAutoRmaPolicyResponse, Integer, Hash)>] ApplianceAutoRmaPolicyResponse data, response status code and response headers
    def get_appliance_auto_rma_policy_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_auto_rma_policy_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/AutoRmaPolicies'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceAutoRmaPolicyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_auto_rma_policy_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_auto_rma_policy_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.Backup' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceBackup]
    def get_appliance_backup_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_backup_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.Backup&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceBackup, Integer, Hash)>] ApplianceBackup data, response status code and response headers
    def get_appliance_backup_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_backup_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_backup_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/Backups/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceBackup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_backup_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_backup_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.Backup' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceBackupResponse]
    def get_appliance_backup_list(opts = {})
      data, _status_code, _headers = get_appliance_backup_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.Backup&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceBackupResponse, Integer, Hash)>] ApplianceBackupResponse data, response status code and response headers
    def get_appliance_backup_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_backup_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/Backups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceBackupResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_backup_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_backup_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.BackupPolicy' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceBackupPolicy]
    def get_appliance_backup_policy_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_backup_policy_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.BackupPolicy&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceBackupPolicy, Integer, Hash)>] ApplianceBackupPolicy data, response status code and response headers
    def get_appliance_backup_policy_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_backup_policy_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_backup_policy_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/BackupPolicies/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceBackupPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_backup_policy_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_backup_policy_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.BackupPolicy' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceBackupPolicyResponse]
    def get_appliance_backup_policy_list(opts = {})
      data, _status_code, _headers = get_appliance_backup_policy_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.BackupPolicy&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceBackupPolicyResponse, Integer, Hash)>] ApplianceBackupPolicyResponse data, response status code and response headers
    def get_appliance_backup_policy_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_backup_policy_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/BackupPolicies'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceBackupPolicyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_backup_policy_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_backup_policy_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.CertificateSetting' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceCertificateSetting]
    def get_appliance_certificate_setting_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_certificate_setting_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.CertificateSetting&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceCertificateSetting, Integer, Hash)>] ApplianceCertificateSetting data, response status code and response headers
    def get_appliance_certificate_setting_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_certificate_setting_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_certificate_setting_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/CertificateSettings/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceCertificateSetting'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_certificate_setting_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_certificate_setting_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.CertificateSetting' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceCertificateSettingResponse]
    def get_appliance_certificate_setting_list(opts = {})
      data, _status_code, _headers = get_appliance_certificate_setting_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.CertificateSetting&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceCertificateSettingResponse, Integer, Hash)>] ApplianceCertificateSettingResponse data, response status code and response headers
    def get_appliance_certificate_setting_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_certificate_setting_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/CertificateSettings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceCertificateSettingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_certificate_setting_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_certificate_setting_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.DataExportPolicy' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceDataExportPolicy]
    def get_appliance_data_export_policy_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_data_export_policy_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.DataExportPolicy&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceDataExportPolicy, Integer, Hash)>] ApplianceDataExportPolicy data, response status code and response headers
    def get_appliance_data_export_policy_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_data_export_policy_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_data_export_policy_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DataExportPolicies/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDataExportPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_data_export_policy_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_data_export_policy_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.DataExportPolicy' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceDataExportPolicyResponse]
    def get_appliance_data_export_policy_list(opts = {})
      data, _status_code, _headers = get_appliance_data_export_policy_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.DataExportPolicy&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceDataExportPolicyResponse, Integer, Hash)>] ApplianceDataExportPolicyResponse data, response status code and response headers
    def get_appliance_data_export_policy_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_data_export_policy_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DataExportPolicies'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDataExportPolicyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_data_export_policy_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_data_export_policy_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.DeviceCertificate' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceDeviceCertificate]
    def get_appliance_device_certificate_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_device_certificate_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.DeviceCertificate&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceDeviceCertificate, Integer, Hash)>] ApplianceDeviceCertificate data, response status code and response headers
    def get_appliance_device_certificate_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_device_certificate_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_device_certificate_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DeviceCertificates/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDeviceCertificate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_device_certificate_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_device_certificate_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.DeviceCertificate' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceDeviceCertificateResponse]
    def get_appliance_device_certificate_list(opts = {})
      data, _status_code, _headers = get_appliance_device_certificate_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.DeviceCertificate&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceDeviceCertificateResponse, Integer, Hash)>] ApplianceDeviceCertificateResponse data, response status code and response headers
    def get_appliance_device_certificate_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_device_certificate_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DeviceCertificates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDeviceCertificateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_device_certificate_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_device_certificate_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.DeviceClaim' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceDeviceClaim]
    def get_appliance_device_claim_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_device_claim_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.DeviceClaim&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceDeviceClaim, Integer, Hash)>] ApplianceDeviceClaim data, response status code and response headers
    def get_appliance_device_claim_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_device_claim_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_device_claim_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DeviceClaims/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDeviceClaim'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_device_claim_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_device_claim_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.DeviceClaim' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceDeviceClaimResponse]
    def get_appliance_device_claim_list(opts = {})
      data, _status_code, _headers = get_appliance_device_claim_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.DeviceClaim&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceDeviceClaimResponse, Integer, Hash)>] ApplianceDeviceClaimResponse data, response status code and response headers
    def get_appliance_device_claim_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_device_claim_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DeviceClaims'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDeviceClaimResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_device_claim_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_device_claim_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.DeviceUpgradePolicy' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceDeviceUpgradePolicy]
    def get_appliance_device_upgrade_policy_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_device_upgrade_policy_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.DeviceUpgradePolicy&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceDeviceUpgradePolicy, Integer, Hash)>] ApplianceDeviceUpgradePolicy data, response status code and response headers
    def get_appliance_device_upgrade_policy_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_device_upgrade_policy_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_device_upgrade_policy_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DeviceUpgradePolicies/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDeviceUpgradePolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_device_upgrade_policy_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_device_upgrade_policy_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.DeviceUpgradePolicy' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceDeviceUpgradePolicyResponse]
    def get_appliance_device_upgrade_policy_list(opts = {})
      data, _status_code, _headers = get_appliance_device_upgrade_policy_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.DeviceUpgradePolicy&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceDeviceUpgradePolicyResponse, Integer, Hash)>] ApplianceDeviceUpgradePolicyResponse data, response status code and response headers
    def get_appliance_device_upgrade_policy_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_device_upgrade_policy_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DeviceUpgradePolicies'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDeviceUpgradePolicyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_device_upgrade_policy_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_device_upgrade_policy_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.DiagSetting' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceDiagSetting]
    def get_appliance_diag_setting_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_diag_setting_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.DiagSetting&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceDiagSetting, Integer, Hash)>] ApplianceDiagSetting data, response status code and response headers
    def get_appliance_diag_setting_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_diag_setting_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_diag_setting_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DiagSettings/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDiagSetting'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_diag_setting_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_diag_setting_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.DiagSetting' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceDiagSettingResponse]
    def get_appliance_diag_setting_list(opts = {})
      data, _status_code, _headers = get_appliance_diag_setting_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.DiagSetting&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceDiagSettingResponse, Integer, Hash)>] ApplianceDiagSettingResponse data, response status code and response headers
    def get_appliance_diag_setting_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_diag_setting_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DiagSettings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDiagSettingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_diag_setting_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_diag_setting_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.ExternalSyslogSetting' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceExternalSyslogSetting]
    def get_appliance_external_syslog_setting_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_external_syslog_setting_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.ExternalSyslogSetting&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceExternalSyslogSetting, Integer, Hash)>] ApplianceExternalSyslogSetting data, response status code and response headers
    def get_appliance_external_syslog_setting_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_external_syslog_setting_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_external_syslog_setting_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/ExternalSyslogSettings/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceExternalSyslogSetting'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_external_syslog_setting_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_external_syslog_setting_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.ExternalSyslogSetting' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceExternalSyslogSettingResponse]
    def get_appliance_external_syslog_setting_list(opts = {})
      data, _status_code, _headers = get_appliance_external_syslog_setting_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.ExternalSyslogSetting&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceExternalSyslogSettingResponse, Integer, Hash)>] ApplianceExternalSyslogSettingResponse data, response status code and response headers
    def get_appliance_external_syslog_setting_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_external_syslog_setting_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/ExternalSyslogSettings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceExternalSyslogSettingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_external_syslog_setting_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_external_syslog_setting_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.FileGateway' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceFileGateway]
    def get_appliance_file_gateway_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_file_gateway_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.FileGateway&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceFileGateway, Integer, Hash)>] ApplianceFileGateway data, response status code and response headers
    def get_appliance_file_gateway_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_file_gateway_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_file_gateway_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/FileGateways/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceFileGateway'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_file_gateway_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_file_gateway_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.FileGateway' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceFileGatewayResponse]
    def get_appliance_file_gateway_list(opts = {})
      data, _status_code, _headers = get_appliance_file_gateway_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.FileGateway&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceFileGatewayResponse, Integer, Hash)>] ApplianceFileGatewayResponse data, response status code and response headers
    def get_appliance_file_gateway_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_file_gateway_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/FileGateways'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceFileGatewayResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_file_gateway_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_file_gateway_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.FileSystemStatus' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceFileSystemStatus]
    def get_appliance_file_system_status_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_file_system_status_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.FileSystemStatus&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceFileSystemStatus, Integer, Hash)>] ApplianceFileSystemStatus data, response status code and response headers
    def get_appliance_file_system_status_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_file_system_status_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_file_system_status_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/FileSystemStatuses/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceFileSystemStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_file_system_status_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_file_system_status_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.FileSystemStatus' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceFileSystemStatusResponse]
    def get_appliance_file_system_status_list(opts = {})
      data, _status_code, _headers = get_appliance_file_system_status_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.FileSystemStatus&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceFileSystemStatusResponse, Integer, Hash)>] ApplianceFileSystemStatusResponse data, response status code and response headers
    def get_appliance_file_system_status_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_file_system_status_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/FileSystemStatuses'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceFileSystemStatusResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_file_system_status_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_file_system_status_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.GroupStatus' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceGroupStatus]
    def get_appliance_group_status_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_group_status_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.GroupStatus&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceGroupStatus, Integer, Hash)>] ApplianceGroupStatus data, response status code and response headers
    def get_appliance_group_status_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_group_status_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_group_status_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/GroupStatuses/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceGroupStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_group_status_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_group_status_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.GroupStatus' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceGroupStatusResponse]
    def get_appliance_group_status_list(opts = {})
      data, _status_code, _headers = get_appliance_group_status_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.GroupStatus&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceGroupStatusResponse, Integer, Hash)>] ApplianceGroupStatusResponse data, response status code and response headers
    def get_appliance_group_status_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_group_status_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/GroupStatuses'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceGroupStatusResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_group_status_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_group_status_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.ImageBundle' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceImageBundle]
    def get_appliance_image_bundle_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_image_bundle_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.ImageBundle&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceImageBundle, Integer, Hash)>] ApplianceImageBundle data, response status code and response headers
    def get_appliance_image_bundle_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_image_bundle_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_image_bundle_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/ImageBundles/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceImageBundle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_image_bundle_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_image_bundle_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.ImageBundle' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceImageBundleResponse]
    def get_appliance_image_bundle_list(opts = {})
      data, _status_code, _headers = get_appliance_image_bundle_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.ImageBundle&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceImageBundleResponse, Integer, Hash)>] ApplianceImageBundleResponse data, response status code and response headers
    def get_appliance_image_bundle_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_image_bundle_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/ImageBundles'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceImageBundleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_image_bundle_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_image_bundle_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.NodeInfo' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceNodeInfo]
    def get_appliance_node_info_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_node_info_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.NodeInfo&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceNodeInfo, Integer, Hash)>] ApplianceNodeInfo data, response status code and response headers
    def get_appliance_node_info_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_node_info_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_node_info_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/NodeInfos/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceNodeInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_node_info_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_node_info_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.NodeInfo' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceNodeInfoResponse]
    def get_appliance_node_info_list(opts = {})
      data, _status_code, _headers = get_appliance_node_info_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.NodeInfo&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceNodeInfoResponse, Integer, Hash)>] ApplianceNodeInfoResponse data, response status code and response headers
    def get_appliance_node_info_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_node_info_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/NodeInfos'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceNodeInfoResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_node_info_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_node_info_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.NodeStatus' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceNodeStatus]
    def get_appliance_node_status_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_node_status_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.NodeStatus&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceNodeStatus, Integer, Hash)>] ApplianceNodeStatus data, response status code and response headers
    def get_appliance_node_status_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_node_status_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_node_status_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/NodeStatuses/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceNodeStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_node_status_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_node_status_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.NodeStatus' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceNodeStatusResponse]
    def get_appliance_node_status_list(opts = {})
      data, _status_code, _headers = get_appliance_node_status_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.NodeStatus&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceNodeStatusResponse, Integer, Hash)>] ApplianceNodeStatusResponse data, response status code and response headers
    def get_appliance_node_status_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_node_status_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/NodeStatuses'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceNodeStatusResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_node_status_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_node_status_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.ReleaseNote' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceReleaseNote]
    def get_appliance_release_note_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_release_note_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.ReleaseNote&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceReleaseNote, Integer, Hash)>] ApplianceReleaseNote data, response status code and response headers
    def get_appliance_release_note_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_release_note_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_release_note_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/ReleaseNotes/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceReleaseNote'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_release_note_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_release_note_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.ReleaseNote' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceReleaseNoteResponse]
    def get_appliance_release_note_list(opts = {})
      data, _status_code, _headers = get_appliance_release_note_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.ReleaseNote&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceReleaseNoteResponse, Integer, Hash)>] ApplianceReleaseNoteResponse data, response status code and response headers
    def get_appliance_release_note_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_release_note_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/ReleaseNotes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceReleaseNoteResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_release_note_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_release_note_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.RemoteFileImport' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceRemoteFileImport]
    def get_appliance_remote_file_import_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_remote_file_import_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.RemoteFileImport&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceRemoteFileImport, Integer, Hash)>] ApplianceRemoteFileImport data, response status code and response headers
    def get_appliance_remote_file_import_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_remote_file_import_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_remote_file_import_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/RemoteFileImports/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceRemoteFileImport'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_remote_file_import_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_remote_file_import_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.RemoteFileImport' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceRemoteFileImportResponse]
    def get_appliance_remote_file_import_list(opts = {})
      data, _status_code, _headers = get_appliance_remote_file_import_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.RemoteFileImport&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceRemoteFileImportResponse, Integer, Hash)>] ApplianceRemoteFileImportResponse data, response status code and response headers
    def get_appliance_remote_file_import_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_remote_file_import_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/RemoteFileImports'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceRemoteFileImportResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_remote_file_import_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_remote_file_import_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.Restore' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceRestore]
    def get_appliance_restore_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_restore_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.Restore&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceRestore, Integer, Hash)>] ApplianceRestore data, response status code and response headers
    def get_appliance_restore_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_restore_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_restore_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/Restores/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceRestore'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_restore_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_restore_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.Restore' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceRestoreResponse]
    def get_appliance_restore_list(opts = {})
      data, _status_code, _headers = get_appliance_restore_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.Restore&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceRestoreResponse, Integer, Hash)>] ApplianceRestoreResponse data, response status code and response headers
    def get_appliance_restore_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_restore_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/Restores'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceRestoreResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_restore_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_restore_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.SetupInfo' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceSetupInfo]
    def get_appliance_setup_info_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_setup_info_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.SetupInfo&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceSetupInfo, Integer, Hash)>] ApplianceSetupInfo data, response status code and response headers
    def get_appliance_setup_info_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_setup_info_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_setup_info_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/SetupInfos/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceSetupInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_setup_info_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_setup_info_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.SetupInfo' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceSetupInfoResponse]
    def get_appliance_setup_info_list(opts = {})
      data, _status_code, _headers = get_appliance_setup_info_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.SetupInfo&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceSetupInfoResponse, Integer, Hash)>] ApplianceSetupInfoResponse data, response status code and response headers
    def get_appliance_setup_info_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_setup_info_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/SetupInfos'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceSetupInfoResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_setup_info_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_setup_info_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.SystemInfo' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceSystemInfo]
    def get_appliance_system_info_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_system_info_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.SystemInfo&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceSystemInfo, Integer, Hash)>] ApplianceSystemInfo data, response status code and response headers
    def get_appliance_system_info_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_system_info_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_system_info_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/SystemInfos/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceSystemInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_system_info_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_system_info_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.SystemInfo' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceSystemInfoResponse]
    def get_appliance_system_info_list(opts = {})
      data, _status_code, _headers = get_appliance_system_info_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.SystemInfo&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceSystemInfoResponse, Integer, Hash)>] ApplianceSystemInfoResponse data, response status code and response headers
    def get_appliance_system_info_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_system_info_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/SystemInfos'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceSystemInfoResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_system_info_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_system_info_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.SystemStatus' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceSystemStatus]
    def get_appliance_system_status_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_system_status_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.SystemStatus&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceSystemStatus, Integer, Hash)>] ApplianceSystemStatus data, response status code and response headers
    def get_appliance_system_status_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_system_status_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_system_status_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/SystemStatuses/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceSystemStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_system_status_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_system_status_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.SystemStatus' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceSystemStatusResponse]
    def get_appliance_system_status_list(opts = {})
      data, _status_code, _headers = get_appliance_system_status_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.SystemStatus&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceSystemStatusResponse, Integer, Hash)>] ApplianceSystemStatusResponse data, response status code and response headers
    def get_appliance_system_status_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_system_status_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/SystemStatuses'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceSystemStatusResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_system_status_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_system_status_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.Upgrade' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceUpgrade]
    def get_appliance_upgrade_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_upgrade_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.Upgrade&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceUpgrade, Integer, Hash)>] ApplianceUpgrade data, response status code and response headers
    def get_appliance_upgrade_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_upgrade_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_upgrade_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/Upgrades/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceUpgrade'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_upgrade_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_upgrade_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.Upgrade' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceUpgradeResponse]
    def get_appliance_upgrade_list(opts = {})
      data, _status_code, _headers = get_appliance_upgrade_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.Upgrade&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceUpgradeResponse, Integer, Hash)>] ApplianceUpgradeResponse data, response status code and response headers
    def get_appliance_upgrade_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_upgrade_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/Upgrades'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceUpgradeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_upgrade_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_upgrade_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.UpgradePolicy' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [ApplianceUpgradePolicy]
    def get_appliance_upgrade_policy_by_moid(moid, opts = {})
      data, _status_code, _headers = get_appliance_upgrade_policy_by_moid_with_http_info(moid, opts)
      data
    end

    # Read a &#39;appliance.UpgradePolicy&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplianceUpgradePolicy, Integer, Hash)>] ApplianceUpgradePolicy data, response status code and response headers
    def get_appliance_upgrade_policy_by_moid_with_http_info(moid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_upgrade_policy_by_moid ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.get_appliance_upgrade_policy_by_moid"
      end
      # resource path
      local_var_path = '/api/v1/appliance/UpgradePolicies/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceUpgradePolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_upgrade_policy_by_moid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_upgrade_policy_by_moid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a 'appliance.UpgradePolicy' resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false). (default to '')
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response. (default to 100)
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response. (default to 0)
    # @option opts [String] :select Specifies a subset of properties to return. (default to '')
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response. (default to 'allpages')
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [ApplianceUpgradePolicyResponse]
    def get_appliance_upgrade_policy_list(opts = {})
      data, _status_code, _headers = get_appliance_upgrade_policy_list_with_http_info(opts)
      data
    end

    # Read a &#39;appliance.UpgradePolicy&#39; resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
    # @option opts [String] :orderby Determines what properties are used to sort the collection of resources.
    # @option opts [Integer] :top Specifies the maximum number of resources to return in the response.
    # @option opts [Integer] :skip Specifies the number of resources to skip in the response.
    # @option opts [String] :select Specifies a subset of properties to return.
    # @option opts [String] :expand Specify additional attributes or related resources to return in addition to the primary resources.
    # @option opts [String] :apply Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
    # @option opts [Boolean] :count The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
    # @option opts [String] :inlinecount The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
    # @option opts [String] :at Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
    # @option opts [String] :tags The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
    # @return [Array<(ApplianceUpgradePolicyResponse, Integer, Hash)>] ApplianceUpgradePolicyResponse data, response status code and response headers
    def get_appliance_upgrade_policy_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.get_appliance_upgrade_policy_list ...'
      end
      allowable_values = ["allpages", "none"]
      if @api_client.config.client_side_validation && opts[:'inlinecount'] && !allowable_values.include?(opts[:'inlinecount'])
        fail ArgumentError, "invalid value for \"inlinecount\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/appliance/UpgradePolicies'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceUpgradePolicyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.get_appliance_upgrade_policy_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#get_appliance_upgrade_policy_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.AutoRmaPolicy' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_auto_rma_policy [ApplianceAutoRmaPolicy] The &#39;appliance.AutoRmaPolicy&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceAutoRmaPolicy]
    def patch_appliance_auto_rma_policy(moid, appliance_auto_rma_policy, opts = {})
      data, _status_code, _headers = patch_appliance_auto_rma_policy_with_http_info(moid, appliance_auto_rma_policy, opts)
      data
    end

    # Update a &#39;appliance.AutoRmaPolicy&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_auto_rma_policy [ApplianceAutoRmaPolicy] The &#39;appliance.AutoRmaPolicy&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceAutoRmaPolicy, Integer, Hash)>] ApplianceAutoRmaPolicy data, response status code and response headers
    def patch_appliance_auto_rma_policy_with_http_info(moid, appliance_auto_rma_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.patch_appliance_auto_rma_policy ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.patch_appliance_auto_rma_policy"
      end
      # verify the required parameter 'appliance_auto_rma_policy' is set
      if @api_client.config.client_side_validation && appliance_auto_rma_policy.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_auto_rma_policy' when calling ApplianceApi.patch_appliance_auto_rma_policy"
      end
      # resource path
      local_var_path = '/api/v1/appliance/AutoRmaPolicies/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_auto_rma_policy)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceAutoRmaPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.patch_appliance_auto_rma_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#patch_appliance_auto_rma_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.BackupPolicy' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_backup_policy [ApplianceBackupPolicy] The &#39;appliance.BackupPolicy&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceBackupPolicy]
    def patch_appliance_backup_policy(moid, appliance_backup_policy, opts = {})
      data, _status_code, _headers = patch_appliance_backup_policy_with_http_info(moid, appliance_backup_policy, opts)
      data
    end

    # Update a &#39;appliance.BackupPolicy&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_backup_policy [ApplianceBackupPolicy] The &#39;appliance.BackupPolicy&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceBackupPolicy, Integer, Hash)>] ApplianceBackupPolicy data, response status code and response headers
    def patch_appliance_backup_policy_with_http_info(moid, appliance_backup_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.patch_appliance_backup_policy ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.patch_appliance_backup_policy"
      end
      # verify the required parameter 'appliance_backup_policy' is set
      if @api_client.config.client_side_validation && appliance_backup_policy.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_backup_policy' when calling ApplianceApi.patch_appliance_backup_policy"
      end
      # resource path
      local_var_path = '/api/v1/appliance/BackupPolicies/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_backup_policy)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceBackupPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.patch_appliance_backup_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#patch_appliance_backup_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.CertificateSetting' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_certificate_setting [ApplianceCertificateSetting] The &#39;appliance.CertificateSetting&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceCertificateSetting]
    def patch_appliance_certificate_setting(moid, appliance_certificate_setting, opts = {})
      data, _status_code, _headers = patch_appliance_certificate_setting_with_http_info(moid, appliance_certificate_setting, opts)
      data
    end

    # Update a &#39;appliance.CertificateSetting&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_certificate_setting [ApplianceCertificateSetting] The &#39;appliance.CertificateSetting&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceCertificateSetting, Integer, Hash)>] ApplianceCertificateSetting data, response status code and response headers
    def patch_appliance_certificate_setting_with_http_info(moid, appliance_certificate_setting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.patch_appliance_certificate_setting ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.patch_appliance_certificate_setting"
      end
      # verify the required parameter 'appliance_certificate_setting' is set
      if @api_client.config.client_side_validation && appliance_certificate_setting.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_certificate_setting' when calling ApplianceApi.patch_appliance_certificate_setting"
      end
      # resource path
      local_var_path = '/api/v1/appliance/CertificateSettings/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_certificate_setting)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceCertificateSetting'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.patch_appliance_certificate_setting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#patch_appliance_certificate_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.DataExportPolicy' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_data_export_policy [ApplianceDataExportPolicy] The &#39;appliance.DataExportPolicy&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceDataExportPolicy]
    def patch_appliance_data_export_policy(moid, appliance_data_export_policy, opts = {})
      data, _status_code, _headers = patch_appliance_data_export_policy_with_http_info(moid, appliance_data_export_policy, opts)
      data
    end

    # Update a &#39;appliance.DataExportPolicy&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_data_export_policy [ApplianceDataExportPolicy] The &#39;appliance.DataExportPolicy&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceDataExportPolicy, Integer, Hash)>] ApplianceDataExportPolicy data, response status code and response headers
    def patch_appliance_data_export_policy_with_http_info(moid, appliance_data_export_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.patch_appliance_data_export_policy ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.patch_appliance_data_export_policy"
      end
      # verify the required parameter 'appliance_data_export_policy' is set
      if @api_client.config.client_side_validation && appliance_data_export_policy.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_data_export_policy' when calling ApplianceApi.patch_appliance_data_export_policy"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DataExportPolicies/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_data_export_policy)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDataExportPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.patch_appliance_data_export_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#patch_appliance_data_export_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.DeviceClaim' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_device_claim [ApplianceDeviceClaim] The &#39;appliance.DeviceClaim&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceDeviceClaim]
    def patch_appliance_device_claim(moid, appliance_device_claim, opts = {})
      data, _status_code, _headers = patch_appliance_device_claim_with_http_info(moid, appliance_device_claim, opts)
      data
    end

    # Update a &#39;appliance.DeviceClaim&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_device_claim [ApplianceDeviceClaim] The &#39;appliance.DeviceClaim&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceDeviceClaim, Integer, Hash)>] ApplianceDeviceClaim data, response status code and response headers
    def patch_appliance_device_claim_with_http_info(moid, appliance_device_claim, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.patch_appliance_device_claim ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.patch_appliance_device_claim"
      end
      # verify the required parameter 'appliance_device_claim' is set
      if @api_client.config.client_side_validation && appliance_device_claim.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_device_claim' when calling ApplianceApi.patch_appliance_device_claim"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DeviceClaims/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_device_claim)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDeviceClaim'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.patch_appliance_device_claim",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#patch_appliance_device_claim\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.DeviceUpgradePolicy' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_device_upgrade_policy [ApplianceDeviceUpgradePolicy] The &#39;appliance.DeviceUpgradePolicy&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceDeviceUpgradePolicy]
    def patch_appliance_device_upgrade_policy(moid, appliance_device_upgrade_policy, opts = {})
      data, _status_code, _headers = patch_appliance_device_upgrade_policy_with_http_info(moid, appliance_device_upgrade_policy, opts)
      data
    end

    # Update a &#39;appliance.DeviceUpgradePolicy&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_device_upgrade_policy [ApplianceDeviceUpgradePolicy] The &#39;appliance.DeviceUpgradePolicy&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceDeviceUpgradePolicy, Integer, Hash)>] ApplianceDeviceUpgradePolicy data, response status code and response headers
    def patch_appliance_device_upgrade_policy_with_http_info(moid, appliance_device_upgrade_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.patch_appliance_device_upgrade_policy ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.patch_appliance_device_upgrade_policy"
      end
      # verify the required parameter 'appliance_device_upgrade_policy' is set
      if @api_client.config.client_side_validation && appliance_device_upgrade_policy.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_device_upgrade_policy' when calling ApplianceApi.patch_appliance_device_upgrade_policy"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DeviceUpgradePolicies/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_device_upgrade_policy)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDeviceUpgradePolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.patch_appliance_device_upgrade_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#patch_appliance_device_upgrade_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.DiagSetting' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_diag_setting [ApplianceDiagSetting] The &#39;appliance.DiagSetting&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceDiagSetting]
    def patch_appliance_diag_setting(moid, appliance_diag_setting, opts = {})
      data, _status_code, _headers = patch_appliance_diag_setting_with_http_info(moid, appliance_diag_setting, opts)
      data
    end

    # Update a &#39;appliance.DiagSetting&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_diag_setting [ApplianceDiagSetting] The &#39;appliance.DiagSetting&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceDiagSetting, Integer, Hash)>] ApplianceDiagSetting data, response status code and response headers
    def patch_appliance_diag_setting_with_http_info(moid, appliance_diag_setting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.patch_appliance_diag_setting ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.patch_appliance_diag_setting"
      end
      # verify the required parameter 'appliance_diag_setting' is set
      if @api_client.config.client_side_validation && appliance_diag_setting.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_diag_setting' when calling ApplianceApi.patch_appliance_diag_setting"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DiagSettings/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_diag_setting)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDiagSetting'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.patch_appliance_diag_setting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#patch_appliance_diag_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.ExternalSyslogSetting' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_external_syslog_setting [ApplianceExternalSyslogSetting] The &#39;appliance.ExternalSyslogSetting&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceExternalSyslogSetting]
    def patch_appliance_external_syslog_setting(moid, appliance_external_syslog_setting, opts = {})
      data, _status_code, _headers = patch_appliance_external_syslog_setting_with_http_info(moid, appliance_external_syslog_setting, opts)
      data
    end

    # Update a &#39;appliance.ExternalSyslogSetting&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_external_syslog_setting [ApplianceExternalSyslogSetting] The &#39;appliance.ExternalSyslogSetting&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceExternalSyslogSetting, Integer, Hash)>] ApplianceExternalSyslogSetting data, response status code and response headers
    def patch_appliance_external_syslog_setting_with_http_info(moid, appliance_external_syslog_setting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.patch_appliance_external_syslog_setting ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.patch_appliance_external_syslog_setting"
      end
      # verify the required parameter 'appliance_external_syslog_setting' is set
      if @api_client.config.client_side_validation && appliance_external_syslog_setting.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_external_syslog_setting' when calling ApplianceApi.patch_appliance_external_syslog_setting"
      end
      # resource path
      local_var_path = '/api/v1/appliance/ExternalSyslogSettings/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_external_syslog_setting)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceExternalSyslogSetting'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.patch_appliance_external_syslog_setting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#patch_appliance_external_syslog_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.SetupInfo' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_setup_info [ApplianceSetupInfo] The &#39;appliance.SetupInfo&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceSetupInfo]
    def patch_appliance_setup_info(moid, appliance_setup_info, opts = {})
      data, _status_code, _headers = patch_appliance_setup_info_with_http_info(moid, appliance_setup_info, opts)
      data
    end

    # Update a &#39;appliance.SetupInfo&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_setup_info [ApplianceSetupInfo] The &#39;appliance.SetupInfo&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceSetupInfo, Integer, Hash)>] ApplianceSetupInfo data, response status code and response headers
    def patch_appliance_setup_info_with_http_info(moid, appliance_setup_info, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.patch_appliance_setup_info ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.patch_appliance_setup_info"
      end
      # verify the required parameter 'appliance_setup_info' is set
      if @api_client.config.client_side_validation && appliance_setup_info.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_setup_info' when calling ApplianceApi.patch_appliance_setup_info"
      end
      # resource path
      local_var_path = '/api/v1/appliance/SetupInfos/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_setup_info)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceSetupInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.patch_appliance_setup_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#patch_appliance_setup_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.Upgrade' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_upgrade [ApplianceUpgrade] The &#39;appliance.Upgrade&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceUpgrade]
    def patch_appliance_upgrade(moid, appliance_upgrade, opts = {})
      data, _status_code, _headers = patch_appliance_upgrade_with_http_info(moid, appliance_upgrade, opts)
      data
    end

    # Update a &#39;appliance.Upgrade&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_upgrade [ApplianceUpgrade] The &#39;appliance.Upgrade&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceUpgrade, Integer, Hash)>] ApplianceUpgrade data, response status code and response headers
    def patch_appliance_upgrade_with_http_info(moid, appliance_upgrade, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.patch_appliance_upgrade ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.patch_appliance_upgrade"
      end
      # verify the required parameter 'appliance_upgrade' is set
      if @api_client.config.client_side_validation && appliance_upgrade.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_upgrade' when calling ApplianceApi.patch_appliance_upgrade"
      end
      # resource path
      local_var_path = '/api/v1/appliance/Upgrades/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_upgrade)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceUpgrade'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.patch_appliance_upgrade",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#patch_appliance_upgrade\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.UpgradePolicy' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_upgrade_policy [ApplianceUpgradePolicy] The &#39;appliance.UpgradePolicy&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceUpgradePolicy]
    def patch_appliance_upgrade_policy(moid, appliance_upgrade_policy, opts = {})
      data, _status_code, _headers = patch_appliance_upgrade_policy_with_http_info(moid, appliance_upgrade_policy, opts)
      data
    end

    # Update a &#39;appliance.UpgradePolicy&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_upgrade_policy [ApplianceUpgradePolicy] The &#39;appliance.UpgradePolicy&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceUpgradePolicy, Integer, Hash)>] ApplianceUpgradePolicy data, response status code and response headers
    def patch_appliance_upgrade_policy_with_http_info(moid, appliance_upgrade_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.patch_appliance_upgrade_policy ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.patch_appliance_upgrade_policy"
      end
      # verify the required parameter 'appliance_upgrade_policy' is set
      if @api_client.config.client_side_validation && appliance_upgrade_policy.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_upgrade_policy' when calling ApplianceApi.patch_appliance_upgrade_policy"
      end
      # resource path
      local_var_path = '/api/v1/appliance/UpgradePolicies/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_upgrade_policy)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceUpgradePolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.patch_appliance_upgrade_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#patch_appliance_upgrade_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.AutoRmaPolicy' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_auto_rma_policy [ApplianceAutoRmaPolicy] The &#39;appliance.AutoRmaPolicy&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceAutoRmaPolicy]
    def update_appliance_auto_rma_policy(moid, appliance_auto_rma_policy, opts = {})
      data, _status_code, _headers = update_appliance_auto_rma_policy_with_http_info(moid, appliance_auto_rma_policy, opts)
      data
    end

    # Update a &#39;appliance.AutoRmaPolicy&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_auto_rma_policy [ApplianceAutoRmaPolicy] The &#39;appliance.AutoRmaPolicy&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceAutoRmaPolicy, Integer, Hash)>] ApplianceAutoRmaPolicy data, response status code and response headers
    def update_appliance_auto_rma_policy_with_http_info(moid, appliance_auto_rma_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.update_appliance_auto_rma_policy ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.update_appliance_auto_rma_policy"
      end
      # verify the required parameter 'appliance_auto_rma_policy' is set
      if @api_client.config.client_side_validation && appliance_auto_rma_policy.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_auto_rma_policy' when calling ApplianceApi.update_appliance_auto_rma_policy"
      end
      # resource path
      local_var_path = '/api/v1/appliance/AutoRmaPolicies/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_auto_rma_policy)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceAutoRmaPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.update_appliance_auto_rma_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#update_appliance_auto_rma_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.BackupPolicy' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_backup_policy [ApplianceBackupPolicy] The &#39;appliance.BackupPolicy&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceBackupPolicy]
    def update_appliance_backup_policy(moid, appliance_backup_policy, opts = {})
      data, _status_code, _headers = update_appliance_backup_policy_with_http_info(moid, appliance_backup_policy, opts)
      data
    end

    # Update a &#39;appliance.BackupPolicy&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_backup_policy [ApplianceBackupPolicy] The &#39;appliance.BackupPolicy&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceBackupPolicy, Integer, Hash)>] ApplianceBackupPolicy data, response status code and response headers
    def update_appliance_backup_policy_with_http_info(moid, appliance_backup_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.update_appliance_backup_policy ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.update_appliance_backup_policy"
      end
      # verify the required parameter 'appliance_backup_policy' is set
      if @api_client.config.client_side_validation && appliance_backup_policy.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_backup_policy' when calling ApplianceApi.update_appliance_backup_policy"
      end
      # resource path
      local_var_path = '/api/v1/appliance/BackupPolicies/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_backup_policy)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceBackupPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.update_appliance_backup_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#update_appliance_backup_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.CertificateSetting' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_certificate_setting [ApplianceCertificateSetting] The &#39;appliance.CertificateSetting&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceCertificateSetting]
    def update_appliance_certificate_setting(moid, appliance_certificate_setting, opts = {})
      data, _status_code, _headers = update_appliance_certificate_setting_with_http_info(moid, appliance_certificate_setting, opts)
      data
    end

    # Update a &#39;appliance.CertificateSetting&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_certificate_setting [ApplianceCertificateSetting] The &#39;appliance.CertificateSetting&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceCertificateSetting, Integer, Hash)>] ApplianceCertificateSetting data, response status code and response headers
    def update_appliance_certificate_setting_with_http_info(moid, appliance_certificate_setting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.update_appliance_certificate_setting ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.update_appliance_certificate_setting"
      end
      # verify the required parameter 'appliance_certificate_setting' is set
      if @api_client.config.client_side_validation && appliance_certificate_setting.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_certificate_setting' when calling ApplianceApi.update_appliance_certificate_setting"
      end
      # resource path
      local_var_path = '/api/v1/appliance/CertificateSettings/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_certificate_setting)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceCertificateSetting'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.update_appliance_certificate_setting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#update_appliance_certificate_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.DataExportPolicy' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_data_export_policy [ApplianceDataExportPolicy] The &#39;appliance.DataExportPolicy&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceDataExportPolicy]
    def update_appliance_data_export_policy(moid, appliance_data_export_policy, opts = {})
      data, _status_code, _headers = update_appliance_data_export_policy_with_http_info(moid, appliance_data_export_policy, opts)
      data
    end

    # Update a &#39;appliance.DataExportPolicy&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_data_export_policy [ApplianceDataExportPolicy] The &#39;appliance.DataExportPolicy&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceDataExportPolicy, Integer, Hash)>] ApplianceDataExportPolicy data, response status code and response headers
    def update_appliance_data_export_policy_with_http_info(moid, appliance_data_export_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.update_appliance_data_export_policy ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.update_appliance_data_export_policy"
      end
      # verify the required parameter 'appliance_data_export_policy' is set
      if @api_client.config.client_side_validation && appliance_data_export_policy.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_data_export_policy' when calling ApplianceApi.update_appliance_data_export_policy"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DataExportPolicies/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_data_export_policy)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDataExportPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.update_appliance_data_export_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#update_appliance_data_export_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.DeviceClaim' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_device_claim [ApplianceDeviceClaim] The &#39;appliance.DeviceClaim&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceDeviceClaim]
    def update_appliance_device_claim(moid, appliance_device_claim, opts = {})
      data, _status_code, _headers = update_appliance_device_claim_with_http_info(moid, appliance_device_claim, opts)
      data
    end

    # Update a &#39;appliance.DeviceClaim&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_device_claim [ApplianceDeviceClaim] The &#39;appliance.DeviceClaim&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceDeviceClaim, Integer, Hash)>] ApplianceDeviceClaim data, response status code and response headers
    def update_appliance_device_claim_with_http_info(moid, appliance_device_claim, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.update_appliance_device_claim ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.update_appliance_device_claim"
      end
      # verify the required parameter 'appliance_device_claim' is set
      if @api_client.config.client_side_validation && appliance_device_claim.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_device_claim' when calling ApplianceApi.update_appliance_device_claim"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DeviceClaims/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_device_claim)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDeviceClaim'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.update_appliance_device_claim",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#update_appliance_device_claim\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.DeviceUpgradePolicy' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_device_upgrade_policy [ApplianceDeviceUpgradePolicy] The &#39;appliance.DeviceUpgradePolicy&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceDeviceUpgradePolicy]
    def update_appliance_device_upgrade_policy(moid, appliance_device_upgrade_policy, opts = {})
      data, _status_code, _headers = update_appliance_device_upgrade_policy_with_http_info(moid, appliance_device_upgrade_policy, opts)
      data
    end

    # Update a &#39;appliance.DeviceUpgradePolicy&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_device_upgrade_policy [ApplianceDeviceUpgradePolicy] The &#39;appliance.DeviceUpgradePolicy&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceDeviceUpgradePolicy, Integer, Hash)>] ApplianceDeviceUpgradePolicy data, response status code and response headers
    def update_appliance_device_upgrade_policy_with_http_info(moid, appliance_device_upgrade_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.update_appliance_device_upgrade_policy ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.update_appliance_device_upgrade_policy"
      end
      # verify the required parameter 'appliance_device_upgrade_policy' is set
      if @api_client.config.client_side_validation && appliance_device_upgrade_policy.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_device_upgrade_policy' when calling ApplianceApi.update_appliance_device_upgrade_policy"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DeviceUpgradePolicies/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_device_upgrade_policy)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDeviceUpgradePolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.update_appliance_device_upgrade_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#update_appliance_device_upgrade_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.DiagSetting' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_diag_setting [ApplianceDiagSetting] The &#39;appliance.DiagSetting&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceDiagSetting]
    def update_appliance_diag_setting(moid, appliance_diag_setting, opts = {})
      data, _status_code, _headers = update_appliance_diag_setting_with_http_info(moid, appliance_diag_setting, opts)
      data
    end

    # Update a &#39;appliance.DiagSetting&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_diag_setting [ApplianceDiagSetting] The &#39;appliance.DiagSetting&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceDiagSetting, Integer, Hash)>] ApplianceDiagSetting data, response status code and response headers
    def update_appliance_diag_setting_with_http_info(moid, appliance_diag_setting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.update_appliance_diag_setting ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.update_appliance_diag_setting"
      end
      # verify the required parameter 'appliance_diag_setting' is set
      if @api_client.config.client_side_validation && appliance_diag_setting.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_diag_setting' when calling ApplianceApi.update_appliance_diag_setting"
      end
      # resource path
      local_var_path = '/api/v1/appliance/DiagSettings/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_diag_setting)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceDiagSetting'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.update_appliance_diag_setting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#update_appliance_diag_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.ExternalSyslogSetting' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_external_syslog_setting [ApplianceExternalSyslogSetting] The &#39;appliance.ExternalSyslogSetting&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceExternalSyslogSetting]
    def update_appliance_external_syslog_setting(moid, appliance_external_syslog_setting, opts = {})
      data, _status_code, _headers = update_appliance_external_syslog_setting_with_http_info(moid, appliance_external_syslog_setting, opts)
      data
    end

    # Update a &#39;appliance.ExternalSyslogSetting&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_external_syslog_setting [ApplianceExternalSyslogSetting] The &#39;appliance.ExternalSyslogSetting&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceExternalSyslogSetting, Integer, Hash)>] ApplianceExternalSyslogSetting data, response status code and response headers
    def update_appliance_external_syslog_setting_with_http_info(moid, appliance_external_syslog_setting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.update_appliance_external_syslog_setting ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.update_appliance_external_syslog_setting"
      end
      # verify the required parameter 'appliance_external_syslog_setting' is set
      if @api_client.config.client_side_validation && appliance_external_syslog_setting.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_external_syslog_setting' when calling ApplianceApi.update_appliance_external_syslog_setting"
      end
      # resource path
      local_var_path = '/api/v1/appliance/ExternalSyslogSettings/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_external_syslog_setting)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceExternalSyslogSetting'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.update_appliance_external_syslog_setting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#update_appliance_external_syslog_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.SetupInfo' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_setup_info [ApplianceSetupInfo] The &#39;appliance.SetupInfo&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceSetupInfo]
    def update_appliance_setup_info(moid, appliance_setup_info, opts = {})
      data, _status_code, _headers = update_appliance_setup_info_with_http_info(moid, appliance_setup_info, opts)
      data
    end

    # Update a &#39;appliance.SetupInfo&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_setup_info [ApplianceSetupInfo] The &#39;appliance.SetupInfo&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceSetupInfo, Integer, Hash)>] ApplianceSetupInfo data, response status code and response headers
    def update_appliance_setup_info_with_http_info(moid, appliance_setup_info, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.update_appliance_setup_info ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.update_appliance_setup_info"
      end
      # verify the required parameter 'appliance_setup_info' is set
      if @api_client.config.client_side_validation && appliance_setup_info.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_setup_info' when calling ApplianceApi.update_appliance_setup_info"
      end
      # resource path
      local_var_path = '/api/v1/appliance/SetupInfos/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_setup_info)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceSetupInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.update_appliance_setup_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#update_appliance_setup_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.Upgrade' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_upgrade [ApplianceUpgrade] The &#39;appliance.Upgrade&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceUpgrade]
    def update_appliance_upgrade(moid, appliance_upgrade, opts = {})
      data, _status_code, _headers = update_appliance_upgrade_with_http_info(moid, appliance_upgrade, opts)
      data
    end

    # Update a &#39;appliance.Upgrade&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_upgrade [ApplianceUpgrade] The &#39;appliance.Upgrade&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceUpgrade, Integer, Hash)>] ApplianceUpgrade data, response status code and response headers
    def update_appliance_upgrade_with_http_info(moid, appliance_upgrade, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.update_appliance_upgrade ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.update_appliance_upgrade"
      end
      # verify the required parameter 'appliance_upgrade' is set
      if @api_client.config.client_side_validation && appliance_upgrade.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_upgrade' when calling ApplianceApi.update_appliance_upgrade"
      end
      # resource path
      local_var_path = '/api/v1/appliance/Upgrades/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_upgrade)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceUpgrade'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.update_appliance_upgrade",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#update_appliance_upgrade\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a 'appliance.UpgradePolicy' resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_upgrade_policy [ApplianceUpgradePolicy] The &#39;appliance.UpgradePolicy&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [ApplianceUpgradePolicy]
    def update_appliance_upgrade_policy(moid, appliance_upgrade_policy, opts = {})
      data, _status_code, _headers = update_appliance_upgrade_policy_with_http_info(moid, appliance_upgrade_policy, opts)
      data
    end

    # Update a &#39;appliance.UpgradePolicy&#39; resource.
    # @param moid [String] The unique Moid identifier of a resource instance.
    # @param appliance_upgrade_policy [ApplianceUpgradePolicy] The &#39;appliance.UpgradePolicy&#39; resource to update.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_match For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
    # @return [Array<(ApplianceUpgradePolicy, Integer, Hash)>] ApplianceUpgradePolicy data, response status code and response headers
    def update_appliance_upgrade_policy_with_http_info(moid, appliance_upgrade_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplianceApi.update_appliance_upgrade_policy ...'
      end
      # verify the required parameter 'moid' is set
      if @api_client.config.client_side_validation && moid.nil?
        fail ArgumentError, "Missing the required parameter 'moid' when calling ApplianceApi.update_appliance_upgrade_policy"
      end
      # verify the required parameter 'appliance_upgrade_policy' is set
      if @api_client.config.client_side_validation && appliance_upgrade_policy.nil?
        fail ArgumentError, "Missing the required parameter 'appliance_upgrade_policy' when calling ApplianceApi.update_appliance_upgrade_policy"
      end
      # resource path
      local_var_path = '/api/v1/appliance/UpgradePolicies/{Moid}'.sub('{' + 'Moid' + '}', CGI.escape(moid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/json-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = opts[:'if_match'] if !opts[:'if_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(appliance_upgrade_policy)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplianceUpgradePolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']

      new_options = opts.merge(
        :operation => :"ApplianceApi.update_appliance_upgrade_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplianceApi#update_appliance_upgrade_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
